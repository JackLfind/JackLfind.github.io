{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/fluid/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/default.png","path":"img/default.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/loading.gif","path":"img/loading.gif","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/debouncer.js","path":"js/debouncer.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/clipboard-use.js","path":"js/clipboard-use.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/lazyload.js","path":"js/lazyload.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":1,"renderable":1},{"_id":"themes/fluid/source/lib/hint/hint.min.css","path":"lib/hint/hint.min.css","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/a.md","hash":"4d3658e2b763049464d2e6e76758ec558a86407a","modified":1600602811294},{"_id":"source/_posts/first.md","hash":"1db95e55039b4217e3205ba3ec59843a16b3f332","modified":1600441807865},{"_id":"source/_posts/聊天室项目.md","hash":"babb4b3aa35df043b498c0d289ff32dc552aa07e","modified":1600598936728},{"_id":"source/about/index.md","hash":"f521a92163afe5ae401e9005e7b07dd8bc82fd14","modified":1600440948074},{"_id":"source/_posts/vue3傻瓜式入门“/10.png","hash":"55fe2841ebc131020aff85aab9b3b9b37565eca8","modified":1600600043293},{"_id":"source/_posts/vue3傻瓜式入门“/1.png","hash":"22fb964c7e7c617cf0b933e53076035da81ebb7d","modified":1600599979145},{"_id":"source/_posts/vue3傻瓜式入门“/11.png","hash":"210ba9cc02a971c44ec57661dcf4f7d178e88d1b","modified":1600600049043},{"_id":"source/_posts/vue3傻瓜式入门“/16.png","hash":"335824c4a833514f4eba4c9479bb27553c4d3472","modified":1600600160789},{"_id":"source/_posts/vue3傻瓜式入门“/17.png","hash":"469e7f4ee3113807edc5d6100838844fe6ab1661","modified":1600600167846},{"_id":"source/_posts/vue3傻瓜式入门“/19.png","hash":"452d40f5e223aef0a2ab19bfdd9f376631beabde","modified":1600600190324},{"_id":"source/_posts/vue3傻瓜式入门“/20.png","hash":"8b36c876560f0a5acdec8c98b6609a8293d4cfe1","modified":1600600195262},{"_id":"source/_posts/vue3傻瓜式入门“/18.png","hash":"c060358034457d182e8dc70679f7e2196b54c778","modified":1600600179859},{"_id":"source/_posts/vue3傻瓜式入门“/2.png","hash":"d910d061f6e272860141c3f2531e8b582fcc1802","modified":1600599987817},{"_id":"source/_posts/vue3傻瓜式入门“/4.png","hash":"635a720c80151093e25e5ff8b4310921280f68c3","modified":1600600006708},{"_id":"source/_posts/vue3傻瓜式入门“/3.png","hash":"8cdb7c63b0dd5caff11f4604ff206f609f6de462","modified":1600599998013},{"_id":"source/_posts/vue3傻瓜式入门“/5.png","hash":"080f14ffed66d276ea8a079ee999bdbf57f101ae","modified":1600600014547},{"_id":"source/_posts/vue3傻瓜式入门“/6.png","hash":"fdf47209f4267956489abdaa543dbe6e36e9f1e3","modified":1600600020515},{"_id":"source/_posts/vue3傻瓜式入门“/7.png","hash":"0c209e48457513a95000bc33cdf6003fe9e004bc","modified":1600600025818},{"_id":"source/_posts/vue3傻瓜式入门“/8.png","hash":"42daabfc55acb29785d9ffef7b95a42457541fc6","modified":1600600030659},{"_id":"source/_posts/vue3傻瓜式入门“/9.png","hash":"439186efa5ff93f352b6283e96355ee43ad70494","modified":1600600038412},{"_id":"source/_posts/聊天室项目/聊天室数据库结构设计.png","hash":"7ee75e329ddd9e4fdba0e399338a30252f1f044b","modified":1600481806125},{"_id":"source/_posts/vue3傻瓜式入门“/15.png","hash":"eee620c0de302fbecef117cb4de186c4488c7edb","modified":1600600080864},{"_id":"source/_posts/vue3傻瓜式入门“/12.png","hash":"6a8e920b604222ea22c369d8c4d4467a21d56ce4","modified":1600600058097},{"_id":"source/_posts/vue3傻瓜式入门“/14.png","hash":"f64969797e1c6195e86410cc9001c2d31a2ce42b","modified":1600600073126},{"_id":"themes/fluid/source/css/_pages/_category/category.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1600400171432},{"_id":"themes/fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1600400171436},{"_id":"themes/fluid/.editorconfig","hash":"b595159772f3ee1ef5e6780ce307270e741cb309","modified":1600400171313},{"_id":"themes/fluid/.gitattributes","hash":"3e00e1fb043438cd820d94ee3dc9ffb6718996f3","modified":1600400171323},{"_id":"themes/fluid/LICENSE","hash":"653274b0f005f82768a7e5e17a32d38bfe38d492","modified":1600400171338},{"_id":"themes/fluid/.eslintrc","hash":"3df89453e1f63051fafc90f16a8d83951050e316","modified":1600400171314},{"_id":"themes/fluid/_static_prefix.yml","hash":"55d3d882e209550bd2fefd240d1b3333a9eb65de","modified":1600400171342},{"_id":"themes/fluid/package.json","hash":"351b481bf476525dcf202e5ca02071a707b1f8cb","modified":1600400171391},{"_id":"themes/fluid/README.md","hash":"99cd0094d327ee659b2ccda5322ac9ad5f444588","modified":1600444216669},{"_id":"themes/fluid/languages/en.yml","hash":"31f2867619a768606166778d4ee51f3d00ac33a0","modified":1600400171345},{"_id":"themes/fluid/languages/ja.yml","hash":"dc43be11a300893ebef47283c22f2f946ca21260","modified":1600400171346},{"_id":"themes/fluid/gulpfile.js","hash":"1ad8861ce4f702c164f908efb6c1c6504154ed2d","modified":1600400171344},{"_id":"themes/fluid/languages/zh-CN.yml","hash":"3b92f4428d66c31610f6cde13b82ee723aff00d2","modified":1600400171347},{"_id":"themes/fluid/_config.yml","hash":"7be3f6446d2d34082ecb7745f45d9505fa53efcd","modified":1600495252879},{"_id":"themes/fluid/layout/404.ejs","hash":"79a598e43c40d48b23076361720f1e77df466e41","modified":1600400171348},{"_id":"themes/fluid/layout/archive.ejs","hash":"df4510c4e6653803a35ab8bfaca60c2d7e2bb16e","modified":1600400171382},{"_id":"themes/fluid/layout/about.ejs","hash":"3753755fcba5e25183b4a44ce27cf6f45f47d35f","modified":1600400171381},{"_id":"themes/fluid/layout/categories.ejs","hash":"0a8fe294cbbcc5112e360fcfdef5925fd39580bb","modified":1600400171383},{"_id":"themes/fluid/layout/category.ejs","hash":"395ed0ef33d1e735e8597c12bb6e03fba1ff93e0","modified":1600400171384},{"_id":"themes/fluid/layout/index.ejs","hash":"421dffc2b9061e65fa9fbd7ae99e99789cde1317","modified":1600400171385},{"_id":"themes/fluid/layout/layout.ejs","hash":"105004d9009e5c8719fb2cbc1cd38214b3144a26","modified":1600400171386},{"_id":"themes/fluid/layout/page.ejs","hash":"9f4a66735082127fd0792ba747029212e63c90a1","modified":1600400171387},{"_id":"themes/fluid/layout/links.ejs","hash":"8efaa2ab9804df1b3f72b6940b47247eb7853b66","modified":1600400171387},{"_id":"themes/fluid/layout/post.ejs","hash":"b280341534453431f627af7ca12d3f1850294d94","modified":1600400171388},{"_id":"themes/fluid/layout/tag.ejs","hash":"512b999d6ba6dc0ccc4617ad5f60ce024f81e62e","modified":1600400171389},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"5f2fdc38c60bea3ec36efcb52ef5d1b1edc7e046","modified":1600400171324},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"3bb59da264ea70f30cc8f2c9b8cee71a04e3dd78","modified":1600400171325},{"_id":"themes/fluid/layout/tags.ejs","hash":"b7c1a6d8fc1097fc16d2300260297013cb692153","modified":1600400171391},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"a9d5164f9a7930d2561c58e7dbc3dba5b7b74747","modified":1600400171334},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question.md","hash":"102213e5d6790d060c0e26b4a3a7ec744d753c52","modified":1600400171335},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"62dd795d0ff88804687427f00bb50ec06f5cbacd","modified":1600400171334},{"_id":"themes/fluid/.github/workflows/limit.yaml","hash":"bdbdb66da69ab7353b546f02150a6792f4787975","modified":1600400171336},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"18381d03518526d7cefd024a0bdd8d9e7c6440f5","modified":1600400171335},{"_id":"themes/fluid/.github/workflows/lint.yaml","hash":"eed3050d5e6bc1d45337f9a8b1f3581199a9740e","modified":1600400171337},{"_id":"themes/fluid/layout/_partial/beian.ejs","hash":"072cd1b3dc44af65fdfb525da440b7af6a591d11","modified":1600400171349},{"_id":"themes/fluid/layout/_partial/css.ejs","hash":"b9c0555d7afe8f7183caa732d2dd37ed5d95a960","modified":1600400171357},{"_id":"themes/fluid/layout/_partial/footer.ejs","hash":"a849269cde55088cec8442228274af29c761d6eb","modified":1600496362021},{"_id":"themes/fluid/layout/_partial/paginator.ejs","hash":"8191c630b3db4dd1dd8aad56defad93334a7b691","modified":1600400171361},{"_id":"themes/fluid/layout/_partial/head.ejs","hash":"97b70f35bdad06403764f13c39595725ef9d3f07","modified":1600400171358},{"_id":"themes/fluid/layout/_partial/nav.ejs","hash":"a2c16035ea5690882159f9df3a9ddb77ea74b4af","modified":1600400171359},{"_id":"themes/fluid/layout/_partial/post-meta.ejs","hash":"6284a83f2afd90b1c77e90cdc64692923510cf3d","modified":1600400171374},{"_id":"themes/fluid/layout/_partial/scripts.ejs","hash":"1bf18d5efba407e78ca14428590aa1ac4132533d","modified":1600400171375},{"_id":"themes/fluid/layout/_partial/toc.ejs","hash":"a3f22d478aa18d376ab2de44a63271398e495c20","modified":1600400171380},{"_id":"themes/fluid/layout/_partial/search.ejs","hash":"bea21f1b5de61badd6c068080315c201fc80bc36","modified":1600400171378},{"_id":"themes/fluid/scripts/events/index.js","hash":"a889022b079541f0fa5833f018c98cf81f864e4f","modified":1600400171392},{"_id":"themes/fluid/scripts/generators/local-search.js","hash":"bda7fbe58082a2a02c0db066794b791b14462271","modified":1600400171402},{"_id":"themes/fluid/layout/_partial/statistics.ejs","hash":"a70c26e415a27f07f38b9384e7eb48d1f2b30328","modified":1600400171379},{"_id":"themes/fluid/scripts/generators/pages.js","hash":"0de7a2b51743be62beef6544e8368a2b930c4485","modified":1600400171403},{"_id":"themes/fluid/scripts/filters/post-filter.js","hash":"cf6ff2a54d08ad8b3727dcdb7dd0b9fb744eecf9","modified":1600400171402},{"_id":"themes/fluid/scripts/helpers/page.js","hash":"109ae26697f623a9fd1b1c2b20d50a2522037751","modified":1600400171404},{"_id":"themes/fluid/scripts/helpers/utils.js","hash":"4acb213f90f1e7ba3696ef08d894a2a84807b669","modified":1600400171406},{"_id":"themes/fluid/scripts/helpers/url.js","hash":"1664f8faa028898bd6f91d6db61c7dbf7463ee01","modified":1600400171405},{"_id":"themes/fluid/scripts/helpers/wordcount.js","hash":"da6144ee040fed0a9b9f45da3478bc33087b5ac9","modified":1600400171407},{"_id":"themes/fluid/scripts/tags/checkbox.js","hash":"dac0e08eaa3614a6fd9ddbdfb4584094b1bdb30a","modified":1600400171409},{"_id":"themes/fluid/scripts/tags/group-image.js","hash":"cc176cc1d7e7cc28cedf8397ae748c691d140be2","modified":1600400171411},{"_id":"themes/fluid/scripts/tags/button.js","hash":"e1d0caed12e7cd9a35cf64272c41854b2901a58f","modified":1600400171408},{"_id":"themes/fluid/scripts/tags/label.js","hash":"6c5916d86c63795c7e910bf614b0e7ece5073702","modified":1600400171412},{"_id":"themes/fluid/scripts/tags/note.js","hash":"0410e9f982f19e71eb166da31e967a628dfbddcf","modified":1600400171413},{"_id":"themes/fluid/scripts/utils/join-path.js","hash":"ec068c699155565aea4aa4ab55d8a10b2947a114","modified":1600400171413},{"_id":"themes/fluid/scripts/utils/object.js","hash":"d07abe58481ab097fc4e5b9f573cdc46bce4bfec","modified":1600400171414},{"_id":"themes/fluid/source/css/main.styl","hash":"bf536db598434c36cc0c752196bfde46e584a92e","modified":1600400171439},{"_id":"themes/fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1600400171439},{"_id":"themes/fluid/source/img/favicon.png","hash":"7ac6cfc349403870b6f88fee59d6c63f6fa96c19","modified":1600505892626},{"_id":"themes/fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1600400171443},{"_id":"themes/fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1600400171442},{"_id":"themes/fluid/source/js/debouncer.js","hash":"8833902327af7beac17ab97227fcd835329abfa2","modified":1600400171445},{"_id":"themes/fluid/source/img/default.png","hash":"ab1625574d51c9d6b807c3be38175fd82ab74e75","modified":1600505978539},{"_id":"themes/fluid/source/js/clipboard-use.js","hash":"78cd93cd97e3eb497dc37e3c63029e4e248c90a5","modified":1600400171444},{"_id":"themes/fluid/source/js/color-schema.js","hash":"b8a5bc6a96e1be53f760e10c25633b4053e03f7b","modified":1600400171445},{"_id":"themes/fluid/source/js/lazyload.js","hash":"9d4c9b670f578f9d7179053d16a5e5f5c35022db","modified":1600400171454},{"_id":"themes/fluid/source/js/local-search.js","hash":"bb899b1ddb2f3c2565d846def2f742ca15407cae","modified":1600400171454},{"_id":"themes/fluid/source/xml/local-search.xml","hash":"85fcc23b4db654a7f91fc55b6fb0442bb3ed3a9a","modified":1600400171457},{"_id":"themes/fluid/source/js/main.js","hash":"49139224530b05f12d6b28865321e791cd836844","modified":1600400171455},{"_id":"themes/fluid/source/js/utils.js","hash":"7183cd026bdf4f85a77cd624ad27c7cbebee3674","modified":1600400171455},{"_id":"themes/fluid/layout/_partial/comments/changyan.ejs","hash":"ab12042aa68ee05942efec8fa7c7591c73d8c099","modified":1600400171350},{"_id":"themes/fluid/layout/_partial/comments/gitalk.ejs","hash":"9a6b62378b4102e0bd4ad89461b8446fa55d01fd","modified":1600400171352},{"_id":"themes/fluid/layout/_partial/comments/livere.ejs","hash":"4cdc718b8fde0cfa80849484cd75738b04706c7b","modified":1600400171353},{"_id":"themes/fluid/layout/_partial/comments/disqus.ejs","hash":"0ca6fd43abd822fe7bfad960bb596f0465412da0","modified":1600400171351},{"_id":"themes/fluid/layout/_partial/comments/remark42.ejs","hash":"e8e1e305dd0cbd534d4eb46c92760a123ec5df61","modified":1600400171354},{"_id":"themes/fluid/layout/_partial/comments/utterances.ejs","hash":"356e84363a0c8dc3dfa241046bf7afa0f29926be","modified":1600400171355},{"_id":"themes/fluid/layout/_partial/comments/valine.ejs","hash":"821ff3dd0d8b3c7bb19892eb186ff92ac9186fd6","modified":1600400171356},{"_id":"themes/fluid/layout/_partial/plugins/anchor.ejs","hash":"64321f2ab171d4750edee0413c5036549820e6d0","modified":1600400171363},{"_id":"themes/fluid/layout/_partial/plugins/aplayer.ejs","hash":"d43ece36655f3831960bbe8f0c920ea25ae03b10","modified":1600400171364},{"_id":"themes/fluid/layout/_partial/plugins/daovoice.ejs","hash":"804d12424d4c4ebbb26198865cc989ccb90e6a6a","modified":1600400171365},{"_id":"themes/fluid/layout/_partial/plugins/analytics.ejs","hash":"d20f54bf2fd5cd274b4b9c5542eafbfec5120838","modified":1600400171362},{"_id":"themes/fluid/layout/_partial/plugins/fancybox.ejs","hash":"78b11d3506f71419d1e8b755cd97376046e88011","modified":1600400171366},{"_id":"themes/fluid/layout/_partial/plugins/local-search.ejs","hash":"a12e81a59d95963102e9455b9430354f04b16f2a","modified":1600400171368},{"_id":"themes/fluid/layout/_partial/plugins/leancloud.ejs","hash":"393fb6d61127975592b575707592050a8b0ea412","modified":1600400171367},{"_id":"themes/fluid/layout/_partial/plugins/mermaid.ejs","hash":"fd1f78287c868ccab78b6244b66e3f9b0968c4a8","modified":1600400171370},{"_id":"themes/fluid/layout/_partial/plugins/math.ejs","hash":"a49a0064b55cf6d8f2a61abfecd41f0083757e04","modified":1600400171369},{"_id":"themes/fluid/layout/_partial/plugins/mouse-click.ejs","hash":"80261b4d705bd0181b8570821df645149bb1b5f1","modified":1600400171371},{"_id":"themes/fluid/layout/_partial/plugins/typed.ejs","hash":"3741b0df043a804efcf61b9733b37a51748515d3","modified":1600400171373},{"_id":"themes/fluid/scripts/events/lib/footnote.js","hash":"13d8466cd4c98367131b5f3d6a30b3d4ce8de26f","modified":1600400171394},{"_id":"themes/fluid/layout/_partial/plugins/tocjs.ejs","hash":"8e30fbc54ca99f1d1730cb21a86cf3fb08ed0351","modified":1600400171372},{"_id":"themes/fluid/scripts/events/lib/hello.js","hash":"6dba541e1539d038e658050b0f0384e37af45e3f","modified":1600400171396},{"_id":"themes/fluid/scripts/events/lib/highlight.js","hash":"1f7d9d90ad8bf3ef75c5d1a5a7d7aff6bb68a95d","modified":1600400171397},{"_id":"themes/fluid/scripts/events/lib/lazyload.js","hash":"a0392ed82014eed8ff4e4f0fc0d01fde5e689a12","modified":1600400171398},{"_id":"themes/fluid/scripts/events/lib/preset-configs.js","hash":"51c8115564f3754f8c5635acb3a6d585f8efaef8","modified":1600400171400},{"_id":"themes/fluid/scripts/events/lib/merge-configs.js","hash":"ab241f5912945a4f116e8181b87e1d97388e39df","modified":1600400171399},{"_id":"themes/fluid/scripts/events/lib/version.js","hash":"1d5a3a8cbf970d9d1a28a7ae9b935cc1b7afbeff","modified":1600400171401},{"_id":"themes/fluid/source/css/_pages/pages.styl","hash":"92c062cf55457b6549497244d09ec34e9c0c95c2","modified":1600400171437},{"_id":"themes/fluid/source/css/_functions/base.styl","hash":"171697018fd384fce0834875ca94b91f16564cac","modified":1600400171415},{"_id":"themes/fluid/source/css/_mixins/base.styl","hash":"046979dbd8cdabd21d89f9c1d8f1bb3f2fd06d6f","modified":1600400171416},{"_id":"themes/fluid/source/css/_variables/base.styl","hash":"0df0b6871037209b4c2dd2090f5198e679afbff6","modified":1600400171438},{"_id":"themes/fluid/source/css/_pages/_base/base.styl","hash":"574a9c64f071d938a31a768451aad64b2999a1d6","modified":1600400171427},{"_id":"themes/fluid/source/lib/hint/hint.min.css","hash":"64fa8c328dc93432ec822de2818aef21a4f63b29","modified":1600400171456},{"_id":"themes/fluid/source/css/_pages/_base/keyframes.styl","hash":"58a7f8f2baea2d58cf5f7edfc91314ee5d7156ca","modified":1600400171430},{"_id":"themes/fluid/source/css/_pages/_base/color-schema.styl","hash":"615d35d4d73f1efe114add257eb7c600571029ad","modified":1600400171428},{"_id":"themes/fluid/source/css/_pages/_base/inline.styl","hash":"c98c4be12ae65b5db335527509e89af6d1451dbd","modified":1600400171429},{"_id":"themes/fluid/source/css/_pages/_archive/archive.styl","hash":"86926a80bf6f39a7f47789b1a8f44b5984b4683f","modified":1600400171418},{"_id":"themes/fluid/source/css/_pages/_about/about.styl","hash":"47235d222812e2f829e9bde039fa719bbced9325","modified":1600400171417},{"_id":"themes/fluid/source/css/_pages/_base/rewrite.styl","hash":"eb06a88bbda5fbfa7d3612a5a2f20ff941ace26b","modified":1600400171431},{"_id":"themes/fluid/source/css/_pages/_category/categories.styl","hash":"0924e35eff2ec84e2d9e4772abccda452d9463ef","modified":1600400171432},{"_id":"themes/fluid/source/css/_pages/_links/links.styl","hash":"83694b28209c548ef38bee78e473b02e90cbcf9f","modified":1600400171434},{"_id":"themes/fluid/source/css/_pages/_index/index.styl","hash":"7936e86324d014639bbbda9938e7843943aea743","modified":1600400171433},{"_id":"themes/fluid/source/css/_pages/_tag/tags.styl","hash":"29e9b72cfda2f2baf9cf2597fcd7f9e66303a9bd","modified":1600400171436},{"_id":"themes/fluid/source/css/_pages/_post/tag_plugin.styl","hash":"81daa88456f7bc9053b08ec667b3b0ca82565059","modified":1600400171435},{"_id":"themes/fluid/source/css/_pages/_post/post.styl","hash":"4371cea66bc2c08fdf38e7eac99544f0160f688d","modified":1600400171435},{"_id":"themes/fluid/source/css/_pages/_base/_widget/banner.styl","hash":"e05e5eafd21d3332cccf5dfe72334eef320cd466","modified":1600400171419},{"_id":"themes/fluid/source/css/_pages/_base/_widget/board.styl","hash":"bb9cdde191b9b1287ba19414bab862f30be6a8a0","modified":1600400171420},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footer.styl","hash":"5b38b485dc3e683aa1d227797412ba41e52b934a","modified":1600400171421},{"_id":"themes/fluid/source/css/_pages/_base/_widget/copy-btn.styl","hash":"fd44a4da774afc00fd49638a9fe6b9d925e52810","modified":1600400171421},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"41935973a66c14ab2bea0539d4b1f15c62534fa4","modified":1600400171422},{"_id":"themes/fluid/source/css/_pages/_base/_widget/header.styl","hash":"64a2c98711b1765a7d8eb99f9e3cd0b9b0673f40","modified":1600400171423},{"_id":"themes/fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"1c78485de1008738bf9063826120faeb8abcead4","modified":1600400171424},{"_id":"themes/fluid/source/css/_pages/_base/_widget/search.styl","hash":"1f4e678d7219815ab62de1b92ec75e021247f90b","modified":1600400171425},{"_id":"themes/fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"35aab570a2de59d4ec8ddf679fb47040c95229d6","modified":1600400171424},{"_id":"source/_posts/vue3傻瓜式入门“/13.png","hash":"481af9aeab5b7a71a2c460ff8ced6864b5b7fad9","modified":1600600065536},{"_id":"public/local-search.xml","hash":"4a5df6eb4e0faef286b3788ca994cff08204b865","modified":1600602893314},{"_id":"public/about/index.html","hash":"8f76d33dd75f325d03d3ae360aa7b7c4d7e7cd8f","modified":1600602893314},{"_id":"public/2020/09/19/聊天室项目/index.html","hash":"7d7ab512078a32c204990dc027df835f73fac65a","modified":1600602893314},{"_id":"public/2020/09/18/first/index.html","hash":"ceb9ccd687e5dde561c376191e02ee624ec2ddb2","modified":1600602893314},{"_id":"public/archives/index.html","hash":"28a9b902d57fd5e33a071974a23b1f5fd522298c","modified":1600602893314},{"_id":"public/archives/2020/index.html","hash":"28a9b902d57fd5e33a071974a23b1f5fd522298c","modified":1600602893314},{"_id":"public/archives/2020/09/index.html","hash":"28a9b902d57fd5e33a071974a23b1f5fd522298c","modified":1600602893314},{"_id":"public/index.html","hash":"7cd4b069ecbfa26fa74a1aa3e807bbd3da047540","modified":1600602893314},{"_id":"public/tags/essay/index.html","hash":"3ac74ef6425965a3df3a5ad007c6c8fdacf51159","modified":1600602893314},{"_id":"public/tags/program/index.html","hash":"e89969a0895f4a444cd68154ede8c14f78a9b471","modified":1600602893314},{"_id":"public/404.html","hash":"e4a5929c8dd3ce7009d5f595bf8d39700c875c9f","modified":1600602893314},{"_id":"public/tags/index.html","hash":"b12ac2ca2f4d161faaee23a158086110be04e6e9","modified":1600602893314},{"_id":"public/categories/index.html","hash":"790cd0a1b0f7a540b9bf0ae9cd27ab332707f9a9","modified":1600602893314},{"_id":"public/2020/09/20/a/index.html","hash":"774acf642152a40de39e9a13310e50e1fa181e39","modified":1600602893314},{"_id":"public/links/index.html","hash":"95b042d77825dfea198acf2c7b1df7ac828ee7a3","modified":1600602893314},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1600602893314},{"_id":"public/img/default.png","hash":"ab1625574d51c9d6b807c3be38175fd82ab74e75","modified":1600602893314},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1600602893314},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1600602893314},{"_id":"public/xml/local-search.xml","hash":"85fcc23b4db654a7f91fc55b6fb0442bb3ed3a9a","modified":1600602893314},{"_id":"public/img/favicon.png","hash":"7ac6cfc349403870b6f88fee59d6c63f6fa96c19","modified":1600602893314},{"_id":"public/2020/09/19/聊天室项目/聊天室数据库结构设计.png","hash":"7ee75e329ddd9e4fdba0e399338a30252f1f044b","modified":1600602893314},{"_id":"public/js/debouncer.js","hash":"045f324777bdfb99d4c17b1806169f029f897a65","modified":1600602893314},{"_id":"public/js/clipboard-use.js","hash":"f0ffe3df1deeb3cc36adfee2ab839368fb28d1c9","modified":1600602893314},{"_id":"public/js/color-schema.js","hash":"03d5315b752cd3e13749cca790783a1e1cfab0a8","modified":1600602893314},{"_id":"public/js/lazyload.js","hash":"792deca48c12512d3e612f0de092ffcff3ca3e34","modified":1600602893314},{"_id":"public/js/local-search.js","hash":"13d5ef2fe68c49bd6096781034dbb26c190b5176","modified":1600602893314},{"_id":"public/js/main.js","hash":"a6def6368d288892088f78fd401e7170e3e81a13","modified":1600602893314},{"_id":"public/js/utils.js","hash":"9b06e2e2a2bb92e27d15a700f28f880317c25cfa","modified":1600602893314},{"_id":"public/lib/hint/hint.min.css","hash":"b38df228460ebfb4c0b6085336ee2878fe85aafe","modified":1600602893314},{"_id":"public/css/main.css","hash":"e0ae8bb467a0130d91334051cdd930d95c353537","modified":1600602893314}],"Category":[],"Data":[],"Page":[{"title":"about","date":"2020-09-18T14:54:29.000Z","layout":"about","_content":"github：https://github.com/JackLfind/JackLfind.github.io\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2020-09-18 22:54:29\nlayout: about\n---\ngithub：https://github.com/JackLfind/JackLfind.github.io\n","updated":"2020-09-18T14:55:48.074Z","path":"about/index.html","comments":1,"_id":"ckfb1mx7x00007gure97paa8v","content":"<p>github：<a href=\"https://github.com/JackLfind/JackLfind.github.io\">https://github.com/JackLfind/JackLfind.github.io</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>github：<a href=\"https://github.com/JackLfind/JackLfind.github.io\">https://github.com/JackLfind/JackLfind.github.io</a></p>\n"}],"Post":[{"layout":"post","title":"first","date":"2020-09-18T15:06:39.000Z","_content":"the first blog","source":"_posts/first.md","raw":"---\nlayout: post\ntitle: first\ndate: 2020-09-18 23:06:39\ntags: essay\n---\nthe first blog","slug":"first","published":1,"updated":"2020-09-18T15:10:07.865Z","comments":1,"photos":[],"link":"","_id":"ckfb1mx8000017gurfgha9aqv","content":"<p>the first blog</p>\n","site":{"data":{}},"excerpt":"","more":"<p>the first blog</p>\n"},{"layout":"post","title":"聊天室项目","date":"2020-09-19T02:19:04.000Z","_content":"github地址：https://github.com/genaller/genal-chat\n![](聊天室数据库结构设计.png)","source":"_posts/聊天室项目.md","raw":"---\nlayout:\n  - post\ntitle: 聊天室项目\ndate: 2020-09-19 10:19:04\ntags: program\n---\ngithub地址：https://github.com/genaller/genal-chat\n![](聊天室数据库结构设计.png)","slug":"聊天室项目","published":1,"updated":"2020-09-20T10:48:56.728Z","comments":1,"photos":[],"link":"","_id":"ckfb1mx8600047gur80ar1v0g","content":"<p>github地址：<a href=\"https://github.com/genaller/genal-chat\">https://github.com/genaller/genal-chat</a><br><img src=\"%E8%81%8A%E5%A4%A9%E5%AE%A4%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>github地址：<a href=\"https://github.com/genaller/genal-chat\">https://github.com/genaller/genal-chat</a><br><img src=\"%E8%81%8A%E5%A4%A9%E5%AE%A4%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1.png\"></p>\n"},{"layout":"post","title":"vue3傻瓜式入门","date":"2020-09-20T10:48:17.000Z","_content":"\n可任选一种创建方式\n我个人还是采用的脚手架\n升级（即重装）\nnpm install -g @vue/cli # OR yarn global add @vue/cli\nvue create hello-vue3\n下面和原来不同的就是多了个选择版本的，选择vue3上手即可\n\n<h2>一、重点</h2>\n先以下面官网所列出的显著的为主（后三个先忽略）\n\n<h3>1.1. composition API</h3>\n别不管 Options API 与composition API 比较，我们先直接上手composition API \ncomposition API 入口点setup函数\n创建响应式数据 ref与reactive\nref\nref函数接一个参数返回一个响应式的ref对象\n直接看栗子\n\n<br><textarea></br><srcript>\n  <div>\n      {{num}}\n  </div>\n<br></textarea></br></template>\n<br><textarea></br><srcript>\nimport { ref } from \"vue\";\nexport default {\n  setup() {\n    const num = ref(1);\n    return { num };\n  },\n};\n</srcript>\n<br></textarea></br>\n也即和vue2.x中的这种写法是一样的\ndata(){\n    return {\n        num:1\n    }\n}\n\n值得注意的是：ref返回的是一个对象，需要通过它的value属性拿到它的值\n也即num.value。不过在模板中使用时他会自动解。也就是上面栗子中模板直接使用num，还有一种可自动解的情况先看下面\n另外现在就可以理解ref是用来把简单类型的数据进行响应式化的\nreactive\nref负责简单数据数据，则reactive就是将引用类型的数据进行响应式化\n直接看栗子\n\n<br><textarea></br><srcript>\n  <div>{{num}}{{obj.name}}</div>\n<br></textarea></br></template>\n<br><textarea></br><srcript>\nimport { ref, reactive } from \"vue\";\nexport default {\n  setup() {\n    const num = ref(1);\n    const obj = reactive({\n      name: \"gxb\",\n      age: 18,\n    });\n    return { num, obj };\n  },\n};\n</srcript>\n<br></textarea></br>\n\n上面的ref对象自动解套的另一种情况也即在这里它作为reactive函数参数对象的一属性\n即:\n const num = ref(1);\nconst obj = reactive({\n      name: \"gxb\",\n      age: 18,\n      num\n    });\n\n值得注意的是：这里不要随意使用...语法或者解构，否则会丧失响应式性质，最后的工具函数那再写栗子介绍\nreadonly\n这个函数，参数可以一个响应式或者普通的对象再或者是个ref。返回的是一个只读代理（深层的）\n栗子\ncomputed 与 watch\ncomputed\ncomputed是一个函数，它需要传一个getter函数。其返回值是一个不可手动修改的ref对象\n栗子\n\n<br><textarea></br><srcript>\n  <div>{{num2}}</div>\n<br></textarea></br></template>\n<br><textarea></br><srcript>\nimport { ref, reactive, computed } from \"vue\";\nexport default {\n  setup() {\n    const num = ref(1);\n    const obj = reactive({\n      name: \"gxb\",\n      age: 18,\n      num,\n    });\n    const num2 = computed(() => num.value + 1);\n    return { num, obj, num2 };\n  },\n};\n</srcript>\n<br></textarea></br>\n\n注意不可修改\n如\n const num2=computed(()=>num.value+1)\n    num2.value++\n\n\n想要一个可以进行修改的，就需传一个具有get和set函数的对象\n<br><textarea></br><srcript>\n  <div>{{num2.value}}</div>\n<br></textarea></br></template>\n<br><textarea></br><srcript>\nimport { ref, reactive, computed } from \"vue\";\nexport default {\n  setup() {\n    const num = ref(1);\n    const obj = reactive({\n      name: \"gxb\",\n      age: 18,\n      num,\n    });\n    const num2 = computed({\n        get:()=>num,\n        set:value=>num.value=value\n    });\n    \n    num2.value=3\n    return { num, obj, num2 };\n  },\n};\n<br></textarea></br></srcript>\n\n要注意的是，此时num2这个ref对象不会在自动解套了\nwatch\n监听一个\n<br><textarea></br><srcript>\n  <div>{{num2.value}}</div>\n<br></textarea></br></template>\n<br><textarea></br><srcript>\nimport { ref, reactive, computed, watch } from \"vue\";\nexport default {\n  setup() {\n    const obj = reactive({\n      name: \"gxb\",\n      age: 18,\n      num,\n    });\n\n    watch(\n      () => obj.name,\n      (name, preName) => {\n        console.log(`new ${name}---old ${preName}`);\n      }\n    );\n    setTimeout(() => {\n      obj.name = \"zhangsan\";\n    }, 1000);\n\n    return { obj };\n  },\n};\n<br></textarea></br></srcript>\n\n\n第一参除了可以是上面那种有返回值的getter函数，也可以是一个ref对象\n即\n<br><textarea></br><srcript>\n  <div></div>\n<br></textarea></br></template>\n<br><textarea></br><srcript>\nimport { ref, reactive, computed, watch } from \"vue\";\nexport default {\n  setup() {\n    const obj = reactive({\n      name: \"gxb\",\n      age: 18,\n      num,\n    });\n    const num = ref(0);\n    watch(num, (name, preName) => {\n      console.log(`new ${name}---old ${preName}`);\n    });\n    setTimeout(() => {\n      num.value = 2;\n    }, 1000);\n\n    return { obj };\n  },\n};\n<br></textarea></br></srcript>\n\n\n监听多个\n即如下只要num或obj.name有一个发生变动就触发监听器处理回调\n<br><textarea></br><srcript>\n  <div></div>\n<br></textarea></br></template>\n<br><textarea></br><srcript>\nimport { ref, reactive, computed, watch } from \"vue\";\nexport default {\n  setup() {\n    const obj = reactive({\n      name: \"gxb\",\n      age: 18,\n      num,\n    });\n    const num = ref(0);\n    watch([num, ()=>obj.name], ([newNum, newName], [oldNum, oldName]) => {\n      console.log(`new ${(newNum)},${(newName)}---old ${(oldNum)},${oldName}`);\n    });\n    setTimeout(() => {\n      num.value = 6;\n    //   obj.name = \"zhangsan\";\n    }, 1000);\n\n    return { obj };\n  },\n};\n<br></textarea></br></srcript>\n\n生命周期钩子\n栗子\nimport { onMounted, onUpdated, onUnmounted } from 'vue'\n\nconst MyComponent = {\n  setup() {\n    onMounted(() => {\n      console.log('mounted!')\n    })\n    onUpdated(() => {\n      console.log('updated!')\n    })\n    onUnmounted(() => {\n      console.log('unmounted!')\n    })\n  },\n}\n\n对应2.x钩子\n\nprops和this\nprops\nsetup这个入口函数接收的第一个参数就是props\n栗子\n\n这里需要注意，不要随便进行解构\n即图省事\n  props: {\n    data: String,\n  },\n  setup({ data }) {\n    console.log(data);\n  }\n\n解构会使其丧失响应式的\nthis\n2.x中拿组件实例实例很好拿，一般就是直接this，但是setup则不同。\n但是组件实例上有许多api我们还是要使用的\n故setup的第二个参数是一个上下文对象\n栗子:派发一个自定义事件\n\n值得注意的是这个context只是选择性的暴露了一些属性，如上面的emit还有attrs、slots\n依赖注入与Refs\n依赖注入\n和vue2.x的provide和inject基本一样\n栗子\n\n为图简单我用的一个组件举例\n\n它们的响应式需要自己出来一下（如用ref）\nRefs\n如拿下面这个节点\n\n<br><textarea></br><srcript>\n  <div ref=\"test\">test</div>\n<br></textarea></br></template>\n<br><textarea></br><srcript>\nimport {\n  ref,\n  reactive,\n  computed,\n  watch,\n  provide,\n  inject,\n  onMounted,\n} from \"vue\";\nexport default {\n  setup() {\n    const test = ref(null);\n    onMounted(() => {\n      console.log(test.value);\n    });\n\n    return { test };\n  },\n};\n<br></textarea></br></srcript>\n\n\n一些工具函数\n先来写下破坏reactive生成的响应对象代理的栗子\n首先正常写法\n<br><textarea></br><srcript>\n  <div ref=\"test\">\n    {{obj.age}}\n    <button @click=\"obj.age++\">add</button>\n  </div>\n<br></textarea></br></template>\n<br><textarea></br><srcript>\nimport { ref, reactive, computed, watch, provide, inject, readonly } from \"vue\";\nexport default {\n  props: {\n    data: String,\n  },\n  setup(props, context) {\n    console.log(props.data);\n    context.emit(\"test\");\n    const obj = reactive({\n      name: \"gxb\",\n      age: 18,\n\n    });\n\n    return { obj };\n  },\n};\n<br></textarea></br></srcript>\n\n\n使用扩展语法\n<br><textarea></br><srcript>\n  <div ref=\"test\">\n    {{age}}\n    <button @click=\"age++\">add</button>\n  </div>\n<br></textarea></br></template>\n<br><textarea></br><srcript>\nimport { ref, reactive, computed, watch, provide, inject, readonly } from \"vue\";\nexport default {\n  props: {\n    data: String,\n  },\n  setup(props, context) {\n    console.log(props.data);\n    context.emit(\"test\");\n    const obj = reactive({\n      name: \"gxb\",\n      age: 18,\n\n    });\n\n    return { ...obj };\n  },\n};\n<br></textarea></br></srcript>\n\n\n解构出来的同样不行\n<br><textarea></br><srcript>\n  <div ref=\"test\">\n    {{age}}\n    <button @click=\"age++\">add</button>\n  </div>\n<br></textarea></br></template>\n<br><textarea></br><srcript>\nimport { ref, reactive, computed, watch, provide, inject, readonly } from \"vue\";\nexport default {\n  props: {\n    data: String,\n  },\n  setup(props, context) {\n    console.log(props.data);\n    context.emit(\"test\");\n    const obj = reactive({\n      name: \"gxb\",\n      age: 18,\n    });\n    const { age } = obj;\n    return { age };\n  },\n};\n<br></textarea></br></srcript>\n\n这个的原理也很简单，reactive的内部原理是Proxy，它操作均在返回的代理实例上\n下面开始介绍几个工具函数\n\nunref，参数是一个ref则返回这个ref的value属性，否则返本身\ntoRef，给一个 reactive 对象的属性创建一个 ref \ntoRefs， 把一个响应式对象转换成普通对象，该普通对象的每个 property 都是一个 ref  \nisRef，判断一个值是否是ref\nisProxy，判断一个对象是否是由 reactive 或者 readonly 方法创建的代理。\nisReactive，判断一个对象是否是由 reactive 创建的响应式代理 \nisReadonly，判断一个对象是否是由 readonly 创建的只读代理。 \n\n仅给2、3写个例子吧\ntoRef，即把reactive 对象上的一个属性变成ref\n什么意思呢，还是看上面的破坏了响应式的栗子\n修复一下(即可把它一个属性抽出来做成响应式的ref，且它们还是互相关联的)\n\n<br><textarea></br><srcript>\n  <div ref=\"test\">\n    {{age}}\n    <button @click=\"age++\">add</button>\n  </div>\n<br></textarea></br></template>\n<br><textarea></br><srcript>\nimport {\n  ref,\n  reactive,\n  computed,\n  watch,\n  provide,\n  inject,\n  readonly,\n  toRef,\n} from \"vue\";\nexport default {\n  props: {\n    data: String,\n  },\n  setup(props, context) {\n    const obj = reactive({\n      name: \"gxb\",\n      age: 18,\n    });\n    const age=toRef(obj, \"age\");\n    watch(()=>obj.age,(newAge,oldAge)=>{\n        console.log(newAge);\n    })\n    return { age };\n  },\n};\n</srcript>\n<br></textarea></br>\n\ntoRefs则是把这个对象里面的所有属性均整成ref，这个修复则更简单了\n\n<br><textarea></br><srcript>\n  <div ref=\"test\">\n    {{age}}\n    <button @click=\"age++\">add</button>\n  </div>\n<br></textarea></br></template>\n<br><textarea></br><srcript>\nimport {\n  ref,\n  reactive,\n  computed,\n  watch,\n  provide,\n  inject,\n  readonly,\n  toRef,\n  toRefs\n} from \"vue\";\nexport default {\n  props: {\n    data: String,\n  },\n  setup(props, context) {\n    const obj = reactive({\n      name: \"gxb\",\n      age: 18,\n    });\n    const obj02=toRefs(obj);\n    \n    return { ...obj02 };\n  },\n};\n<br></textarea></br></srcript>\n\n<h2>1.2. Teleport</h2>\n传送门，顾名思义\n场景：某一些组件中我们可能需要一个模态框的功能，然而虽然逻辑上来说这个模态框是属于该组件中的，但是实际操作一般需要把这个框子挂到body上。Teleport 组件就是帮我们处理这个问题的\n来看栗子\n假设组件中需要有一个模态框\n<br><textarea></br><srcript>\n    <div>\n        <model></model>\n    </div>\n<br></textarea></br></template>\n<br><textarea></br><srcript>\nimport Model from './model'\nexport default {\n    components:{Model}\n}\n</srcript>\n<br></textarea></br>\n模态框组件\n\n<br><textarea></br><srcript>\n  <div>\n    <button @click=\"flag=true\">点击</button>\n    <teleport to=\"body\">\n      <div v-if=\"flag\">\n        <div>模态框</div>\n      </div>\n    </teleport>\n  </div>\n<br></textarea></br></template>\n<br><textarea></br><srcript>\nimport { ref } from \"vue\";\nexport default {\n  setup() {\n    const flag = ref(false);\n    return { flag };\n  },\n};\n</srcript>\n<br></textarea></br>\n即teleport组件的作用就是把teleport标签里面的元素传送到body上去\n\n再看层级\n\n<h2>1.3. Fragments</h2>\n这个的理解就更简单了\n原来只能这样:即只允许存在一个最外层的父元素div\n\n<br><textarea></br><srcript>\n  <div>\n    ...\n  </div>\n<br></textarea></br></template>\n<br></textarea></br>\n现在可多个\n\n<br><textarea></br><srcript>\n  <div>\n    ...\n  </div>\n  <div>\n    ...\n  </div>\n    ...\n<br></textarea></br></template>\n<br></textarea></br>\n<h2>1.4. Emits Component Option</h2>\n<h3>1.4.1 自定义事件派发</h3>\n这里的重点：即多了一个派发事件的选项emits\n也就我们以后再次使用emit派发一个事件的时候需要把这此派发的事件名放到选项里\n栗子:\n\n<br><textarea></br><srcript>\n  <div>\n    <button @click=\"$emit('test')\">点击</button>\n  </div>\n<br></textarea></br></template>\n<br><textarea></br><srcript>\nexport default {\n  emits: [\"test\"],\n};\n</srcript>\n<br></textarea></br>\n注意：这里如果你派发的是一个原生事件，且没有把此事件放进emits选项中，其父组件的监听会被触发两次\n\n<br><textarea></br><srcript>\n  <div>\n    <button @click=\"$emit('click')\">点击</button>\n  </div>\n<br></textarea></br></template>\n<br><textarea></br><srcript>\nexport default {\n//   emits: [\"click\"],\n};\n</srcript>\n<br></textarea></br>\n\n<h3>1.4.2 v-model</h3>\nvue3中的v-model,所借助的属性是 modelValue  所借助的事件是 update:modelValue (且3中把sync移出掉了)\n栗子\n父组件\n\n<br><textarea></br><srcript>\n  <div id=\"nav\">\n    {{data}}\n    <test05 v-model=\"data\"></test05>\n  </div>\n<br></textarea></br></template>\n<br><textarea></br><srcript>\nimport { ref } from \"vue\";\nimport Test05 from \"./components/test05\";\nexport default {\n  components: { Test05 },\n  setup() {\n    const data=ref('gxb')\n    return {data};\n  },\n};\n</srcript>\n<br></textarea></br>\n子组件\n\n<br><textarea></br><srcript>\n  <div>\n    <input type=\"text\" :value=\"modelValue\" @input=\"$emit('update:modelValue',$event.target.value)\" />\n  </div>\n<br></textarea></br></template>\n<br><textarea></br><srcript>\nexport default {\n    props:{\n        modelValue:String\n    },\n    emits:['update:modelValue']\n}\n<br></textarea></br></srcript>\n\n自定义属性名，vue2.x中可通过 model选项  指定传过来的属性名和指定本次v-model要利用的事件。 vue3中也可自定属性\n栗子\n父组件(即在v-model后面指定绑定)\n<test05 v-model:foo=\"data\"></test05>\n\n子组件\n<br><textarea></br><srcript>\n  <div>\n    <input type=\"text\" :value=\"foo\" @input=\"$emit('update:foo',$event.target.value)\" />\n  </div>\n<br></textarea></br></template>\n<br><textarea></br><srcript>\nexport default {\n    props:{\n        foo:String\n    },\n    emits:['update:foo']\n}\n<br></textarea></br></srcript>\n\n一个组件中可写多个v-model指令\n栗子：\n父组件\n <test01 v-model:foo=\"a\" v-model:bar=\"b\"></test01>\n\n子组件\n<br><textarea></br><srcript>\n  <div>\n    <input type=\"text\" :value=\"foo\" @input=\"$emit('update:foo',$event.target.value)\" />\n    <input type=\"text\" :value=\"bar\" @input=\"$emit('update:bar',$event.target.value)\" />\n  </div>\n<br></textarea></br></template>\n<br><textarea></br><srcript>\nexport default {\n  props: {\n    foo: String,\n    bar: String,\n  },\n  emits: [\"update:foo\", \"update:bar\"],\n  setup(props) {\n    return {};\n  },\n};\n<br></textarea></br></srcript>\n\n<h2>1.5. createRendererAPI</h2>\n自定义渲染器字如其名，它的主要功能是我们可以自定义 Virtual DOM 到DOM的方式，看了好3、4个大佬的栗子都是用canvas画了图。自己这里想不出什么栗子来先不写了\n二、其他\n2.1 Global API\n在vue2.x中没有应用的概念，vue2.x中的所谓的“app”也只不过是一个通过Vue构造出的实例。但是2.x中的一些全局API（像mixins、use、 component等 ）是直接在Vue构造函数中的\n也即如果下面还有使用new Vue的“应用”，这些全局API很容易造成污染\n下面来看一眼vue3的入口文件\nimport { createApp } from 'vue'\nimport App from './App.vue'\nimport router from './router'\nimport store from './store'\n\ncreateApp(App).use(store).use(router).mount('#app')\n\n现在有了一个createApp，这个方法就返回一个应用程序的实例\n拿component写个栗子\nimport { createApp, h } from 'vue'\nimport App from './App.vue'\nimport router from './router'\nimport store from './store'\n\ncreateApp(App)\n    .component('test06', {\n        render() {\n            return h('div', {}, '全局组件')\n        }\n    })\n    .use(store)\n    .use(router)\n    .mount('#app')\n\n其他API相应改变，如官网\n\nGlobal API Treeshaking\n官网是以 Vue.nextTick() ，这个全局API来举例的\n这个摇树是什么玩意呢？\n\n通过这句话可以理解，即这些个API不分青红皂白就写死在vue的构造函数上，如果我们在应用中本就没有对这些个API进行使用。那么打包时把这些东西也打进去是不是浪费性能同时也增大了打包体积呢\n故vue3中，nextTick的使用也是需要从vue中导入一下的\nimport { nextTick } from 'vue'\n\nnextTick(() => {\n  ...\n})\n\n其他受影响的API\n\n2.2 Template Directives\nv-model\nv-model上面已经写了，去掉了.sync，使用v-model进行了统一\nv-if、v-for优先级问题\n在2.x是v-for优先级高，在3.0中v-if的优先级高\n2.3 Components\n函数式组件\n因为在vue3中函数式组件现在在性能上的提升可以忽略不计，还是推荐使用状态组件。\n并且这里函数式组件只能通过纯函数进行声明，只能接受props和context（也是emit、slots、attrs）\n简单搞个例子\n这里偷个懒吧，把官网的栗子拿过来\nvue2.x\n// Vue 2 Functional Component Example\nexport default {\n  functional: true,\n  props: ['level'],\n  render(h, { props, data, children }) {\n    return h(`h${props.level}`, data, children)\n  }\n}\n\nvue3,区别除了下面所要说的h函数变化问题，还有上面提到的参数问题，再一个变化就是去掉了 functional: true,\nimport { h } from 'vue'\n\nconst DynamicHeading = (props, context) => {\n  return h(`h${props.level}`, context.attrs, context.slots)\n}\n\nDynamicHeading.props = ['level']\n\nexport default DynamicHeading\n\n单文件形式对比\n2.x\n// Vue 2 Functional Component Example with <br><textarea></br><srcript>\n<template functional>\n  <component\n    :is=\"`h${props.level}`\"\n    v-bind=\"attrs\"\n    v-on=\"listeners\"\n  />\n<br></textarea></br></template>\n\n<br><textarea></br><srcript>\nexport default {\n  props: ['level']\n}\n<br></textarea></br></srcript>\n\n3.0,区别去掉了functional,监听器放进了$attrs且可删除\n<br><textarea></br><srcript>\n  <component\n    v-bind:is=\"`h${props.level}`\"\n    v-bind=\"$attrs\"\n  />\n<br></textarea></br></template>\n\n<br><textarea></br><srcript>\nexport default {\n  props: ['level']\n}\n<br></textarea></br></srcript>\n\n异步组件\n原来异步组件咋整的呢\nconst asyncPage = () => import('./NextPage.vue')\n\n或者带选项的\nconst asyncPage = {\n  component: () => import('./NextPage.vue'),\n  delay: 200,\n  timeout: 3000,\n  error: ErrorComponent,\n  loading: LoadingComponent\n}\n\n但是vue3中不一样了，这里有一个新的API defineAsyncComponent用来显示定义异步组件\n也即\nconst asyncPage = defineAsyncComponent(() => import('./NextPage.vue'))\n\n或\nconst asyncPageWithOptions = defineAsyncComponent({\n  loader: () => import('./NextPage.vue'),\n  delay: 200,\n  timeout: 3000,\n  errorComponent: ErrorComponent,\n  loadingComponent: LoadingComponent\n})\n\n细心看也可看出component改成了loader\n还有一点不同的是，2.x中函数参数中可接收resolve,reject,3.0则不可，但是必须要返回一个Promise\n<h2>2.4 Render Function</h2>\n渲染函数的改变\n即原来的h函数是这样的\nexport default {\n  render(h) {\n    return h('div')\n  }\n}\n\n而现在h函数则需要从vue的再导入进来\n其实我上面有一个栗子已经用到了，再拿过来一次\nimport { createApp, h } from 'vue'\nimport App from './App.vue'\nimport router from './router'\nimport store from './store'\n\ncreateApp(App)\n    .component('test06', {\n        render() {\n            return h('div', {}, '全局组件')\n        }\n    })\n    .use(store)\n    .use(router)\n    .mount('#app')\n\n还有一个属性的变动，直接拿官网的栗子吧\n2.x 中的节点属性格式\n{\n  class: ['button', 'is-outlined'],\n  style: { color: '#34495E' },\n  attrs: { id: 'submit' },\n  domProps: { innertextarea: '' },\n  on: { click: submitForm },\n  key: 'submit-button'\n}\n\n在3.0中，这些属性不再被嵌套，被展平了(这看起来更像DOM节点上的东西了吧)\n{\n  class: ['button', 'is-outlined'],\n  style: { color: '#34495E' },\n  id: 'submit',\n  innertextarea: '',\n  onClick: submitForm,\n  key: 'submit-button'\n}\n\n插槽方面\n废掉了$scopedSlots，使用$slots\nvue2.x中，一个组件使用渲染函数拿插槽是这样的\n\n<br><textarea></br><srcript>\nexport default {\n    render(h) {\n        return h('div',{},this.$scopedSlots.default)\n    },\n}\n</srcript>\n<br></textarea></br>\nvue3.x中则是这样的\n<br></textarea></br>\n<br><textarea></br><srcript>\nimport {h} from 'vue'\nexport default {\n    props:{\n        data:String\n    },\n    render() {\n        return h('div',{},this.$slots.default())\n    },\n}\n</srcript>\n<br></textarea></br>\n\n\n<h2>2.5 Custom Elements</h2>\n自定义元素白名单\n如一些特殊的组件，我们要特殊用处的希望vue的编译忽略\n栗子\n直接往组件中放一个为注册过的组件\n <test08></test08>\n\n\n不希望出现这个错就把它放进白名单里\n使用构建工具版本\nrules: [\n  {\n    test: /\\.vue$/,\n    use: 'vue-loader',\n    options: {\n      compilerOptions: {\n        isCustomElement: tag => tag === 'test08'\n      }\n    }\n  }\n  // ...\n]\n\n 运行时编译版本 \nconst app = Vue.createApp({})\napp.config.isCustomElement = tag => tag === 'test08'\nis只能用在<component>上\n但是 <component :is=\"componentId\"></component> 除了这个玩意，我们别的地方可能也有需求需要用到is怎么办呢\n故vue3中推出了v-is指令\n\n","source":"_posts/a.md","raw":"---\nlayout:\n  - post\ntitle: vue3傻瓜式入门\ndate: 2020-09-20 18:48:17\ntags: program\n---\n\n可任选一种创建方式\n我个人还是采用的脚手架\n升级（即重装）\nnpm install -g @vue/cli # OR yarn global add @vue/cli\nvue create hello-vue3\n下面和原来不同的就是多了个选择版本的，选择vue3上手即可\n\n<h2>一、重点</h2>\n先以下面官网所列出的显著的为主（后三个先忽略）\n\n<h3>1.1. composition API</h3>\n别不管 Options API 与composition API 比较，我们先直接上手composition API \ncomposition API 入口点setup函数\n创建响应式数据 ref与reactive\nref\nref函数接一个参数返回一个响应式的ref对象\n直接看栗子\n\n<br><textarea></br><srcript>\n  <div>\n      {{num}}\n  </div>\n<br></textarea></br></template>\n<br><textarea></br><srcript>\nimport { ref } from \"vue\";\nexport default {\n  setup() {\n    const num = ref(1);\n    return { num };\n  },\n};\n</srcript>\n<br></textarea></br>\n也即和vue2.x中的这种写法是一样的\ndata(){\n    return {\n        num:1\n    }\n}\n\n值得注意的是：ref返回的是一个对象，需要通过它的value属性拿到它的值\n也即num.value。不过在模板中使用时他会自动解。也就是上面栗子中模板直接使用num，还有一种可自动解的情况先看下面\n另外现在就可以理解ref是用来把简单类型的数据进行响应式化的\nreactive\nref负责简单数据数据，则reactive就是将引用类型的数据进行响应式化\n直接看栗子\n\n<br><textarea></br><srcript>\n  <div>{{num}}{{obj.name}}</div>\n<br></textarea></br></template>\n<br><textarea></br><srcript>\nimport { ref, reactive } from \"vue\";\nexport default {\n  setup() {\n    const num = ref(1);\n    const obj = reactive({\n      name: \"gxb\",\n      age: 18,\n    });\n    return { num, obj };\n  },\n};\n</srcript>\n<br></textarea></br>\n\n上面的ref对象自动解套的另一种情况也即在这里它作为reactive函数参数对象的一属性\n即:\n const num = ref(1);\nconst obj = reactive({\n      name: \"gxb\",\n      age: 18,\n      num\n    });\n\n值得注意的是：这里不要随意使用...语法或者解构，否则会丧失响应式性质，最后的工具函数那再写栗子介绍\nreadonly\n这个函数，参数可以一个响应式或者普通的对象再或者是个ref。返回的是一个只读代理（深层的）\n栗子\ncomputed 与 watch\ncomputed\ncomputed是一个函数，它需要传一个getter函数。其返回值是一个不可手动修改的ref对象\n栗子\n\n<br><textarea></br><srcript>\n  <div>{{num2}}</div>\n<br></textarea></br></template>\n<br><textarea></br><srcript>\nimport { ref, reactive, computed } from \"vue\";\nexport default {\n  setup() {\n    const num = ref(1);\n    const obj = reactive({\n      name: \"gxb\",\n      age: 18,\n      num,\n    });\n    const num2 = computed(() => num.value + 1);\n    return { num, obj, num2 };\n  },\n};\n</srcript>\n<br></textarea></br>\n\n注意不可修改\n如\n const num2=computed(()=>num.value+1)\n    num2.value++\n\n\n想要一个可以进行修改的，就需传一个具有get和set函数的对象\n<br><textarea></br><srcript>\n  <div>{{num2.value}}</div>\n<br></textarea></br></template>\n<br><textarea></br><srcript>\nimport { ref, reactive, computed } from \"vue\";\nexport default {\n  setup() {\n    const num = ref(1);\n    const obj = reactive({\n      name: \"gxb\",\n      age: 18,\n      num,\n    });\n    const num2 = computed({\n        get:()=>num,\n        set:value=>num.value=value\n    });\n    \n    num2.value=3\n    return { num, obj, num2 };\n  },\n};\n<br></textarea></br></srcript>\n\n要注意的是，此时num2这个ref对象不会在自动解套了\nwatch\n监听一个\n<br><textarea></br><srcript>\n  <div>{{num2.value}}</div>\n<br></textarea></br></template>\n<br><textarea></br><srcript>\nimport { ref, reactive, computed, watch } from \"vue\";\nexport default {\n  setup() {\n    const obj = reactive({\n      name: \"gxb\",\n      age: 18,\n      num,\n    });\n\n    watch(\n      () => obj.name,\n      (name, preName) => {\n        console.log(`new ${name}---old ${preName}`);\n      }\n    );\n    setTimeout(() => {\n      obj.name = \"zhangsan\";\n    }, 1000);\n\n    return { obj };\n  },\n};\n<br></textarea></br></srcript>\n\n\n第一参除了可以是上面那种有返回值的getter函数，也可以是一个ref对象\n即\n<br><textarea></br><srcript>\n  <div></div>\n<br></textarea></br></template>\n<br><textarea></br><srcript>\nimport { ref, reactive, computed, watch } from \"vue\";\nexport default {\n  setup() {\n    const obj = reactive({\n      name: \"gxb\",\n      age: 18,\n      num,\n    });\n    const num = ref(0);\n    watch(num, (name, preName) => {\n      console.log(`new ${name}---old ${preName}`);\n    });\n    setTimeout(() => {\n      num.value = 2;\n    }, 1000);\n\n    return { obj };\n  },\n};\n<br></textarea></br></srcript>\n\n\n监听多个\n即如下只要num或obj.name有一个发生变动就触发监听器处理回调\n<br><textarea></br><srcript>\n  <div></div>\n<br></textarea></br></template>\n<br><textarea></br><srcript>\nimport { ref, reactive, computed, watch } from \"vue\";\nexport default {\n  setup() {\n    const obj = reactive({\n      name: \"gxb\",\n      age: 18,\n      num,\n    });\n    const num = ref(0);\n    watch([num, ()=>obj.name], ([newNum, newName], [oldNum, oldName]) => {\n      console.log(`new ${(newNum)},${(newName)}---old ${(oldNum)},${oldName}`);\n    });\n    setTimeout(() => {\n      num.value = 6;\n    //   obj.name = \"zhangsan\";\n    }, 1000);\n\n    return { obj };\n  },\n};\n<br></textarea></br></srcript>\n\n生命周期钩子\n栗子\nimport { onMounted, onUpdated, onUnmounted } from 'vue'\n\nconst MyComponent = {\n  setup() {\n    onMounted(() => {\n      console.log('mounted!')\n    })\n    onUpdated(() => {\n      console.log('updated!')\n    })\n    onUnmounted(() => {\n      console.log('unmounted!')\n    })\n  },\n}\n\n对应2.x钩子\n\nprops和this\nprops\nsetup这个入口函数接收的第一个参数就是props\n栗子\n\n这里需要注意，不要随便进行解构\n即图省事\n  props: {\n    data: String,\n  },\n  setup({ data }) {\n    console.log(data);\n  }\n\n解构会使其丧失响应式的\nthis\n2.x中拿组件实例实例很好拿，一般就是直接this，但是setup则不同。\n但是组件实例上有许多api我们还是要使用的\n故setup的第二个参数是一个上下文对象\n栗子:派发一个自定义事件\n\n值得注意的是这个context只是选择性的暴露了一些属性，如上面的emit还有attrs、slots\n依赖注入与Refs\n依赖注入\n和vue2.x的provide和inject基本一样\n栗子\n\n为图简单我用的一个组件举例\n\n它们的响应式需要自己出来一下（如用ref）\nRefs\n如拿下面这个节点\n\n<br><textarea></br><srcript>\n  <div ref=\"test\">test</div>\n<br></textarea></br></template>\n<br><textarea></br><srcript>\nimport {\n  ref,\n  reactive,\n  computed,\n  watch,\n  provide,\n  inject,\n  onMounted,\n} from \"vue\";\nexport default {\n  setup() {\n    const test = ref(null);\n    onMounted(() => {\n      console.log(test.value);\n    });\n\n    return { test };\n  },\n};\n<br></textarea></br></srcript>\n\n\n一些工具函数\n先来写下破坏reactive生成的响应对象代理的栗子\n首先正常写法\n<br><textarea></br><srcript>\n  <div ref=\"test\">\n    {{obj.age}}\n    <button @click=\"obj.age++\">add</button>\n  </div>\n<br></textarea></br></template>\n<br><textarea></br><srcript>\nimport { ref, reactive, computed, watch, provide, inject, readonly } from \"vue\";\nexport default {\n  props: {\n    data: String,\n  },\n  setup(props, context) {\n    console.log(props.data);\n    context.emit(\"test\");\n    const obj = reactive({\n      name: \"gxb\",\n      age: 18,\n\n    });\n\n    return { obj };\n  },\n};\n<br></textarea></br></srcript>\n\n\n使用扩展语法\n<br><textarea></br><srcript>\n  <div ref=\"test\">\n    {{age}}\n    <button @click=\"age++\">add</button>\n  </div>\n<br></textarea></br></template>\n<br><textarea></br><srcript>\nimport { ref, reactive, computed, watch, provide, inject, readonly } from \"vue\";\nexport default {\n  props: {\n    data: String,\n  },\n  setup(props, context) {\n    console.log(props.data);\n    context.emit(\"test\");\n    const obj = reactive({\n      name: \"gxb\",\n      age: 18,\n\n    });\n\n    return { ...obj };\n  },\n};\n<br></textarea></br></srcript>\n\n\n解构出来的同样不行\n<br><textarea></br><srcript>\n  <div ref=\"test\">\n    {{age}}\n    <button @click=\"age++\">add</button>\n  </div>\n<br></textarea></br></template>\n<br><textarea></br><srcript>\nimport { ref, reactive, computed, watch, provide, inject, readonly } from \"vue\";\nexport default {\n  props: {\n    data: String,\n  },\n  setup(props, context) {\n    console.log(props.data);\n    context.emit(\"test\");\n    const obj = reactive({\n      name: \"gxb\",\n      age: 18,\n    });\n    const { age } = obj;\n    return { age };\n  },\n};\n<br></textarea></br></srcript>\n\n这个的原理也很简单，reactive的内部原理是Proxy，它操作均在返回的代理实例上\n下面开始介绍几个工具函数\n\nunref，参数是一个ref则返回这个ref的value属性，否则返本身\ntoRef，给一个 reactive 对象的属性创建一个 ref \ntoRefs， 把一个响应式对象转换成普通对象，该普通对象的每个 property 都是一个 ref  \nisRef，判断一个值是否是ref\nisProxy，判断一个对象是否是由 reactive 或者 readonly 方法创建的代理。\nisReactive，判断一个对象是否是由 reactive 创建的响应式代理 \nisReadonly，判断一个对象是否是由 readonly 创建的只读代理。 \n\n仅给2、3写个例子吧\ntoRef，即把reactive 对象上的一个属性变成ref\n什么意思呢，还是看上面的破坏了响应式的栗子\n修复一下(即可把它一个属性抽出来做成响应式的ref，且它们还是互相关联的)\n\n<br><textarea></br><srcript>\n  <div ref=\"test\">\n    {{age}}\n    <button @click=\"age++\">add</button>\n  </div>\n<br></textarea></br></template>\n<br><textarea></br><srcript>\nimport {\n  ref,\n  reactive,\n  computed,\n  watch,\n  provide,\n  inject,\n  readonly,\n  toRef,\n} from \"vue\";\nexport default {\n  props: {\n    data: String,\n  },\n  setup(props, context) {\n    const obj = reactive({\n      name: \"gxb\",\n      age: 18,\n    });\n    const age=toRef(obj, \"age\");\n    watch(()=>obj.age,(newAge,oldAge)=>{\n        console.log(newAge);\n    })\n    return { age };\n  },\n};\n</srcript>\n<br></textarea></br>\n\ntoRefs则是把这个对象里面的所有属性均整成ref，这个修复则更简单了\n\n<br><textarea></br><srcript>\n  <div ref=\"test\">\n    {{age}}\n    <button @click=\"age++\">add</button>\n  </div>\n<br></textarea></br></template>\n<br><textarea></br><srcript>\nimport {\n  ref,\n  reactive,\n  computed,\n  watch,\n  provide,\n  inject,\n  readonly,\n  toRef,\n  toRefs\n} from \"vue\";\nexport default {\n  props: {\n    data: String,\n  },\n  setup(props, context) {\n    const obj = reactive({\n      name: \"gxb\",\n      age: 18,\n    });\n    const obj02=toRefs(obj);\n    \n    return { ...obj02 };\n  },\n};\n<br></textarea></br></srcript>\n\n<h2>1.2. Teleport</h2>\n传送门，顾名思义\n场景：某一些组件中我们可能需要一个模态框的功能，然而虽然逻辑上来说这个模态框是属于该组件中的，但是实际操作一般需要把这个框子挂到body上。Teleport 组件就是帮我们处理这个问题的\n来看栗子\n假设组件中需要有一个模态框\n<br><textarea></br><srcript>\n    <div>\n        <model></model>\n    </div>\n<br></textarea></br></template>\n<br><textarea></br><srcript>\nimport Model from './model'\nexport default {\n    components:{Model}\n}\n</srcript>\n<br></textarea></br>\n模态框组件\n\n<br><textarea></br><srcript>\n  <div>\n    <button @click=\"flag=true\">点击</button>\n    <teleport to=\"body\">\n      <div v-if=\"flag\">\n        <div>模态框</div>\n      </div>\n    </teleport>\n  </div>\n<br></textarea></br></template>\n<br><textarea></br><srcript>\nimport { ref } from \"vue\";\nexport default {\n  setup() {\n    const flag = ref(false);\n    return { flag };\n  },\n};\n</srcript>\n<br></textarea></br>\n即teleport组件的作用就是把teleport标签里面的元素传送到body上去\n\n再看层级\n\n<h2>1.3. Fragments</h2>\n这个的理解就更简单了\n原来只能这样:即只允许存在一个最外层的父元素div\n\n<br><textarea></br><srcript>\n  <div>\n    ...\n  </div>\n<br></textarea></br></template>\n<br></textarea></br>\n现在可多个\n\n<br><textarea></br><srcript>\n  <div>\n    ...\n  </div>\n  <div>\n    ...\n  </div>\n    ...\n<br></textarea></br></template>\n<br></textarea></br>\n<h2>1.4. Emits Component Option</h2>\n<h3>1.4.1 自定义事件派发</h3>\n这里的重点：即多了一个派发事件的选项emits\n也就我们以后再次使用emit派发一个事件的时候需要把这此派发的事件名放到选项里\n栗子:\n\n<br><textarea></br><srcript>\n  <div>\n    <button @click=\"$emit('test')\">点击</button>\n  </div>\n<br></textarea></br></template>\n<br><textarea></br><srcript>\nexport default {\n  emits: [\"test\"],\n};\n</srcript>\n<br></textarea></br>\n注意：这里如果你派发的是一个原生事件，且没有把此事件放进emits选项中，其父组件的监听会被触发两次\n\n<br><textarea></br><srcript>\n  <div>\n    <button @click=\"$emit('click')\">点击</button>\n  </div>\n<br></textarea></br></template>\n<br><textarea></br><srcript>\nexport default {\n//   emits: [\"click\"],\n};\n</srcript>\n<br></textarea></br>\n\n<h3>1.4.2 v-model</h3>\nvue3中的v-model,所借助的属性是 modelValue  所借助的事件是 update:modelValue (且3中把sync移出掉了)\n栗子\n父组件\n\n<br><textarea></br><srcript>\n  <div id=\"nav\">\n    {{data}}\n    <test05 v-model=\"data\"></test05>\n  </div>\n<br></textarea></br></template>\n<br><textarea></br><srcript>\nimport { ref } from \"vue\";\nimport Test05 from \"./components/test05\";\nexport default {\n  components: { Test05 },\n  setup() {\n    const data=ref('gxb')\n    return {data};\n  },\n};\n</srcript>\n<br></textarea></br>\n子组件\n\n<br><textarea></br><srcript>\n  <div>\n    <input type=\"text\" :value=\"modelValue\" @input=\"$emit('update:modelValue',$event.target.value)\" />\n  </div>\n<br></textarea></br></template>\n<br><textarea></br><srcript>\nexport default {\n    props:{\n        modelValue:String\n    },\n    emits:['update:modelValue']\n}\n<br></textarea></br></srcript>\n\n自定义属性名，vue2.x中可通过 model选项  指定传过来的属性名和指定本次v-model要利用的事件。 vue3中也可自定属性\n栗子\n父组件(即在v-model后面指定绑定)\n<test05 v-model:foo=\"data\"></test05>\n\n子组件\n<br><textarea></br><srcript>\n  <div>\n    <input type=\"text\" :value=\"foo\" @input=\"$emit('update:foo',$event.target.value)\" />\n  </div>\n<br></textarea></br></template>\n<br><textarea></br><srcript>\nexport default {\n    props:{\n        foo:String\n    },\n    emits:['update:foo']\n}\n<br></textarea></br></srcript>\n\n一个组件中可写多个v-model指令\n栗子：\n父组件\n <test01 v-model:foo=\"a\" v-model:bar=\"b\"></test01>\n\n子组件\n<br><textarea></br><srcript>\n  <div>\n    <input type=\"text\" :value=\"foo\" @input=\"$emit('update:foo',$event.target.value)\" />\n    <input type=\"text\" :value=\"bar\" @input=\"$emit('update:bar',$event.target.value)\" />\n  </div>\n<br></textarea></br></template>\n<br><textarea></br><srcript>\nexport default {\n  props: {\n    foo: String,\n    bar: String,\n  },\n  emits: [\"update:foo\", \"update:bar\"],\n  setup(props) {\n    return {};\n  },\n};\n<br></textarea></br></srcript>\n\n<h2>1.5. createRendererAPI</h2>\n自定义渲染器字如其名，它的主要功能是我们可以自定义 Virtual DOM 到DOM的方式，看了好3、4个大佬的栗子都是用canvas画了图。自己这里想不出什么栗子来先不写了\n二、其他\n2.1 Global API\n在vue2.x中没有应用的概念，vue2.x中的所谓的“app”也只不过是一个通过Vue构造出的实例。但是2.x中的一些全局API（像mixins、use、 component等 ）是直接在Vue构造函数中的\n也即如果下面还有使用new Vue的“应用”，这些全局API很容易造成污染\n下面来看一眼vue3的入口文件\nimport { createApp } from 'vue'\nimport App from './App.vue'\nimport router from './router'\nimport store from './store'\n\ncreateApp(App).use(store).use(router).mount('#app')\n\n现在有了一个createApp，这个方法就返回一个应用程序的实例\n拿component写个栗子\nimport { createApp, h } from 'vue'\nimport App from './App.vue'\nimport router from './router'\nimport store from './store'\n\ncreateApp(App)\n    .component('test06', {\n        render() {\n            return h('div', {}, '全局组件')\n        }\n    })\n    .use(store)\n    .use(router)\n    .mount('#app')\n\n其他API相应改变，如官网\n\nGlobal API Treeshaking\n官网是以 Vue.nextTick() ，这个全局API来举例的\n这个摇树是什么玩意呢？\n\n通过这句话可以理解，即这些个API不分青红皂白就写死在vue的构造函数上，如果我们在应用中本就没有对这些个API进行使用。那么打包时把这些东西也打进去是不是浪费性能同时也增大了打包体积呢\n故vue3中，nextTick的使用也是需要从vue中导入一下的\nimport { nextTick } from 'vue'\n\nnextTick(() => {\n  ...\n})\n\n其他受影响的API\n\n2.2 Template Directives\nv-model\nv-model上面已经写了，去掉了.sync，使用v-model进行了统一\nv-if、v-for优先级问题\n在2.x是v-for优先级高，在3.0中v-if的优先级高\n2.3 Components\n函数式组件\n因为在vue3中函数式组件现在在性能上的提升可以忽略不计，还是推荐使用状态组件。\n并且这里函数式组件只能通过纯函数进行声明，只能接受props和context（也是emit、slots、attrs）\n简单搞个例子\n这里偷个懒吧，把官网的栗子拿过来\nvue2.x\n// Vue 2 Functional Component Example\nexport default {\n  functional: true,\n  props: ['level'],\n  render(h, { props, data, children }) {\n    return h(`h${props.level}`, data, children)\n  }\n}\n\nvue3,区别除了下面所要说的h函数变化问题，还有上面提到的参数问题，再一个变化就是去掉了 functional: true,\nimport { h } from 'vue'\n\nconst DynamicHeading = (props, context) => {\n  return h(`h${props.level}`, context.attrs, context.slots)\n}\n\nDynamicHeading.props = ['level']\n\nexport default DynamicHeading\n\n单文件形式对比\n2.x\n// Vue 2 Functional Component Example with <br><textarea></br><srcript>\n<template functional>\n  <component\n    :is=\"`h${props.level}`\"\n    v-bind=\"attrs\"\n    v-on=\"listeners\"\n  />\n<br></textarea></br></template>\n\n<br><textarea></br><srcript>\nexport default {\n  props: ['level']\n}\n<br></textarea></br></srcript>\n\n3.0,区别去掉了functional,监听器放进了$attrs且可删除\n<br><textarea></br><srcript>\n  <component\n    v-bind:is=\"`h${props.level}`\"\n    v-bind=\"$attrs\"\n  />\n<br></textarea></br></template>\n\n<br><textarea></br><srcript>\nexport default {\n  props: ['level']\n}\n<br></textarea></br></srcript>\n\n异步组件\n原来异步组件咋整的呢\nconst asyncPage = () => import('./NextPage.vue')\n\n或者带选项的\nconst asyncPage = {\n  component: () => import('./NextPage.vue'),\n  delay: 200,\n  timeout: 3000,\n  error: ErrorComponent,\n  loading: LoadingComponent\n}\n\n但是vue3中不一样了，这里有一个新的API defineAsyncComponent用来显示定义异步组件\n也即\nconst asyncPage = defineAsyncComponent(() => import('./NextPage.vue'))\n\n或\nconst asyncPageWithOptions = defineAsyncComponent({\n  loader: () => import('./NextPage.vue'),\n  delay: 200,\n  timeout: 3000,\n  errorComponent: ErrorComponent,\n  loadingComponent: LoadingComponent\n})\n\n细心看也可看出component改成了loader\n还有一点不同的是，2.x中函数参数中可接收resolve,reject,3.0则不可，但是必须要返回一个Promise\n<h2>2.4 Render Function</h2>\n渲染函数的改变\n即原来的h函数是这样的\nexport default {\n  render(h) {\n    return h('div')\n  }\n}\n\n而现在h函数则需要从vue的再导入进来\n其实我上面有一个栗子已经用到了，再拿过来一次\nimport { createApp, h } from 'vue'\nimport App from './App.vue'\nimport router from './router'\nimport store from './store'\n\ncreateApp(App)\n    .component('test06', {\n        render() {\n            return h('div', {}, '全局组件')\n        }\n    })\n    .use(store)\n    .use(router)\n    .mount('#app')\n\n还有一个属性的变动，直接拿官网的栗子吧\n2.x 中的节点属性格式\n{\n  class: ['button', 'is-outlined'],\n  style: { color: '#34495E' },\n  attrs: { id: 'submit' },\n  domProps: { innertextarea: '' },\n  on: { click: submitForm },\n  key: 'submit-button'\n}\n\n在3.0中，这些属性不再被嵌套，被展平了(这看起来更像DOM节点上的东西了吧)\n{\n  class: ['button', 'is-outlined'],\n  style: { color: '#34495E' },\n  id: 'submit',\n  innertextarea: '',\n  onClick: submitForm,\n  key: 'submit-button'\n}\n\n插槽方面\n废掉了$scopedSlots，使用$slots\nvue2.x中，一个组件使用渲染函数拿插槽是这样的\n\n<br><textarea></br><srcript>\nexport default {\n    render(h) {\n        return h('div',{},this.$scopedSlots.default)\n    },\n}\n</srcript>\n<br></textarea></br>\nvue3.x中则是这样的\n<br></textarea></br>\n<br><textarea></br><srcript>\nimport {h} from 'vue'\nexport default {\n    props:{\n        data:String\n    },\n    render() {\n        return h('div',{},this.$slots.default())\n    },\n}\n</srcript>\n<br></textarea></br>\n\n\n<h2>2.5 Custom Elements</h2>\n自定义元素白名单\n如一些特殊的组件，我们要特殊用处的希望vue的编译忽略\n栗子\n直接往组件中放一个为注册过的组件\n <test08></test08>\n\n\n不希望出现这个错就把它放进白名单里\n使用构建工具版本\nrules: [\n  {\n    test: /\\.vue$/,\n    use: 'vue-loader',\n    options: {\n      compilerOptions: {\n        isCustomElement: tag => tag === 'test08'\n      }\n    }\n  }\n  // ...\n]\n\n 运行时编译版本 \nconst app = Vue.createApp({})\napp.config.isCustomElement = tag => tag === 'test08'\nis只能用在<component>上\n但是 <component :is=\"componentId\"></component> 除了这个玩意，我们别的地方可能也有需求需要用到is怎么办呢\n故vue3中推出了v-is指令\n\n","slug":"a","published":1,"updated":"2020-09-20T11:53:31.294Z","comments":1,"photos":[],"link":"","_id":"ckfb1mx8800057gur8pms6lbq","content":"<p>可任选一种创建方式<br>我个人还是采用的脚手架<br>升级（即重装）<br>npm install -g @vue/cli # OR yarn global add @vue/cli<br>vue create hello-vue3<br>下面和原来不同的就是多了个选择版本的，选择vue3上手即可</p>\n<h2>一、重点</h2>\n先以下面官网所列出的显著的为主（后三个先忽略）\n\n<h3>1.1. composition API</h3>\n别不管 Options API 与composition API 比较，我们先直接上手composition API \ncomposition API 入口点setup函数\n创建响应式数据 ref与reactive\nref\nref函数接一个参数返回一个响应式的ref对象\n直接看栗子\n\n<p><br><textarea></br><srcript><br>  <div><br>      <br>  </div><br><br></textarea></br></template><br><br><textarea></br><srcript><br>import { ref } from “vue”;<br>export default {<br>  setup() {<br>    const num = ref(1);<br>    return { num };<br>  },<br>};<br></srcript><br><br></textarea></br><br>也即和vue2.x中的这种写法是一样的<br>data(){<br>    return {<br>        num:1<br>    }<br>}</p>\n<p>值得注意的是：ref返回的是一个对象，需要通过它的value属性拿到它的值<br>也即num.value。不过在模板中使用时他会自动解。也就是上面栗子中模板直接使用num，还有一种可自动解的情况先看下面<br>另外现在就可以理解ref是用来把简单类型的数据进行响应式化的<br>reactive<br>ref负责简单数据数据，则reactive就是将引用类型的数据进行响应式化<br>直接看栗子</p>\n<p><br><textarea></br><srcript><br>  <div></div><br><br></textarea></br></template><br><br><textarea></br><srcript><br>import { ref, reactive } from “vue”;<br>export default {<br>  setup() {<br>    const num = ref(1);<br>    const obj = reactive({<br>      name: “gxb”,<br>      age: 18,<br>    });<br>    return { num, obj };<br>  },<br>};<br></srcript><br><br></textarea></br></p>\n<p>上面的ref对象自动解套的另一种情况也即在这里它作为reactive函数参数对象的一属性<br>即:<br> const num = ref(1);<br>const obj = reactive({<br>      name: “gxb”,<br>      age: 18,<br>      num<br>    });</p>\n<p>值得注意的是：这里不要随意使用…语法或者解构，否则会丧失响应式性质，最后的工具函数那再写栗子介绍<br>readonly<br>这个函数，参数可以一个响应式或者普通的对象再或者是个ref。返回的是一个只读代理（深层的）<br>栗子<br>computed 与 watch<br>computed<br>computed是一个函数，它需要传一个getter函数。其返回值是一个不可手动修改的ref对象<br>栗子</p>\n<p><br><textarea></br><srcript><br>  <div></div><br><br></textarea></br></template><br><br><textarea></br><srcript><br>import { ref, reactive, computed } from “vue”;<br>export default {<br>  setup() {<br>    const num = ref(1);<br>    const obj = reactive({<br>      name: “gxb”,<br>      age: 18,<br>      num,<br>    });<br>    const num2 = computed(() =&gt; num.value + 1);<br>    return { num, obj, num2 };<br>  },<br>};<br></srcript><br><br></textarea></br></p>\n<p>注意不可修改<br>如<br> const num2=computed(()=&gt;num.value+1)<br>    num2.value++</p>\n<p>想要一个可以进行修改的，就需传一个具有get和set函数的对象<br><br><textarea></br><srcript><br>  <div></div><br><br></textarea></br></template><br><br><textarea></br><srcript><br>import { ref, reactive, computed } from “vue”;<br>export default {<br>  setup() {<br>    const num = ref(1);<br>    const obj = reactive({<br>      name: “gxb”,<br>      age: 18,<br>      num,<br>    });<br>    const num2 = computed({<br>        get:()=&gt;num,<br>        set:value=&gt;num.value=value<br>    });</p>\n<pre><code>num2.value=3\nreturn &#123; num, obj, num2 &#125;;</code></pre>\n<p>  },<br>};<br><br></textarea></br></srcript></p>\n<p>要注意的是，此时num2这个ref对象不会在自动解套了<br>watch<br>监听一个<br><br><textarea></br><srcript><br>  <div></div><br><br></textarea></br></template><br><br><textarea></br><srcript><br>import { ref, reactive, computed, watch } from “vue”;<br>export default {<br>  setup() {<br>    const obj = reactive({<br>      name: “gxb”,<br>      age: 18,<br>      num,<br>    });</p>\n<pre><code>watch(\n  () =&gt; obj.name,\n  (name, preName) =&gt; &#123;\n    console.log(`new $&#123;name&#125;---old $&#123;preName&#125;`);\n  &#125;\n);\nsetTimeout(() =&gt; &#123;\n  obj.name = &quot;zhangsan&quot;;\n&#125;, 1000);\n\nreturn &#123; obj &#125;;</code></pre>\n<p>  },<br>};<br><br></textarea></br></srcript></p>\n<p>第一参除了可以是上面那种有返回值的getter函数，也可以是一个ref对象<br>即<br><br><textarea></br><srcript><br>  <div></div><br><br></textarea></br></template><br><br><textarea></br><srcript><br>import { ref, reactive, computed, watch } from “vue”;<br>export default {<br>  setup() {<br>    const obj = reactive({<br>      name: “gxb”,<br>      age: 18,<br>      num,<br>    });<br>    const num = ref(0);<br>    watch(num, (name, preName) =&gt; {<br>      console.log(<code>new $&#123;name&#125;---old $&#123;preName&#125;</code>);<br>    });<br>    setTimeout(() =&gt; {<br>      num.value = 2;<br>    }, 1000);</p>\n<pre><code>return &#123; obj &#125;;</code></pre>\n<p>  },<br>};<br><br></textarea></br></srcript></p>\n<p>监听多个<br>即如下只要num或obj.name有一个发生变动就触发监听器处理回调<br><br><textarea></br><srcript><br>  <div></div><br><br></textarea></br></template><br><br><textarea></br><srcript><br>import { ref, reactive, computed, watch } from “vue”;<br>export default {<br>  setup() {<br>    const obj = reactive({<br>      name: “gxb”,<br>      age: 18,<br>      num,<br>    });<br>    const num = ref(0);<br>    watch([num, ()=&gt;obj.name], ([newNum, newName], [oldNum, oldName]) =&gt; {<br>      console.log(<code>new $&#123;(newNum)&#125;,$&#123;(newName)&#125;---old $&#123;(oldNum)&#125;,$&#123;oldName&#125;</code>);<br>    });<br>    setTimeout(() =&gt; {<br>      num.value = 6;<br>    //   obj.name = “zhangsan”;<br>    }, 1000);</p>\n<pre><code>return &#123; obj &#125;;</code></pre>\n<p>  },<br>};<br><br></textarea></br></srcript></p>\n<p>生命周期钩子<br>栗子<br>import { onMounted, onUpdated, onUnmounted } from ‘vue’</p>\n<p>const MyComponent = {<br>  setup() {<br>    onMounted(() =&gt; {<br>      console.log(‘mounted!’)<br>    })<br>    onUpdated(() =&gt; {<br>      console.log(‘updated!’)<br>    })<br>    onUnmounted(() =&gt; {<br>      console.log(‘unmounted!’)<br>    })<br>  },<br>}</p>\n<p>对应2.x钩子</p>\n<p>props和this<br>props<br>setup这个入口函数接收的第一个参数就是props<br>栗子</p>\n<p>这里需要注意，不要随便进行解构<br>即图省事<br>  props: {<br>    data: String,<br>  },<br>  setup({ data }) {<br>    console.log(data);<br>  }</p>\n<p>解构会使其丧失响应式的<br>this<br>2.x中拿组件实例实例很好拿，一般就是直接this，但是setup则不同。<br>但是组件实例上有许多api我们还是要使用的<br>故setup的第二个参数是一个上下文对象<br>栗子:派发一个自定义事件</p>\n<p>值得注意的是这个context只是选择性的暴露了一些属性，如上面的emit还有attrs、slots<br>依赖注入与Refs<br>依赖注入<br>和vue2.x的provide和inject基本一样<br>栗子</p>\n<p>为图简单我用的一个组件举例</p>\n<p>它们的响应式需要自己出来一下（如用ref）<br>Refs<br>如拿下面这个节点</p>\n<p><br><textarea></br><srcript><br>  <div ref=\"test\">test</div><br><br></textarea></br></template><br><br><textarea></br><srcript><br>import {<br>  ref,<br>  reactive,<br>  computed,<br>  watch,<br>  provide,<br>  inject,<br>  onMounted,<br>} from “vue”;<br>export default {<br>  setup() {<br>    const test = ref(null);<br>    onMounted(() =&gt; {<br>      console.log(test.value);<br>    });</p>\n<pre><code>return &#123; test &#125;;</code></pre>\n<p>  },<br>};<br><br></textarea></br></srcript></p>\n<p>一些工具函数<br>先来写下破坏reactive生成的响应对象代理的栗子<br>首先正常写法<br><br><textarea></br><srcript><br>  <div ref=\"test\"><br>    <br>    &lt;button @click=”obj.age++”&gt;add</button><br>  </div><br><br></textarea></br></template><br><br><textarea></br><srcript><br>import { ref, reactive, computed, watch, provide, inject, readonly } from “vue”;<br>export default {<br>  props: {<br>    data: String,<br>  },<br>  setup(props, context) {<br>    console.log(props.data);<br>    context.emit(“test”);<br>    const obj = reactive({<br>      name: “gxb”,<br>      age: 18,</p>\n<pre><code>&#125;);\n\nreturn &#123; obj &#125;;</code></pre>\n<p>  },<br>};<br><br></textarea></br></srcript></p>\n<p>使用扩展语法<br><br><textarea></br><srcript><br>  <div ref=\"test\"><br>    <br>    &lt;button @click=”age++”&gt;add</button><br>  </div><br><br></textarea></br></template><br><br><textarea></br><srcript><br>import { ref, reactive, computed, watch, provide, inject, readonly } from “vue”;<br>export default {<br>  props: {<br>    data: String,<br>  },<br>  setup(props, context) {<br>    console.log(props.data);<br>    context.emit(“test”);<br>    const obj = reactive({<br>      name: “gxb”,<br>      age: 18,</p>\n<pre><code>&#125;);\n\nreturn &#123; ...obj &#125;;</code></pre>\n<p>  },<br>};<br><br></textarea></br></srcript></p>\n<p>解构出来的同样不行<br><br><textarea></br><srcript><br>  <div ref=\"test\"><br>    <br>    &lt;button @click=”age++”&gt;add</button><br>  </div><br><br></textarea></br></template><br><br><textarea></br><srcript><br>import { ref, reactive, computed, watch, provide, inject, readonly } from “vue”;<br>export default {<br>  props: {<br>    data: String,<br>  },<br>  setup(props, context) {<br>    console.log(props.data);<br>    context.emit(“test”);<br>    const obj = reactive({<br>      name: “gxb”,<br>      age: 18,<br>    });<br>    const { age } = obj;<br>    return { age };<br>  },<br>};<br><br></textarea></br></srcript></p>\n<p>这个的原理也很简单，reactive的内部原理是Proxy，它操作均在返回的代理实例上<br>下面开始介绍几个工具函数</p>\n<p>unref，参数是一个ref则返回这个ref的value属性，否则返本身<br>toRef，给一个 reactive 对象的属性创建一个 ref<br>toRefs， 把一个响应式对象转换成普通对象，该普通对象的每个 property 都是一个 ref<br>isRef，判断一个值是否是ref<br>isProxy，判断一个对象是否是由 reactive 或者 readonly 方法创建的代理。<br>isReactive，判断一个对象是否是由 reactive 创建的响应式代理<br>isReadonly，判断一个对象是否是由 readonly 创建的只读代理。 </p>\n<p>仅给2、3写个例子吧<br>toRef，即把reactive 对象上的一个属性变成ref<br>什么意思呢，还是看上面的破坏了响应式的栗子<br>修复一下(即可把它一个属性抽出来做成响应式的ref，且它们还是互相关联的)</p>\n<p><br><textarea></br><srcript><br>  <div ref=\"test\"><br>    <br>    &lt;button @click=”age++”&gt;add</button><br>  </div><br><br></textarea></br></template><br><br><textarea></br><srcript><br>import {<br>  ref,<br>  reactive,<br>  computed,<br>  watch,<br>  provide,<br>  inject,<br>  readonly,<br>  toRef,<br>} from “vue”;<br>export default {<br>  props: {<br>    data: String,<br>  },<br>  setup(props, context) {<br>    const obj = reactive({<br>      name: “gxb”,<br>      age: 18,<br>    });<br>    const age=toRef(obj, “age”);<br>    watch(()=&gt;obj.age,(newAge,oldAge)=&gt;{<br>        console.log(newAge);<br>    })<br>    return { age };<br>  },<br>};<br></srcript><br><br></textarea></br></p>\n<p>toRefs则是把这个对象里面的所有属性均整成ref，这个修复则更简单了</p>\n<p><br><textarea></br><srcript><br>  <div ref=\"test\"><br>    <br>    &lt;button @click=”age++”&gt;add</button><br>  </div><br><br></textarea></br></template><br><br><textarea></br><srcript><br>import {<br>  ref,<br>  reactive,<br>  computed,<br>  watch,<br>  provide,<br>  inject,<br>  readonly,<br>  toRef,<br>  toRefs<br>} from “vue”;<br>export default {<br>  props: {<br>    data: String,<br>  },<br>  setup(props, context) {<br>    const obj = reactive({<br>      name: “gxb”,<br>      age: 18,<br>    });<br>    const obj02=toRefs(obj);</p>\n<pre><code>return &#123; ...obj02 &#125;;</code></pre>\n<p>  },<br>};<br><br></textarea></br></srcript></p>\n<h2>1.2. Teleport</h2>\n传送门，顾名思义\n场景：某一些组件中我们可能需要一个模态框的功能，然而虽然逻辑上来说这个模态框是属于该组件中的，但是实际操作一般需要把这个框子挂到body上。Teleport 组件就是帮我们处理这个问题的\n来看栗子\n假设组件中需要有一个模态框\n<br><textarea></br><srcript>\n    <div>\n        <model></model>\n    </div>\n<br></textarea></br></template>\n<br><textarea></br><srcript>\nimport Model from './model'\nexport default {\n    components:{Model}\n}\n</srcript>\n<br></textarea></br>\n模态框组件\n\n<p><br><textarea></br><srcript><br>  <div><br>    &lt;button @click=”flag=true”&gt;点击</button><br>    <teleport to=\"body\"><br>      <div v-if=\"flag\"><br>        <div>模态框</div><br>      </div><br>    </teleport><br>  </div><br><br></textarea></br></template><br><br><textarea></br><srcript><br>import { ref } from “vue”;<br>export default {<br>  setup() {<br>    const flag = ref(false);<br>    return { flag };<br>  },<br>};<br></srcript><br><br></textarea></br><br>即teleport组件的作用就是把teleport标签里面的元素传送到body上去</p>\n<p>再看层级</p>\n<h2>1.3. Fragments</h2>\n这个的理解就更简单了\n原来只能这样:即只允许存在一个最外层的父元素div\n\n<p><br><textarea></br><srcript><br>  <div><br>    …<br>  </div><br><br></textarea></br></template><br><br></textarea></br><br>现在可多个</p>\n<p><br><textarea></br><srcript><br>  <div><br>    …<br>  </div><br>  <div><br>    …<br>  </div><br>    …<br><br></textarea></br></template><br><br></textarea></br></p>\n<h2>1.4. Emits Component Option</h2>\n<h3>1.4.1 自定义事件派发</h3>\n这里的重点：即多了一个派发事件的选项emits\n也就我们以后再次使用emit派发一个事件的时候需要把这此派发的事件名放到选项里\n栗子:\n\n<p><br><textarea></br><srcript><br>  <div><br>    &lt;button @click=”$emit(‘test’)”&gt;点击</button><br>  </div><br><br></textarea></br></template><br><br><textarea></br><srcript><br>export default {<br>  emits: [“test”],<br>};<br></srcript><br><br></textarea></br><br>注意：这里如果你派发的是一个原生事件，且没有把此事件放进emits选项中，其父组件的监听会被触发两次</p>\n<p><br><textarea></br><srcript><br>  <div><br>    &lt;button @click=”$emit(‘click’)”&gt;点击</button><br>  </div><br><br></textarea></br></template><br><br><textarea></br><srcript><br>export default {<br>//   emits: [“click”],<br>};<br></srcript><br><br></textarea></br></p>\n<h3>1.4.2 v-model</h3>\nvue3中的v-model,所借助的属性是 modelValue  所借助的事件是 update:modelValue (且3中把sync移出掉了)\n栗子\n父组件\n\n<p><br><textarea></br><srcript><br>  <div id=\"nav\"><br>    <br>    <test05 v-model=\"data\"></test05><br>  </div><br><br></textarea></br></template><br><br><textarea></br><srcript><br>import { ref } from “vue”;<br>import Test05 from “./components/test05”;<br>export default {<br>  components: { Test05 },<br>  setup() {<br>    const data=ref(‘gxb’)<br>    return {data};<br>  },<br>};<br></srcript><br><br></textarea></br><br>子组件</p>\n<p><br><textarea></br><srcript><br>  <div><br>    &lt;input type=”text” :value=”modelValue” @input=”$emit(‘update:modelValue’,$event.target.value)” /&gt;<br>  </div><br><br></textarea></br></template><br><br><textarea></br><srcript><br>export default {<br>    props:{<br>        modelValue:String<br>    },<br>    emits:[‘update:modelValue’]<br>}<br><br></textarea></br></srcript></p>\n<p>自定义属性名，vue2.x中可通过 model选项  指定传过来的属性名和指定本次v-model要利用的事件。 vue3中也可自定属性<br>栗子<br>父组件(即在v-model后面指定绑定)<br><test05 v-model:foo=\"data\"></test05></p>\n<p>子组件<br><br><textarea></br><srcript><br>  <div><br>    &lt;input type=”text” :value=”foo” @input=”$emit(‘update:foo’,$event.target.value)” /&gt;<br>  </div><br><br></textarea></br></template><br><br><textarea></br><srcript><br>export default {<br>    props:{<br>        foo:String<br>    },<br>    emits:[‘update:foo’]<br>}<br><br></textarea></br></srcript></p>\n<p>一个组件中可写多个v-model指令<br>栗子：<br>父组件<br> <test01 v-model:foo=\"a\" v-model:bar=\"b\"></test01></p>\n<p>子组件<br><br><textarea></br><srcript><br>  <div><br>    &lt;input type=”text” :value=”foo” @input=”$emit(‘update:foo’,$event.target.value)” /&gt;<br>    &lt;input type=”text” :value=”bar” @input=”$emit(‘update:bar’,$event.target.value)” /&gt;<br>  </div><br><br></textarea></br></template><br><br><textarea></br><srcript><br>export default {<br>  props: {<br>    foo: String,<br>    bar: String,<br>  },<br>  emits: [“update:foo”, “update:bar”],<br>  setup(props) {<br>    return {};<br>  },<br>};<br><br></textarea></br></srcript></p>\n<h2>1.5. createRendererAPI</h2>\n自定义渲染器字如其名，它的主要功能是我们可以自定义 Virtual DOM 到DOM的方式，看了好3、4个大佬的栗子都是用canvas画了图。自己这里想不出什么栗子来先不写了\n二、其他\n2.1 Global API\n在vue2.x中没有应用的概念，vue2.x中的所谓的“app”也只不过是一个通过Vue构造出的实例。但是2.x中的一些全局API（像mixins、use、 component等 ）是直接在Vue构造函数中的\n也即如果下面还有使用new Vue的“应用”，这些全局API很容易造成污染\n下面来看一眼vue3的入口文件\nimport { createApp } from 'vue'\nimport App from './App.vue'\nimport router from './router'\nimport store from './store'\n\n<p>createApp(App).use(store).use(router).mount(‘#app’)</p>\n<p>现在有了一个createApp，这个方法就返回一个应用程序的实例<br>拿component写个栗子<br>import { createApp, h } from ‘vue’<br>import App from ‘./App.vue’<br>import router from ‘./router’<br>import store from ‘./store’</p>\n<p>createApp(App)<br>    .component(‘test06’, {<br>        render() {<br>            return h(‘div’, {}, ‘全局组件’)<br>        }<br>    })<br>    .use(store)<br>    .use(router)<br>    .mount(‘#app’)</p>\n<p>其他API相应改变，如官网</p>\n<p>Global API Treeshaking<br>官网是以 Vue.nextTick() ，这个全局API来举例的<br>这个摇树是什么玩意呢？</p>\n<p>通过这句话可以理解，即这些个API不分青红皂白就写死在vue的构造函数上，如果我们在应用中本就没有对这些个API进行使用。那么打包时把这些东西也打进去是不是浪费性能同时也增大了打包体积呢<br>故vue3中，nextTick的使用也是需要从vue中导入一下的<br>import { nextTick } from ‘vue’</p>\n<p>nextTick(() =&gt; {<br>  …<br>})</p>\n<p>其他受影响的API</p>\n<p>2.2 Template Directives<br>v-model<br>v-model上面已经写了，去掉了.sync，使用v-model进行了统一<br>v-if、v-for优先级问题<br>在2.x是v-for优先级高，在3.0中v-if的优先级高<br>2.3 Components<br>函数式组件<br>因为在vue3中函数式组件现在在性能上的提升可以忽略不计，还是推荐使用状态组件。<br>并且这里函数式组件只能通过纯函数进行声明，只能接受props和context（也是emit、slots、attrs）<br>简单搞个例子<br>这里偷个懒吧，把官网的栗子拿过来<br>vue2.x<br>// Vue 2 Functional Component Example<br>export default {<br>  functional: true,<br>  props: [‘level’],<br>  render(h, { props, data, children }) {<br>    return h(<code>h$&#123;props.level&#125;</code>, data, children)<br>  }<br>}</p>\n<p>vue3,区别除了下面所要说的h函数变化问题，还有上面提到的参数问题，再一个变化就是去掉了 functional: true,<br>import { h } from ‘vue’</p>\n<p>const DynamicHeading = (props, context) =&gt; {<br>  return h(<code>h$&#123;props.level&#125;</code>, context.attrs, context.slots)<br>}</p>\n<p>DynamicHeading.props = [‘level’]</p>\n<p>export default DynamicHeading</p>\n<p>单文件形式对比<br>2.x<br>// Vue 2 Functional Component Example with <br><textarea></br><srcript><br><template functional><br>  <component\n    :is=\"`h${props.level}`\"\n    v-bind=\"attrs\"\n    v-on=\"listeners\"\n  /><br><br></textarea></br></template></p>\n<p><br><textarea></br><srcript><br>export default {<br>  props: [‘level’]<br>}<br><br></textarea></br></srcript></p>\n<p>3.0,区别去掉了functional,监听器放进了$attrs且可删除<br><br><textarea></br><srcript><br>  <component\n    v-bind:is=\"`h${props.level}`\"\n    v-bind=\"$attrs\"\n  /><br><br></textarea></br></template></p>\n<p><br><textarea></br><srcript><br>export default {<br>  props: [‘level’]<br>}<br><br></textarea></br></srcript></p>\n<p>异步组件<br>原来异步组件咋整的呢<br>const asyncPage = () =&gt; import(‘./NextPage.vue’)</p>\n<p>或者带选项的<br>const asyncPage = {<br>  component: () =&gt; import(‘./NextPage.vue’),<br>  delay: 200,<br>  timeout: 3000,<br>  error: ErrorComponent,<br>  loading: LoadingComponent<br>}</p>\n<p>但是vue3中不一样了，这里有一个新的API defineAsyncComponent用来显示定义异步组件<br>也即<br>const asyncPage = defineAsyncComponent(() =&gt; import(‘./NextPage.vue’))</p>\n<p>或<br>const asyncPageWithOptions = defineAsyncComponent({<br>  loader: () =&gt; import(‘./NextPage.vue’),<br>  delay: 200,<br>  timeout: 3000,<br>  errorComponent: ErrorComponent,<br>  loadingComponent: LoadingComponent<br>})</p>\n<p>细心看也可看出component改成了loader<br>还有一点不同的是，2.x中函数参数中可接收resolve,reject,3.0则不可，但是必须要返回一个Promise</p>\n<h2>2.4 Render Function</h2>\n渲染函数的改变\n即原来的h函数是这样的\nexport default {\n  render(h) {\n    return h('div')\n  }\n}\n\n<p>而现在h函数则需要从vue的再导入进来<br>其实我上面有一个栗子已经用到了，再拿过来一次<br>import { createApp, h } from ‘vue’<br>import App from ‘./App.vue’<br>import router from ‘./router’<br>import store from ‘./store’</p>\n<p>createApp(App)<br>    .component(‘test06’, {<br>        render() {<br>            return h(‘div’, {}, ‘全局组件’)<br>        }<br>    })<br>    .use(store)<br>    .use(router)<br>    .mount(‘#app’)</p>\n<p>还有一个属性的变动，直接拿官网的栗子吧<br>2.x 中的节点属性格式<br>{<br>  class: [‘button’, ‘is-outlined’],<br>  style: { color: ‘#34495E’ },<br>  attrs: { id: ‘submit’ },<br>  domProps: { innertextarea: ‘’ },<br>  on: { click: submitForm },<br>  key: ‘submit-button’<br>}</p>\n<p>在3.0中，这些属性不再被嵌套，被展平了(这看起来更像DOM节点上的东西了吧)<br>{<br>  class: [‘button’, ‘is-outlined’],<br>  style: { color: ‘#34495E’ },<br>  id: ‘submit’,<br>  innertextarea: ‘’,<br>  onClick: submitForm,<br>  key: ‘submit-button’<br>}</p>\n<p>插槽方面<br>废掉了$scopedSlots，使用$slots<br>vue2.x中，一个组件使用渲染函数拿插槽是这样的</p>\n<p><br><textarea></br><srcript><br>export default {<br>    render(h) {<br>        return h(‘div’,{},this.$scopedSlots.default)<br>    },<br>}<br></srcript><br><br></textarea></br><br>vue3.x中则是这样的<br><br></textarea></br><br><br><textarea></br><srcript><br>import {h} from ‘vue’<br>export default {<br>    props:{<br>        data:String<br>    },<br>    render() {<br>        return h(‘div’,{},this.$slots.default())<br>    },<br>}<br></srcript><br><br></textarea></br></p>\n<h2>2.5 Custom Elements</h2>\n自定义元素白名单\n如一些特殊的组件，我们要特殊用处的希望vue的编译忽略\n栗子\n直接往组件中放一个为注册过的组件\n <test08></test08>\n\n\n<p>不希望出现这个错就把它放进白名单里<br>使用构建工具版本<br>rules: [<br>  {<br>    test: /.vue$/,<br>    use: ‘vue-loader’,<br>    options: {<br>      compilerOptions: {<br>        isCustomElement: tag =&gt; tag === ‘test08’<br>      }<br>    }<br>  }<br>  // …<br>]</p>\n<p> 运行时编译版本<br>const app = Vue.createApp({})<br>app.config.isCustomElement = tag =&gt; tag === ‘test08’<br>is只能用在<component>上<br>但是 <component :is=\"componentId\"></component> 除了这个玩意，我们别的地方可能也有需求需要用到is怎么办呢<br>故vue3中推出了v-is指令</p>\n","site":{"data":{}},"excerpt":"","more":"<p>可任选一种创建方式<br>我个人还是采用的脚手架<br>升级（即重装）<br>npm install -g @vue/cli # OR yarn global add @vue/cli<br>vue create hello-vue3<br>下面和原来不同的就是多了个选择版本的，选择vue3上手即可</p>\n<h2>一、重点</h2>\n先以下面官网所列出的显著的为主（后三个先忽略）\n\n<h3>1.1. composition API</h3>\n别不管 Options API 与composition API 比较，我们先直接上手composition API \ncomposition API 入口点setup函数\n创建响应式数据 ref与reactive\nref\nref函数接一个参数返回一个响应式的ref对象\n直接看栗子\n\n<p><br><textarea></br><srcript><br>  <div><br>      <br>  </div><br><br></textarea></br></template><br><br><textarea></br><srcript><br>import { ref } from “vue”;<br>export default {<br>  setup() {<br>    const num = ref(1);<br>    return { num };<br>  },<br>};<br></srcript><br><br></textarea></br><br>也即和vue2.x中的这种写法是一样的<br>data(){<br>    return {<br>        num:1<br>    }<br>}</p>\n<p>值得注意的是：ref返回的是一个对象，需要通过它的value属性拿到它的值<br>也即num.value。不过在模板中使用时他会自动解。也就是上面栗子中模板直接使用num，还有一种可自动解的情况先看下面<br>另外现在就可以理解ref是用来把简单类型的数据进行响应式化的<br>reactive<br>ref负责简单数据数据，则reactive就是将引用类型的数据进行响应式化<br>直接看栗子</p>\n<p><br><textarea></br><srcript><br>  <div></div><br><br></textarea></br></template><br><br><textarea></br><srcript><br>import { ref, reactive } from “vue”;<br>export default {<br>  setup() {<br>    const num = ref(1);<br>    const obj = reactive({<br>      name: “gxb”,<br>      age: 18,<br>    });<br>    return { num, obj };<br>  },<br>};<br></srcript><br><br></textarea></br></p>\n<p>上面的ref对象自动解套的另一种情况也即在这里它作为reactive函数参数对象的一属性<br>即:<br> const num = ref(1);<br>const obj = reactive({<br>      name: “gxb”,<br>      age: 18,<br>      num<br>    });</p>\n<p>值得注意的是：这里不要随意使用…语法或者解构，否则会丧失响应式性质，最后的工具函数那再写栗子介绍<br>readonly<br>这个函数，参数可以一个响应式或者普通的对象再或者是个ref。返回的是一个只读代理（深层的）<br>栗子<br>computed 与 watch<br>computed<br>computed是一个函数，它需要传一个getter函数。其返回值是一个不可手动修改的ref对象<br>栗子</p>\n<p><br><textarea></br><srcript><br>  <div></div><br><br></textarea></br></template><br><br><textarea></br><srcript><br>import { ref, reactive, computed } from “vue”;<br>export default {<br>  setup() {<br>    const num = ref(1);<br>    const obj = reactive({<br>      name: “gxb”,<br>      age: 18,<br>      num,<br>    });<br>    const num2 = computed(() =&gt; num.value + 1);<br>    return { num, obj, num2 };<br>  },<br>};<br></srcript><br><br></textarea></br></p>\n<p>注意不可修改<br>如<br> const num2=computed(()=&gt;num.value+1)<br>    num2.value++</p>\n<p>想要一个可以进行修改的，就需传一个具有get和set函数的对象<br><br><textarea></br><srcript><br>  <div></div><br><br></textarea></br></template><br><br><textarea></br><srcript><br>import { ref, reactive, computed } from “vue”;<br>export default {<br>  setup() {<br>    const num = ref(1);<br>    const obj = reactive({<br>      name: “gxb”,<br>      age: 18,<br>      num,<br>    });<br>    const num2 = computed({<br>        get:()=&gt;num,<br>        set:value=&gt;num.value=value<br>    });</p>\n<pre><code>num2.value=3\nreturn &#123; num, obj, num2 &#125;;</code></pre>\n<p>  },<br>};<br><br></textarea></br></srcript></p>\n<p>要注意的是，此时num2这个ref对象不会在自动解套了<br>watch<br>监听一个<br><br><textarea></br><srcript><br>  <div></div><br><br></textarea></br></template><br><br><textarea></br><srcript><br>import { ref, reactive, computed, watch } from “vue”;<br>export default {<br>  setup() {<br>    const obj = reactive({<br>      name: “gxb”,<br>      age: 18,<br>      num,<br>    });</p>\n<pre><code>watch(\n  () =&gt; obj.name,\n  (name, preName) =&gt; &#123;\n    console.log(`new $&#123;name&#125;---old $&#123;preName&#125;`);\n  &#125;\n);\nsetTimeout(() =&gt; &#123;\n  obj.name = &quot;zhangsan&quot;;\n&#125;, 1000);\n\nreturn &#123; obj &#125;;</code></pre>\n<p>  },<br>};<br><br></textarea></br></srcript></p>\n<p>第一参除了可以是上面那种有返回值的getter函数，也可以是一个ref对象<br>即<br><br><textarea></br><srcript><br>  <div></div><br><br></textarea></br></template><br><br><textarea></br><srcript><br>import { ref, reactive, computed, watch } from “vue”;<br>export default {<br>  setup() {<br>    const obj = reactive({<br>      name: “gxb”,<br>      age: 18,<br>      num,<br>    });<br>    const num = ref(0);<br>    watch(num, (name, preName) =&gt; {<br>      console.log(<code>new $&#123;name&#125;---old $&#123;preName&#125;</code>);<br>    });<br>    setTimeout(() =&gt; {<br>      num.value = 2;<br>    }, 1000);</p>\n<pre><code>return &#123; obj &#125;;</code></pre>\n<p>  },<br>};<br><br></textarea></br></srcript></p>\n<p>监听多个<br>即如下只要num或obj.name有一个发生变动就触发监听器处理回调<br><br><textarea></br><srcript><br>  <div></div><br><br></textarea></br></template><br><br><textarea></br><srcript><br>import { ref, reactive, computed, watch } from “vue”;<br>export default {<br>  setup() {<br>    const obj = reactive({<br>      name: “gxb”,<br>      age: 18,<br>      num,<br>    });<br>    const num = ref(0);<br>    watch([num, ()=&gt;obj.name], ([newNum, newName], [oldNum, oldName]) =&gt; {<br>      console.log(<code>new $&#123;(newNum)&#125;,$&#123;(newName)&#125;---old $&#123;(oldNum)&#125;,$&#123;oldName&#125;</code>);<br>    });<br>    setTimeout(() =&gt; {<br>      num.value = 6;<br>    //   obj.name = “zhangsan”;<br>    }, 1000);</p>\n<pre><code>return &#123; obj &#125;;</code></pre>\n<p>  },<br>};<br><br></textarea></br></srcript></p>\n<p>生命周期钩子<br>栗子<br>import { onMounted, onUpdated, onUnmounted } from ‘vue’</p>\n<p>const MyComponent = {<br>  setup() {<br>    onMounted(() =&gt; {<br>      console.log(‘mounted!’)<br>    })<br>    onUpdated(() =&gt; {<br>      console.log(‘updated!’)<br>    })<br>    onUnmounted(() =&gt; {<br>      console.log(‘unmounted!’)<br>    })<br>  },<br>}</p>\n<p>对应2.x钩子</p>\n<p>props和this<br>props<br>setup这个入口函数接收的第一个参数就是props<br>栗子</p>\n<p>这里需要注意，不要随便进行解构<br>即图省事<br>  props: {<br>    data: String,<br>  },<br>  setup({ data }) {<br>    console.log(data);<br>  }</p>\n<p>解构会使其丧失响应式的<br>this<br>2.x中拿组件实例实例很好拿，一般就是直接this，但是setup则不同。<br>但是组件实例上有许多api我们还是要使用的<br>故setup的第二个参数是一个上下文对象<br>栗子:派发一个自定义事件</p>\n<p>值得注意的是这个context只是选择性的暴露了一些属性，如上面的emit还有attrs、slots<br>依赖注入与Refs<br>依赖注入<br>和vue2.x的provide和inject基本一样<br>栗子</p>\n<p>为图简单我用的一个组件举例</p>\n<p>它们的响应式需要自己出来一下（如用ref）<br>Refs<br>如拿下面这个节点</p>\n<p><br><textarea></br><srcript><br>  <div ref=\"test\">test</div><br><br></textarea></br></template><br><br><textarea></br><srcript><br>import {<br>  ref,<br>  reactive,<br>  computed,<br>  watch,<br>  provide,<br>  inject,<br>  onMounted,<br>} from “vue”;<br>export default {<br>  setup() {<br>    const test = ref(null);<br>    onMounted(() =&gt; {<br>      console.log(test.value);<br>    });</p>\n<pre><code>return &#123; test &#125;;</code></pre>\n<p>  },<br>};<br><br></textarea></br></srcript></p>\n<p>一些工具函数<br>先来写下破坏reactive生成的响应对象代理的栗子<br>首先正常写法<br><br><textarea></br><srcript><br>  <div ref=\"test\"><br>    <br>    &lt;button @click=”obj.age++”&gt;add</button><br>  </div><br><br></textarea></br></template><br><br><textarea></br><srcript><br>import { ref, reactive, computed, watch, provide, inject, readonly } from “vue”;<br>export default {<br>  props: {<br>    data: String,<br>  },<br>  setup(props, context) {<br>    console.log(props.data);<br>    context.emit(“test”);<br>    const obj = reactive({<br>      name: “gxb”,<br>      age: 18,</p>\n<pre><code>&#125;);\n\nreturn &#123; obj &#125;;</code></pre>\n<p>  },<br>};<br><br></textarea></br></srcript></p>\n<p>使用扩展语法<br><br><textarea></br><srcript><br>  <div ref=\"test\"><br>    <br>    &lt;button @click=”age++”&gt;add</button><br>  </div><br><br></textarea></br></template><br><br><textarea></br><srcript><br>import { ref, reactive, computed, watch, provide, inject, readonly } from “vue”;<br>export default {<br>  props: {<br>    data: String,<br>  },<br>  setup(props, context) {<br>    console.log(props.data);<br>    context.emit(“test”);<br>    const obj = reactive({<br>      name: “gxb”,<br>      age: 18,</p>\n<pre><code>&#125;);\n\nreturn &#123; ...obj &#125;;</code></pre>\n<p>  },<br>};<br><br></textarea></br></srcript></p>\n<p>解构出来的同样不行<br><br><textarea></br><srcript><br>  <div ref=\"test\"><br>    <br>    &lt;button @click=”age++”&gt;add</button><br>  </div><br><br></textarea></br></template><br><br><textarea></br><srcript><br>import { ref, reactive, computed, watch, provide, inject, readonly } from “vue”;<br>export default {<br>  props: {<br>    data: String,<br>  },<br>  setup(props, context) {<br>    console.log(props.data);<br>    context.emit(“test”);<br>    const obj = reactive({<br>      name: “gxb”,<br>      age: 18,<br>    });<br>    const { age } = obj;<br>    return { age };<br>  },<br>};<br><br></textarea></br></srcript></p>\n<p>这个的原理也很简单，reactive的内部原理是Proxy，它操作均在返回的代理实例上<br>下面开始介绍几个工具函数</p>\n<p>unref，参数是一个ref则返回这个ref的value属性，否则返本身<br>toRef，给一个 reactive 对象的属性创建一个 ref<br>toRefs， 把一个响应式对象转换成普通对象，该普通对象的每个 property 都是一个 ref<br>isRef，判断一个值是否是ref<br>isProxy，判断一个对象是否是由 reactive 或者 readonly 方法创建的代理。<br>isReactive，判断一个对象是否是由 reactive 创建的响应式代理<br>isReadonly，判断一个对象是否是由 readonly 创建的只读代理。 </p>\n<p>仅给2、3写个例子吧<br>toRef，即把reactive 对象上的一个属性变成ref<br>什么意思呢，还是看上面的破坏了响应式的栗子<br>修复一下(即可把它一个属性抽出来做成响应式的ref，且它们还是互相关联的)</p>\n<p><br><textarea></br><srcript><br>  <div ref=\"test\"><br>    <br>    &lt;button @click=”age++”&gt;add</button><br>  </div><br><br></textarea></br></template><br><br><textarea></br><srcript><br>import {<br>  ref,<br>  reactive,<br>  computed,<br>  watch,<br>  provide,<br>  inject,<br>  readonly,<br>  toRef,<br>} from “vue”;<br>export default {<br>  props: {<br>    data: String,<br>  },<br>  setup(props, context) {<br>    const obj = reactive({<br>      name: “gxb”,<br>      age: 18,<br>    });<br>    const age=toRef(obj, “age”);<br>    watch(()=&gt;obj.age,(newAge,oldAge)=&gt;{<br>        console.log(newAge);<br>    })<br>    return { age };<br>  },<br>};<br></srcript><br><br></textarea></br></p>\n<p>toRefs则是把这个对象里面的所有属性均整成ref，这个修复则更简单了</p>\n<p><br><textarea></br><srcript><br>  <div ref=\"test\"><br>    <br>    &lt;button @click=”age++”&gt;add</button><br>  </div><br><br></textarea></br></template><br><br><textarea></br><srcript><br>import {<br>  ref,<br>  reactive,<br>  computed,<br>  watch,<br>  provide,<br>  inject,<br>  readonly,<br>  toRef,<br>  toRefs<br>} from “vue”;<br>export default {<br>  props: {<br>    data: String,<br>  },<br>  setup(props, context) {<br>    const obj = reactive({<br>      name: “gxb”,<br>      age: 18,<br>    });<br>    const obj02=toRefs(obj);</p>\n<pre><code>return &#123; ...obj02 &#125;;</code></pre>\n<p>  },<br>};<br><br></textarea></br></srcript></p>\n<h2>1.2. Teleport</h2>\n传送门，顾名思义\n场景：某一些组件中我们可能需要一个模态框的功能，然而虽然逻辑上来说这个模态框是属于该组件中的，但是实际操作一般需要把这个框子挂到body上。Teleport 组件就是帮我们处理这个问题的\n来看栗子\n假设组件中需要有一个模态框\n<br><textarea></br><srcript>\n    <div>\n        <model></model>\n    </div>\n<br></textarea></br></template>\n<br><textarea></br><srcript>\nimport Model from './model'\nexport default {\n    components:{Model}\n}\n</srcript>\n<br></textarea></br>\n模态框组件\n\n<p><br><textarea></br><srcript><br>  <div><br>    &lt;button @click=”flag=true”&gt;点击</button><br>    <teleport to=\"body\"><br>      <div v-if=\"flag\"><br>        <div>模态框</div><br>      </div><br>    </teleport><br>  </div><br><br></textarea></br></template><br><br><textarea></br><srcript><br>import { ref } from “vue”;<br>export default {<br>  setup() {<br>    const flag = ref(false);<br>    return { flag };<br>  },<br>};<br></srcript><br><br></textarea></br><br>即teleport组件的作用就是把teleport标签里面的元素传送到body上去</p>\n<p>再看层级</p>\n<h2>1.3. Fragments</h2>\n这个的理解就更简单了\n原来只能这样:即只允许存在一个最外层的父元素div\n\n<p><br><textarea></br><srcript><br>  <div><br>    …<br>  </div><br><br></textarea></br></template><br><br></textarea></br><br>现在可多个</p>\n<p><br><textarea></br><srcript><br>  <div><br>    …<br>  </div><br>  <div><br>    …<br>  </div><br>    …<br><br></textarea></br></template><br><br></textarea></br></p>\n<h2>1.4. Emits Component Option</h2>\n<h3>1.4.1 自定义事件派发</h3>\n这里的重点：即多了一个派发事件的选项emits\n也就我们以后再次使用emit派发一个事件的时候需要把这此派发的事件名放到选项里\n栗子:\n\n<p><br><textarea></br><srcript><br>  <div><br>    &lt;button @click=”$emit(‘test’)”&gt;点击</button><br>  </div><br><br></textarea></br></template><br><br><textarea></br><srcript><br>export default {<br>  emits: [“test”],<br>};<br></srcript><br><br></textarea></br><br>注意：这里如果你派发的是一个原生事件，且没有把此事件放进emits选项中，其父组件的监听会被触发两次</p>\n<p><br><textarea></br><srcript><br>  <div><br>    &lt;button @click=”$emit(‘click’)”&gt;点击</button><br>  </div><br><br></textarea></br></template><br><br><textarea></br><srcript><br>export default {<br>//   emits: [“click”],<br>};<br></srcript><br><br></textarea></br></p>\n<h3>1.4.2 v-model</h3>\nvue3中的v-model,所借助的属性是 modelValue  所借助的事件是 update:modelValue (且3中把sync移出掉了)\n栗子\n父组件\n\n<p><br><textarea></br><srcript><br>  <div id=\"nav\"><br>    <br>    <test05 v-model=\"data\"></test05><br>  </div><br><br></textarea></br></template><br><br><textarea></br><srcript><br>import { ref } from “vue”;<br>import Test05 from “./components/test05”;<br>export default {<br>  components: { Test05 },<br>  setup() {<br>    const data=ref(‘gxb’)<br>    return {data};<br>  },<br>};<br></srcript><br><br></textarea></br><br>子组件</p>\n<p><br><textarea></br><srcript><br>  <div><br>    &lt;input type=”text” :value=”modelValue” @input=”$emit(‘update:modelValue’,$event.target.value)” /&gt;<br>  </div><br><br></textarea></br></template><br><br><textarea></br><srcript><br>export default {<br>    props:{<br>        modelValue:String<br>    },<br>    emits:[‘update:modelValue’]<br>}<br><br></textarea></br></srcript></p>\n<p>自定义属性名，vue2.x中可通过 model选项  指定传过来的属性名和指定本次v-model要利用的事件。 vue3中也可自定属性<br>栗子<br>父组件(即在v-model后面指定绑定)<br><test05 v-model:foo=\"data\"></test05></p>\n<p>子组件<br><br><textarea></br><srcript><br>  <div><br>    &lt;input type=”text” :value=”foo” @input=”$emit(‘update:foo’,$event.target.value)” /&gt;<br>  </div><br><br></textarea></br></template><br><br><textarea></br><srcript><br>export default {<br>    props:{<br>        foo:String<br>    },<br>    emits:[‘update:foo’]<br>}<br><br></textarea></br></srcript></p>\n<p>一个组件中可写多个v-model指令<br>栗子：<br>父组件<br> <test01 v-model:foo=\"a\" v-model:bar=\"b\"></test01></p>\n<p>子组件<br><br><textarea></br><srcript><br>  <div><br>    &lt;input type=”text” :value=”foo” @input=”$emit(‘update:foo’,$event.target.value)” /&gt;<br>    &lt;input type=”text” :value=”bar” @input=”$emit(‘update:bar’,$event.target.value)” /&gt;<br>  </div><br><br></textarea></br></template><br><br><textarea></br><srcript><br>export default {<br>  props: {<br>    foo: String,<br>    bar: String,<br>  },<br>  emits: [“update:foo”, “update:bar”],<br>  setup(props) {<br>    return {};<br>  },<br>};<br><br></textarea></br></srcript></p>\n<h2>1.5. createRendererAPI</h2>\n自定义渲染器字如其名，它的主要功能是我们可以自定义 Virtual DOM 到DOM的方式，看了好3、4个大佬的栗子都是用canvas画了图。自己这里想不出什么栗子来先不写了\n二、其他\n2.1 Global API\n在vue2.x中没有应用的概念，vue2.x中的所谓的“app”也只不过是一个通过Vue构造出的实例。但是2.x中的一些全局API（像mixins、use、 component等 ）是直接在Vue构造函数中的\n也即如果下面还有使用new Vue的“应用”，这些全局API很容易造成污染\n下面来看一眼vue3的入口文件\nimport { createApp } from 'vue'\nimport App from './App.vue'\nimport router from './router'\nimport store from './store'\n\n<p>createApp(App).use(store).use(router).mount(‘#app’)</p>\n<p>现在有了一个createApp，这个方法就返回一个应用程序的实例<br>拿component写个栗子<br>import { createApp, h } from ‘vue’<br>import App from ‘./App.vue’<br>import router from ‘./router’<br>import store from ‘./store’</p>\n<p>createApp(App)<br>    .component(‘test06’, {<br>        render() {<br>            return h(‘div’, {}, ‘全局组件’)<br>        }<br>    })<br>    .use(store)<br>    .use(router)<br>    .mount(‘#app’)</p>\n<p>其他API相应改变，如官网</p>\n<p>Global API Treeshaking<br>官网是以 Vue.nextTick() ，这个全局API来举例的<br>这个摇树是什么玩意呢？</p>\n<p>通过这句话可以理解，即这些个API不分青红皂白就写死在vue的构造函数上，如果我们在应用中本就没有对这些个API进行使用。那么打包时把这些东西也打进去是不是浪费性能同时也增大了打包体积呢<br>故vue3中，nextTick的使用也是需要从vue中导入一下的<br>import { nextTick } from ‘vue’</p>\n<p>nextTick(() =&gt; {<br>  …<br>})</p>\n<p>其他受影响的API</p>\n<p>2.2 Template Directives<br>v-model<br>v-model上面已经写了，去掉了.sync，使用v-model进行了统一<br>v-if、v-for优先级问题<br>在2.x是v-for优先级高，在3.0中v-if的优先级高<br>2.3 Components<br>函数式组件<br>因为在vue3中函数式组件现在在性能上的提升可以忽略不计，还是推荐使用状态组件。<br>并且这里函数式组件只能通过纯函数进行声明，只能接受props和context（也是emit、slots、attrs）<br>简单搞个例子<br>这里偷个懒吧，把官网的栗子拿过来<br>vue2.x<br>// Vue 2 Functional Component Example<br>export default {<br>  functional: true,<br>  props: [‘level’],<br>  render(h, { props, data, children }) {<br>    return h(<code>h$&#123;props.level&#125;</code>, data, children)<br>  }<br>}</p>\n<p>vue3,区别除了下面所要说的h函数变化问题，还有上面提到的参数问题，再一个变化就是去掉了 functional: true,<br>import { h } from ‘vue’</p>\n<p>const DynamicHeading = (props, context) =&gt; {<br>  return h(<code>h$&#123;props.level&#125;</code>, context.attrs, context.slots)<br>}</p>\n<p>DynamicHeading.props = [‘level’]</p>\n<p>export default DynamicHeading</p>\n<p>单文件形式对比<br>2.x<br>// Vue 2 Functional Component Example with <br><textarea></br><srcript><br><template functional><br>  <component\n    :is=\"`h${props.level}`\"\n    v-bind=\"attrs\"\n    v-on=\"listeners\"\n  /><br><br></textarea></br></template></p>\n<p><br><textarea></br><srcript><br>export default {<br>  props: [‘level’]<br>}<br><br></textarea></br></srcript></p>\n<p>3.0,区别去掉了functional,监听器放进了$attrs且可删除<br><br><textarea></br><srcript><br>  <component\n    v-bind:is=\"`h${props.level}`\"\n    v-bind=\"$attrs\"\n  /><br><br></textarea></br></template></p>\n<p><br><textarea></br><srcript><br>export default {<br>  props: [‘level’]<br>}<br><br></textarea></br></srcript></p>\n<p>异步组件<br>原来异步组件咋整的呢<br>const asyncPage = () =&gt; import(‘./NextPage.vue’)</p>\n<p>或者带选项的<br>const asyncPage = {<br>  component: () =&gt; import(‘./NextPage.vue’),<br>  delay: 200,<br>  timeout: 3000,<br>  error: ErrorComponent,<br>  loading: LoadingComponent<br>}</p>\n<p>但是vue3中不一样了，这里有一个新的API defineAsyncComponent用来显示定义异步组件<br>也即<br>const asyncPage = defineAsyncComponent(() =&gt; import(‘./NextPage.vue’))</p>\n<p>或<br>const asyncPageWithOptions = defineAsyncComponent({<br>  loader: () =&gt; import(‘./NextPage.vue’),<br>  delay: 200,<br>  timeout: 3000,<br>  errorComponent: ErrorComponent,<br>  loadingComponent: LoadingComponent<br>})</p>\n<p>细心看也可看出component改成了loader<br>还有一点不同的是，2.x中函数参数中可接收resolve,reject,3.0则不可，但是必须要返回一个Promise</p>\n<h2>2.4 Render Function</h2>\n渲染函数的改变\n即原来的h函数是这样的\nexport default {\n  render(h) {\n    return h('div')\n  }\n}\n\n<p>而现在h函数则需要从vue的再导入进来<br>其实我上面有一个栗子已经用到了，再拿过来一次<br>import { createApp, h } from ‘vue’<br>import App from ‘./App.vue’<br>import router from ‘./router’<br>import store from ‘./store’</p>\n<p>createApp(App)<br>    .component(‘test06’, {<br>        render() {<br>            return h(‘div’, {}, ‘全局组件’)<br>        }<br>    })<br>    .use(store)<br>    .use(router)<br>    .mount(‘#app’)</p>\n<p>还有一个属性的变动，直接拿官网的栗子吧<br>2.x 中的节点属性格式<br>{<br>  class: [‘button’, ‘is-outlined’],<br>  style: { color: ‘#34495E’ },<br>  attrs: { id: ‘submit’ },<br>  domProps: { innertextarea: ‘’ },<br>  on: { click: submitForm },<br>  key: ‘submit-button’<br>}</p>\n<p>在3.0中，这些属性不再被嵌套，被展平了(这看起来更像DOM节点上的东西了吧)<br>{<br>  class: [‘button’, ‘is-outlined’],<br>  style: { color: ‘#34495E’ },<br>  id: ‘submit’,<br>  innertextarea: ‘’,<br>  onClick: submitForm,<br>  key: ‘submit-button’<br>}</p>\n<p>插槽方面<br>废掉了$scopedSlots，使用$slots<br>vue2.x中，一个组件使用渲染函数拿插槽是这样的</p>\n<p><br><textarea></br><srcript><br>export default {<br>    render(h) {<br>        return h(‘div’,{},this.$scopedSlots.default)<br>    },<br>}<br></srcript><br><br></textarea></br><br>vue3.x中则是这样的<br><br></textarea></br><br><br><textarea></br><srcript><br>import {h} from ‘vue’<br>export default {<br>    props:{<br>        data:String<br>    },<br>    render() {<br>        return h(‘div’,{},this.$slots.default())<br>    },<br>}<br></srcript><br><br></textarea></br></p>\n<h2>2.5 Custom Elements</h2>\n自定义元素白名单\n如一些特殊的组件，我们要特殊用处的希望vue的编译忽略\n栗子\n直接往组件中放一个为注册过的组件\n <test08></test08>\n\n\n<p>不希望出现这个错就把它放进白名单里<br>使用构建工具版本<br>rules: [<br>  {<br>    test: /.vue$/,<br>    use: ‘vue-loader’,<br>    options: {<br>      compilerOptions: {<br>        isCustomElement: tag =&gt; tag === ‘test08’<br>      }<br>    }<br>  }<br>  // …<br>]</p>\n<p> 运行时编译版本<br>const app = Vue.createApp({})<br>app.config.isCustomElement = tag =&gt; tag === ‘test08’<br>is只能用在<component>上<br>但是 <component :is=\"componentId\"></component> 除了这个玩意，我们别的地方可能也有需求需要用到is怎么办呢<br>故vue3中推出了v-is指令</p>\n"}],"PostAsset":[{"_id":"source/_posts/聊天室项目/聊天室数据库结构设计.png","post":"ckfb1mx8600047gur80ar1v0g","slug":"聊天室数据库结构设计.png","modified":1,"renderable":1}],"PostCategory":[],"PostTag":[{"post_id":"ckfb1mx8000017gurfgha9aqv","tag_id":"ckfb1mx8300027gur7jhuepmp","_id":"ckfb1mx8400037gur6coj8hi6"},{"post_id":"ckfb1mx8600047gur80ar1v0g","tag_id":"ckfb1mx8900067gur5yn98aga","_id":"ckfb1mx8r00087gur8rqk1t19"},{"post_id":"ckfb1mx8800057gur8pms6lbq","tag_id":"ckfb1mx8900067gur5yn98aga","_id":"ckfb1mx8s00097gur05531mq4"}],"Tag":[{"name":"essay","_id":"ckfb1mx8300027gur7jhuepmp"},{"name":"program","_id":"ckfb1mx8900067gur5yn98aga"}]}}