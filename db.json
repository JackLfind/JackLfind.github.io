{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/default.png","path":"img/default.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/loading.gif","path":"img/loading.gif","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/debouncer.js","path":"js/debouncer.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/clipboard-use.js","path":"js/clipboard-use.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/lazyload.js","path":"js/lazyload.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/lib/hint/hint.min.css","path":"lib/hint/hint.min.css","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/32个js问题.md","hash":"8be7bbb3bb198e17f61337b1839e6c328fb4571c","modified":1600782655214},{"_id":"source/about/index.md","hash":"f521a92163afe5ae401e9005e7b07dd8bc82fd14","modified":1600440948074},{"_id":"source/_posts/first.md","hash":"1db95e55039b4217e3205ba3ec59843a16b3f332","modified":1600441807865},{"_id":"source/_posts/a.md","hash":"858ab7c66b071468aa109921fd4fd69e475fd0dc","modified":1600690926024},{"_id":"source/_posts/聊天室项目.md","hash":"babb4b3aa35df043b498c0d289ff32dc552aa07e","modified":1600598936728},{"_id":"source/_posts/excel常用公式.md","hash":"183c38078da4b177df84e9163026e127eac16026","modified":1600697517114},{"_id":"source/_posts/vue3傻瓜式入门/11.png","hash":"210ba9cc02a971c44ec57661dcf4f7d178e88d1b","modified":1600600049043},{"_id":"source/_posts/vue3傻瓜式入门/10.png","hash":"55fe2841ebc131020aff85aab9b3b9b37565eca8","modified":1600600043293},{"_id":"source/_posts/vue3傻瓜式入门/1.png","hash":"22fb964c7e7c617cf0b933e53076035da81ebb7d","modified":1600599979145},{"_id":"source/_posts/vue3傻瓜式入门/16.png","hash":"335824c4a833514f4eba4c9479bb27553c4d3472","modified":1600600160789},{"_id":"source/_posts/vue3傻瓜式入门/19.png","hash":"452d40f5e223aef0a2ab19bfdd9f376631beabde","modified":1600600190324},{"_id":"source/_posts/vue3傻瓜式入门/17.png","hash":"469e7f4ee3113807edc5d6100838844fe6ab1661","modified":1600600167846},{"_id":"source/_posts/vue3傻瓜式入门/3.png","hash":"8cdb7c63b0dd5caff11f4604ff206f609f6de462","modified":1600599998013},{"_id":"source/_posts/vue3傻瓜式入门/5.png","hash":"080f14ffed66d276ea8a079ee999bdbf57f101ae","modified":1600600014547},{"_id":"source/_posts/vue3傻瓜式入门/18.png","hash":"c060358034457d182e8dc70679f7e2196b54c778","modified":1600600179859},{"_id":"source/_posts/vue3傻瓜式入门/4.png","hash":"635a720c80151093e25e5ff8b4310921280f68c3","modified":1600600006708},{"_id":"source/_posts/vue3傻瓜式入门/2.png","hash":"d910d061f6e272860141c3f2531e8b582fcc1802","modified":1600599987817},{"_id":"source/_posts/vue3傻瓜式入门/6.png","hash":"fdf47209f4267956489abdaa543dbe6e36e9f1e3","modified":1600600020515},{"_id":"source/_posts/vue3傻瓜式入门/20.png","hash":"8b36c876560f0a5acdec8c98b6609a8293d4cfe1","modified":1600600195262},{"_id":"source/_posts/vue3傻瓜式入门/8.png","hash":"42daabfc55acb29785d9ffef7b95a42457541fc6","modified":1600600030659},{"_id":"source/_posts/vue3傻瓜式入门/7.png","hash":"0c209e48457513a95000bc33cdf6003fe9e004bc","modified":1600600025818},{"_id":"source/_posts/vue3傻瓜式入门/9.png","hash":"439186efa5ff93f352b6283e96355ee43ad70494","modified":1600600038412},{"_id":"source/_posts/聊天室项目/聊天室数据库结构设计.png","hash":"7ee75e329ddd9e4fdba0e399338a30252f1f044b","modified":1600481806125},{"_id":"source/_posts/vue3傻瓜式入门/15.png","hash":"eee620c0de302fbecef117cb4de186c4488c7edb","modified":1600600080864},{"_id":"source/_posts/vue3傻瓜式入门/12.png","hash":"6a8e920b604222ea22c369d8c4d4467a21d56ce4","modified":1600600058097},{"_id":"source/_posts/vue3傻瓜式入门/14.png","hash":"f64969797e1c6195e86410cc9001c2d31a2ce42b","modified":1600600073126},{"_id":"themes/fluid/source/css/_pages/_category/category.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1600400171432},{"_id":"themes/fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1600400171436},{"_id":"themes/fluid/.editorconfig","hash":"b595159772f3ee1ef5e6780ce307270e741cb309","modified":1600400171313},{"_id":"themes/fluid/.gitattributes","hash":"3e00e1fb043438cd820d94ee3dc9ffb6718996f3","modified":1600400171323},{"_id":"themes/fluid/.eslintrc","hash":"3df89453e1f63051fafc90f16a8d83951050e316","modified":1600400171314},{"_id":"themes/fluid/_static_prefix.yml","hash":"55d3d882e209550bd2fefd240d1b3333a9eb65de","modified":1600400171342},{"_id":"themes/fluid/LICENSE","hash":"653274b0f005f82768a7e5e17a32d38bfe38d492","modified":1600400171338},{"_id":"themes/fluid/gulpfile.js","hash":"1ad8861ce4f702c164f908efb6c1c6504154ed2d","modified":1600400171344},{"_id":"themes/fluid/package.json","hash":"351b481bf476525dcf202e5ca02071a707b1f8cb","modified":1600400171391},{"_id":"themes/fluid/README.md","hash":"99cd0094d327ee659b2ccda5322ac9ad5f444588","modified":1600444216669},{"_id":"themes/fluid/languages/en.yml","hash":"31f2867619a768606166778d4ee51f3d00ac33a0","modified":1600400171345},{"_id":"themes/fluid/languages/ja.yml","hash":"dc43be11a300893ebef47283c22f2f946ca21260","modified":1600400171346},{"_id":"themes/fluid/_config.yml","hash":"7be3f6446d2d34082ecb7745f45d9505fa53efcd","modified":1600495252879},{"_id":"themes/fluid/languages/zh-CN.yml","hash":"3b92f4428d66c31610f6cde13b82ee723aff00d2","modified":1600400171347},{"_id":"themes/fluid/layout/404.ejs","hash":"79a598e43c40d48b23076361720f1e77df466e41","modified":1600400171348},{"_id":"themes/fluid/layout/about.ejs","hash":"3753755fcba5e25183b4a44ce27cf6f45f47d35f","modified":1600400171381},{"_id":"themes/fluid/layout/archive.ejs","hash":"df4510c4e6653803a35ab8bfaca60c2d7e2bb16e","modified":1600400171382},{"_id":"themes/fluid/layout/categories.ejs","hash":"0a8fe294cbbcc5112e360fcfdef5925fd39580bb","modified":1600400171383},{"_id":"themes/fluid/layout/index.ejs","hash":"421dffc2b9061e65fa9fbd7ae99e99789cde1317","modified":1600400171385},{"_id":"themes/fluid/layout/links.ejs","hash":"8efaa2ab9804df1b3f72b6940b47247eb7853b66","modified":1600400171387},{"_id":"themes/fluid/layout/tag.ejs","hash":"512b999d6ba6dc0ccc4617ad5f60ce024f81e62e","modified":1600400171389},{"_id":"themes/fluid/layout/layout.ejs","hash":"105004d9009e5c8719fb2cbc1cd38214b3144a26","modified":1600400171386},{"_id":"themes/fluid/layout/category.ejs","hash":"395ed0ef33d1e735e8597c12bb6e03fba1ff93e0","modified":1600400171384},{"_id":"themes/fluid/layout/tags.ejs","hash":"b7c1a6d8fc1097fc16d2300260297013cb692153","modified":1600400171391},{"_id":"themes/fluid/layout/page.ejs","hash":"9f4a66735082127fd0792ba747029212e63c90a1","modified":1600400171387},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"5f2fdc38c60bea3ec36efcb52ef5d1b1edc7e046","modified":1600400171324},{"_id":"themes/fluid/layout/post.ejs","hash":"b280341534453431f627af7ca12d3f1850294d94","modified":1600400171388},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"3bb59da264ea70f30cc8f2c9b8cee71a04e3dd78","modified":1600400171325},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question.md","hash":"102213e5d6790d060c0e26b4a3a7ec744d753c52","modified":1600400171335},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"a9d5164f9a7930d2561c58e7dbc3dba5b7b74747","modified":1600400171334},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"18381d03518526d7cefd024a0bdd8d9e7c6440f5","modified":1600400171335},{"_id":"themes/fluid/.github/workflows/limit.yaml","hash":"bdbdb66da69ab7353b546f02150a6792f4787975","modified":1600400171336},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"62dd795d0ff88804687427f00bb50ec06f5cbacd","modified":1600400171334},{"_id":"themes/fluid/layout/_partial/beian.ejs","hash":"072cd1b3dc44af65fdfb525da440b7af6a591d11","modified":1600400171349},{"_id":"themes/fluid/.github/workflows/lint.yaml","hash":"eed3050d5e6bc1d45337f9a8b1f3581199a9740e","modified":1600400171337},{"_id":"themes/fluid/layout/_partial/footer.ejs","hash":"a849269cde55088cec8442228274af29c761d6eb","modified":1600496362021},{"_id":"themes/fluid/layout/_partial/css.ejs","hash":"b9c0555d7afe8f7183caa732d2dd37ed5d95a960","modified":1600400171357},{"_id":"themes/fluid/layout/_partial/scripts.ejs","hash":"1bf18d5efba407e78ca14428590aa1ac4132533d","modified":1600400171375},{"_id":"themes/fluid/layout/_partial/head.ejs","hash":"97b70f35bdad06403764f13c39595725ef9d3f07","modified":1600400171358},{"_id":"themes/fluid/layout/_partial/nav.ejs","hash":"a2c16035ea5690882159f9df3a9ddb77ea74b4af","modified":1600400171359},{"_id":"themes/fluid/layout/_partial/search.ejs","hash":"bea21f1b5de61badd6c068080315c201fc80bc36","modified":1600400171378},{"_id":"themes/fluid/layout/_partial/statistics.ejs","hash":"a70c26e415a27f07f38b9384e7eb48d1f2b30328","modified":1600400171379},{"_id":"themes/fluid/layout/_partial/post-meta.ejs","hash":"6284a83f2afd90b1c77e90cdc64692923510cf3d","modified":1600400171374},{"_id":"themes/fluid/scripts/events/index.js","hash":"a889022b079541f0fa5833f018c98cf81f864e4f","modified":1600400171392},{"_id":"themes/fluid/layout/_partial/paginator.ejs","hash":"8191c630b3db4dd1dd8aad56defad93334a7b691","modified":1600400171361},{"_id":"themes/fluid/source/xml/local-search.xml","hash":"85fcc23b4db654a7f91fc55b6fb0442bb3ed3a9a","modified":1600400171457},{"_id":"themes/fluid/scripts/generators/local-search.js","hash":"bda7fbe58082a2a02c0db066794b791b14462271","modified":1600400171402},{"_id":"themes/fluid/scripts/filters/post-filter.js","hash":"cf6ff2a54d08ad8b3727dcdb7dd0b9fb744eecf9","modified":1600400171402},{"_id":"themes/fluid/scripts/generators/pages.js","hash":"0de7a2b51743be62beef6544e8368a2b930c4485","modified":1600400171403},{"_id":"themes/fluid/scripts/helpers/page.js","hash":"109ae26697f623a9fd1b1c2b20d50a2522037751","modified":1600400171404},{"_id":"themes/fluid/scripts/helpers/url.js","hash":"1664f8faa028898bd6f91d6db61c7dbf7463ee01","modified":1600400171405},{"_id":"themes/fluid/scripts/helpers/utils.js","hash":"4acb213f90f1e7ba3696ef08d894a2a84807b669","modified":1600400171406},{"_id":"themes/fluid/scripts/helpers/wordcount.js","hash":"da6144ee040fed0a9b9f45da3478bc33087b5ac9","modified":1600400171407},{"_id":"themes/fluid/scripts/tags/button.js","hash":"e1d0caed12e7cd9a35cf64272c41854b2901a58f","modified":1600400171408},{"_id":"themes/fluid/scripts/tags/checkbox.js","hash":"dac0e08eaa3614a6fd9ddbdfb4584094b1bdb30a","modified":1600400171409},{"_id":"themes/fluid/scripts/tags/group-image.js","hash":"cc176cc1d7e7cc28cedf8397ae748c691d140be2","modified":1600400171411},{"_id":"themes/fluid/layout/_partial/toc.ejs","hash":"a3f22d478aa18d376ab2de44a63271398e495c20","modified":1600400171380},{"_id":"themes/fluid/scripts/tags/label.js","hash":"6c5916d86c63795c7e910bf614b0e7ece5073702","modified":1600400171412},{"_id":"themes/fluid/scripts/tags/note.js","hash":"0410e9f982f19e71eb166da31e967a628dfbddcf","modified":1600400171413},{"_id":"themes/fluid/scripts/utils/join-path.js","hash":"ec068c699155565aea4aa4ab55d8a10b2947a114","modified":1600400171413},{"_id":"themes/fluid/scripts/utils/object.js","hash":"d07abe58481ab097fc4e5b9f573cdc46bce4bfec","modified":1600400171414},{"_id":"themes/fluid/source/css/main.styl","hash":"bf536db598434c36cc0c752196bfde46e584a92e","modified":1600400171439},{"_id":"themes/fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1600400171439},{"_id":"themes/fluid/source/img/favicon.png","hash":"7ac6cfc349403870b6f88fee59d6c63f6fa96c19","modified":1600505892626},{"_id":"themes/fluid/source/img/default.png","hash":"ab1625574d51c9d6b807c3be38175fd82ab74e75","modified":1600505978539},{"_id":"themes/fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1600400171442},{"_id":"themes/fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1600400171443},{"_id":"themes/fluid/source/js/debouncer.js","hash":"8833902327af7beac17ab97227fcd835329abfa2","modified":1600400171445},{"_id":"themes/fluid/source/js/clipboard-use.js","hash":"78cd93cd97e3eb497dc37e3c63029e4e248c90a5","modified":1600400171444},{"_id":"themes/fluid/source/js/color-schema.js","hash":"b8a5bc6a96e1be53f760e10c25633b4053e03f7b","modified":1600400171445},{"_id":"themes/fluid/source/js/lazyload.js","hash":"9d4c9b670f578f9d7179053d16a5e5f5c35022db","modified":1600400171454},{"_id":"themes/fluid/source/js/utils.js","hash":"7183cd026bdf4f85a77cd624ad27c7cbebee3674","modified":1600400171455},{"_id":"themes/fluid/source/js/local-search.js","hash":"bb899b1ddb2f3c2565d846def2f742ca15407cae","modified":1600400171454},{"_id":"themes/fluid/source/js/main.js","hash":"49139224530b05f12d6b28865321e791cd836844","modified":1600400171455},{"_id":"themes/fluid/layout/_partial/comments/changyan.ejs","hash":"ab12042aa68ee05942efec8fa7c7591c73d8c099","modified":1600400171350},{"_id":"themes/fluid/layout/_partial/comments/livere.ejs","hash":"4cdc718b8fde0cfa80849484cd75738b04706c7b","modified":1600400171353},{"_id":"themes/fluid/layout/_partial/comments/disqus.ejs","hash":"0ca6fd43abd822fe7bfad960bb596f0465412da0","modified":1600400171351},{"_id":"themes/fluid/layout/_partial/comments/gitalk.ejs","hash":"9a6b62378b4102e0bd4ad89461b8446fa55d01fd","modified":1600400171352},{"_id":"themes/fluid/layout/_partial/plugins/anchor.ejs","hash":"64321f2ab171d4750edee0413c5036549820e6d0","modified":1600400171363},{"_id":"themes/fluid/layout/_partial/comments/remark42.ejs","hash":"e8e1e305dd0cbd534d4eb46c92760a123ec5df61","modified":1600400171354},{"_id":"themes/fluid/layout/_partial/comments/valine.ejs","hash":"821ff3dd0d8b3c7bb19892eb186ff92ac9186fd6","modified":1600400171356},{"_id":"themes/fluid/layout/_partial/plugins/daovoice.ejs","hash":"804d12424d4c4ebbb26198865cc989ccb90e6a6a","modified":1600400171365},{"_id":"themes/fluid/layout/_partial/comments/utterances.ejs","hash":"356e84363a0c8dc3dfa241046bf7afa0f29926be","modified":1600400171355},{"_id":"themes/fluid/layout/_partial/plugins/fancybox.ejs","hash":"78b11d3506f71419d1e8b755cd97376046e88011","modified":1600400171366},{"_id":"themes/fluid/layout/_partial/plugins/aplayer.ejs","hash":"d43ece36655f3831960bbe8f0c920ea25ae03b10","modified":1600400171364},{"_id":"themes/fluid/layout/_partial/plugins/local-search.ejs","hash":"a12e81a59d95963102e9455b9430354f04b16f2a","modified":1600400171368},{"_id":"themes/fluid/layout/_partial/plugins/mermaid.ejs","hash":"fd1f78287c868ccab78b6244b66e3f9b0968c4a8","modified":1600400171370},{"_id":"themes/fluid/layout/_partial/plugins/leancloud.ejs","hash":"393fb6d61127975592b575707592050a8b0ea412","modified":1600400171367},{"_id":"themes/fluid/layout/_partial/plugins/analytics.ejs","hash":"d20f54bf2fd5cd274b4b9c5542eafbfec5120838","modified":1600400171362},{"_id":"themes/fluid/layout/_partial/plugins/typed.ejs","hash":"3741b0df043a804efcf61b9733b37a51748515d3","modified":1600400171373},{"_id":"themes/fluid/layout/_partial/plugins/mouse-click.ejs","hash":"80261b4d705bd0181b8570821df645149bb1b5f1","modified":1600400171371},{"_id":"themes/fluid/source/css/_functions/base.styl","hash":"171697018fd384fce0834875ca94b91f16564cac","modified":1600400171415},{"_id":"themes/fluid/source/css/_variables/base.styl","hash":"0df0b6871037209b4c2dd2090f5198e679afbff6","modified":1600400171438},{"_id":"themes/fluid/source/css/_mixins/base.styl","hash":"046979dbd8cdabd21d89f9c1d8f1bb3f2fd06d6f","modified":1600400171416},{"_id":"themes/fluid/scripts/events/lib/footnote.js","hash":"13d8466cd4c98367131b5f3d6a30b3d4ce8de26f","modified":1600400171394},{"_id":"themes/fluid/layout/_partial/plugins/math.ejs","hash":"a49a0064b55cf6d8f2a61abfecd41f0083757e04","modified":1600400171369},{"_id":"themes/fluid/scripts/events/lib/highlight.js","hash":"1f7d9d90ad8bf3ef75c5d1a5a7d7aff6bb68a95d","modified":1600400171397},{"_id":"themes/fluid/source/css/_pages/pages.styl","hash":"92c062cf55457b6549497244d09ec34e9c0c95c2","modified":1600400171437},{"_id":"themes/fluid/scripts/events/lib/lazyload.js","hash":"a0392ed82014eed8ff4e4f0fc0d01fde5e689a12","modified":1600400171398},{"_id":"themes/fluid/layout/_partial/plugins/tocjs.ejs","hash":"8e30fbc54ca99f1d1730cb21a86cf3fb08ed0351","modified":1600400171372},{"_id":"themes/fluid/scripts/events/lib/merge-configs.js","hash":"ab241f5912945a4f116e8181b87e1d97388e39df","modified":1600400171399},{"_id":"themes/fluid/scripts/events/lib/preset-configs.js","hash":"51c8115564f3754f8c5635acb3a6d585f8efaef8","modified":1600400171400},{"_id":"themes/fluid/scripts/events/lib/version.js","hash":"1d5a3a8cbf970d9d1a28a7ae9b935cc1b7afbeff","modified":1600400171401},{"_id":"themes/fluid/scripts/events/lib/hello.js","hash":"6dba541e1539d038e658050b0f0384e37af45e3f","modified":1600400171396},{"_id":"themes/fluid/source/lib/hint/hint.min.css","hash":"64fa8c328dc93432ec822de2818aef21a4f63b29","modified":1600400171456},{"_id":"themes/fluid/source/css/_pages/_about/about.styl","hash":"47235d222812e2f829e9bde039fa719bbced9325","modified":1600400171417},{"_id":"themes/fluid/source/css/_pages/_category/categories.styl","hash":"0924e35eff2ec84e2d9e4772abccda452d9463ef","modified":1600400171432},{"_id":"themes/fluid/source/css/_pages/_base/base.styl","hash":"574a9c64f071d938a31a768451aad64b2999a1d6","modified":1600400171427},{"_id":"themes/fluid/source/css/_pages/_base/color-schema.styl","hash":"615d35d4d73f1efe114add257eb7c600571029ad","modified":1600400171428},{"_id":"themes/fluid/source/css/_pages/_base/inline.styl","hash":"c98c4be12ae65b5db335527509e89af6d1451dbd","modified":1600400171429},{"_id":"themes/fluid/source/css/_pages/_archive/archive.styl","hash":"86926a80bf6f39a7f47789b1a8f44b5984b4683f","modified":1600400171418},{"_id":"themes/fluid/source/css/_pages/_base/rewrite.styl","hash":"eb06a88bbda5fbfa7d3612a5a2f20ff941ace26b","modified":1600400171431},{"_id":"themes/fluid/source/css/_pages/_base/keyframes.styl","hash":"58a7f8f2baea2d58cf5f7edfc91314ee5d7156ca","modified":1600400171430},{"_id":"themes/fluid/source/css/_pages/_index/index.styl","hash":"7936e86324d014639bbbda9938e7843943aea743","modified":1600400171433},{"_id":"themes/fluid/source/css/_pages/_links/links.styl","hash":"83694b28209c548ef38bee78e473b02e90cbcf9f","modified":1600400171434},{"_id":"themes/fluid/source/css/_pages/_post/tag_plugin.styl","hash":"81daa88456f7bc9053b08ec667b3b0ca82565059","modified":1600400171435},{"_id":"themes/fluid/source/css/_pages/_tag/tags.styl","hash":"29e9b72cfda2f2baf9cf2597fcd7f9e66303a9bd","modified":1600400171436},{"_id":"themes/fluid/source/css/_pages/_post/post.styl","hash":"4371cea66bc2c08fdf38e7eac99544f0160f688d","modified":1600400171435},{"_id":"themes/fluid/source/css/_pages/_base/_widget/board.styl","hash":"bb9cdde191b9b1287ba19414bab862f30be6a8a0","modified":1600400171420},{"_id":"themes/fluid/source/css/_pages/_base/_widget/banner.styl","hash":"e05e5eafd21d3332cccf5dfe72334eef320cd466","modified":1600400171419},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footer.styl","hash":"5b38b485dc3e683aa1d227797412ba41e52b934a","modified":1600400171421},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"41935973a66c14ab2bea0539d4b1f15c62534fa4","modified":1600400171422},{"_id":"themes/fluid/source/css/_pages/_base/_widget/copy-btn.styl","hash":"fd44a4da774afc00fd49638a9fe6b9d925e52810","modified":1600400171421},{"_id":"themes/fluid/source/css/_pages/_base/_widget/header.styl","hash":"64a2c98711b1765a7d8eb99f9e3cd0b9b0673f40","modified":1600400171423},{"_id":"themes/fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"1c78485de1008738bf9063826120faeb8abcead4","modified":1600400171424},{"_id":"themes/fluid/source/css/_pages/_base/_widget/search.styl","hash":"1f4e678d7219815ab62de1b92ec75e021247f90b","modified":1600400171425},{"_id":"themes/fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"35aab570a2de59d4ec8ddf679fb47040c95229d6","modified":1600400171424},{"_id":"source/_posts/vue3傻瓜式入门/13.png","hash":"481af9aeab5b7a71a2c460ff8ced6864b5b7fad9","modified":1600600065536},{"_id":"public/local-search.xml","hash":"faf2b2d0f520ea3f81c1b6fb645bfcf583072b91","modified":1600782725354},{"_id":"public/about/index.html","hash":"8f76d33dd75f325d03d3ae360aa7b7c4d7e7cd8f","modified":1600782725354},{"_id":"public/2020/09/18/first/index.html","hash":"ceb9ccd687e5dde561c376191e02ee624ec2ddb2","modified":1600782725354},{"_id":"public/2020/09/19/聊天室项目/index.html","hash":"7d7ab512078a32c204990dc027df835f73fac65a","modified":1600782725354},{"_id":"public/archives/index.html","hash":"c9c6e82192ff6cb2212cc644652f44004da6faf8","modified":1600782725354},{"_id":"public/archives/2020/index.html","hash":"c9c6e82192ff6cb2212cc644652f44004da6faf8","modified":1600782725354},{"_id":"public/archives/2020/09/index.html","hash":"c9c6e82192ff6cb2212cc644652f44004da6faf8","modified":1600782725354},{"_id":"public/index.html","hash":"6de60e5709420c3fe980866ed8c6c47c38f326d2","modified":1600782725354},{"_id":"public/tags/program/index.html","hash":"92b5ef19d9de79195dd5eea4632a6f9170e6ab38","modified":1600782725354},{"_id":"public/tags/essay/index.html","hash":"3ac74ef6425965a3df3a5ad007c6c8fdacf51159","modified":1600782725354},{"_id":"public/tags/index.html","hash":"2b0648a27d3f565f265c74586019410189607a6a","modified":1600782725354},{"_id":"public/404.html","hash":"e4a5929c8dd3ce7009d5f595bf8d39700c875c9f","modified":1600782725354},{"_id":"public/tags/useful/index.html","hash":"f77b9e2e8599923344070ff2b57127e0c36c75b6","modified":1600782725354},{"_id":"public/categories/index.html","hash":"790cd0a1b0f7a540b9bf0ae9cd27ab332707f9a9","modified":1600782725354},{"_id":"public/2020/09/22/32个js问题/index.html","hash":"ee8dd0568665ba78459f95cb7f19658bc774f73d","modified":1600782725354},{"_id":"public/2020/09/21/excel常用公式/index.html","hash":"f239b4e13eada3c05ca0f8beb09f7fd33b814473","modified":1600782725354},{"_id":"public/2020/09/20/a/index.html","hash":"00b27f59fd5c8dbde162decb60f0cb12d6b07c1d","modified":1600782725354},{"_id":"public/links/index.html","hash":"95b042d77825dfea198acf2c7b1df7ac828ee7a3","modified":1600782725354},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1600782725354},{"_id":"public/xml/local-search.xml","hash":"85fcc23b4db654a7f91fc55b6fb0442bb3ed3a9a","modified":1600782725354},{"_id":"public/img/default.png","hash":"ab1625574d51c9d6b807c3be38175fd82ab74e75","modified":1600782725354},{"_id":"public/img/favicon.png","hash":"7ac6cfc349403870b6f88fee59d6c63f6fa96c19","modified":1600782725354},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1600782725354},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1600782725354},{"_id":"public/2020/09/19/聊天室项目/聊天室数据库结构设计.png","hash":"7ee75e329ddd9e4fdba0e399338a30252f1f044b","modified":1600782725354},{"_id":"public/js/debouncer.js","hash":"045f324777bdfb99d4c17b1806169f029f897a65","modified":1600782725354},{"_id":"public/js/color-schema.js","hash":"03d5315b752cd3e13749cca790783a1e1cfab0a8","modified":1600782725354},{"_id":"public/js/lazyload.js","hash":"792deca48c12512d3e612f0de092ffcff3ca3e34","modified":1600782725354},{"_id":"public/js/clipboard-use.js","hash":"f0ffe3df1deeb3cc36adfee2ab839368fb28d1c9","modified":1600782725354},{"_id":"public/js/utils.js","hash":"9b06e2e2a2bb92e27d15a700f28f880317c25cfa","modified":1600782725354},{"_id":"public/js/local-search.js","hash":"13d5ef2fe68c49bd6096781034dbb26c190b5176","modified":1600782725354},{"_id":"public/js/main.js","hash":"a6def6368d288892088f78fd401e7170e3e81a13","modified":1600782725354},{"_id":"public/lib/hint/hint.min.css","hash":"b38df228460ebfb4c0b6085336ee2878fe85aafe","modified":1600782725354},{"_id":"public/css/main.css","hash":"e0ae8bb467a0130d91334051cdd930d95c353537","modified":1600782725354}],"Category":[],"Data":[],"Page":[{"title":"about","date":"2020-09-18T14:54:29.000Z","layout":"about","_content":"github：https://github.com/JackLfind/JackLfind.github.io\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2020-09-18 22:54:29\nlayout: about\n---\ngithub：https://github.com/JackLfind/JackLfind.github.io\n","updated":"2020-09-18T14:55:48.074Z","path":"about/index.html","comments":1,"_id":"ckfe0pci600000wurhunkbg4k","content":"<p>github：<a href=\"https://github.com/JackLfind/JackLfind.github.io\">https://github.com/JackLfind/JackLfind.github.io</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>github：<a href=\"https://github.com/JackLfind/JackLfind.github.io\">https://github.com/JackLfind/JackLfind.github.io</a></p>\n"}],"Post":[{"layout":"post","title":"excel常用公式","date":"2020-09-21T12:18:49.000Z","_content":"1、IF函数条件判断\nIF函数是最常用的判断类函数之一，能完成非此即彼的判断。\n如下图，考核得分的标准为9分，要判断B列的考核成绩是否合格。\n=IF(B4>=9,\"合格\",\"不合格\")\n\nIF，相当于普通话的“如果”，常规用法是：\nIF(判断的条件,符合条件时的结果,不符合条件时的结果)\n\n2、多条件判断\n如下图所示，如果部门为生产、岗位为主操 有高温补助。在D列使用公式：\n=IF(AND(B2=\"生产\",C2=\"主操\"),\"有\",\"无\")\n\nAND函数对两个条件判断，如果同时符合，IF函数返回“有”，否则为无。\n\n3、条件求和\n如下图所示，使用SUMIF函数计算一班的总成绩：\n=SUMIF(D2:D5,F2,C2:C5)\n\nSUMIF用法是：\n=SUMIF(条件区域,指定的求和条件,求和的区域)\n用通俗的话描述就是：\n如果D2:D5区域的班级等于F2单元格的“一班”，就对C2:C5单元格对应的区域求和。\n\n4、多条件求和\n如下图所示，要统计部门为生产,并且岗位为主操的补助总额。\n公式为：\n=SUMIFS(D2:D9,B2:B9,F2,C2:C9,G2)\n\nSUMIFS用法是：\n=SUMIFS(求和的区域，条件区域1,指定的求和条件1,条件区域2,指定的求和条件2,……)\n\n5、条件计数\n如下图，要统计指定店铺的业务笔数。也就是统计B列中有多少个指定的店铺名称。\n=COUNTIF(B2:B12,E3)\n\nCOUNTIF函数统计条件区域中，符合指定条件的单元格个数。常规用法为：\n=COUNTIF(条件区域,指定条件)\n\n6、多条件计数\n要求：统计统计部门为生产,并且岗位为主操的人数\n公式为：\n=COUNTIFS(B2:B9,F2,C2:C9,G2)\n\nCOUNTIFS函数统计条件区域中，符合多个指定条件的单元格个数。常规用法为：\n=COUNTIFS(条件区域1,指定条件1,条件区域2,指定条件2……)\n\n7、条件查找\nVLOOKUP函数一直是大众情人般的存在，函数的语法为：\nVLOOKUP(要找谁,在哪儿找,返回第几列的内容,精确找还是近似找)\n如下图，要查询F5单元格中的员工姓名是什么职务。\n=VLOOKUP($F$5,$B$1:$D$10,2,0)\n\n使用该函数时，需要注意以下几点：\n1、第4参数一般用0（或FASLE）以精确匹配方式进行查找。\n2、第3参数中的列号，不能理解为工作表中实际的列号，而是指定返回值在查找范围中的第几列。\n3、如果查找值与数据区域关键字的数据类型不一致，会返回错误值#N/A。\n4、查找值必须位于查询区域中的第一列。\n\n8、多条件查找\n如下图所示，要求查询部门为生产,并且岗位为部长的姓名。\n公式为：\n=LOOKUP(1,0/((B2:B9=F2)*(C2:C9=G2)),A2:A9)\n\nLOOKUP函数多条件查询写法为：\n=LOOKUP(1,0/((条件区域1=条件1)*(条件区域2=条件2)),查询区域)\n\n9、计算文本算式\n如下图，要计算单元格中的文本算式，先单击第一个要输入公式的单元格，定义名称 ：\n计算 = EVALUATE(C2)\n然后在单元格中输入公式：\n=计算\n\n\n10、合并多个单元格内容\n要连接合并多个单元格中的内容，可以使用&符号完成。如下图，要合并A列的姓名和B列的电话号码，可以使用公式：\n=A2&B$1&B2\n\n\n11、合并带格式的单元格内容\n合并带有格式的内容时，Excel默认按常规格式进行合并，但是如果是日期、时间或是其他有格式的数值，结果就会让人大失所望了：\n\n如何才能正确连接出需要的字符串呢？其实很简单，C2公式为：\n=A2&TEXT(B2,\" y年m月d日\")\n\n首先使用TEXT函数，把B列的日期变成具有特定样式的字符串，然后再与A列的姓名连接，就变成了最终需要的样式。\n\n12、比较大小写的单词是否相同\n如果在A1和A2单元格中分别输入大小写的单词，使用以下公式判断时，Excel会默认二者是相同的：\n=A2=B2\n\n如需区别大小写，可以使用公式：\n=EXACT(A2,B2)\nEXACT函数 区分大小写，但忽略格式上的差异。\n\n13、提取混合内容中的姓名\n如下图，要从A列姓名电话中提取出姓名，除了使用高版本的自动填充功能，还可以使用公式完成：\n=LEFT(A2,LENB(A2)-LEN(A2))\n\nLENB函数将每个汉字（双字节字符）的字符数按2计数，LEN函数则对所有的字符都按1计数。因此“LENB(A2)-LEN(A2)”返回的结果就是文本字符串中的汉字个数。\nLEFT函数从文本字符串的第一个字符开始，返回指定个数的字符，最终提取出员工姓名。\n\n14、根据身份证号码提取出生年月\n计算公式为：\n=1*TEXT(MID(B2,7,8),\"0-00-00\")\n\n首先使用MID函数从B2单元格的第7位开始，提取出表示出生年月的8个字符，结果为：\n\"19780215\"\n再使用TEXT函数将字符串转换为日期样式：\n\"1978-02-15\"\n然后通过*1计算，将其转换为真正的日期。最后设置为日期格式即可。\n\n15、替换部分电话号码\n如下图所示，要将手机号码的中间四位换成星号，公式为：\n=SUBSTITUTE(B2,MID(B2,4,4),\"****\",1)\n\nSUBSTITUTE函数的用法是：\nSUBSTITUTE(要替换的文本,旧文本,新文本,[替换第几个])\n先使用MID函数取得B列号码中的中间4位，再用“*****”替换掉这部分内容。\n最后一个参数使用1，表示只替换第一次出现的内容。比如第九行的电话号码是13801010101，最后四位和中间四位相同，如果不指定1，就会全部替换掉了。\n\n16、屏蔽函数公式返回的错误值\n在使用函数公式过程中，经常会返回一些诸如#N/A、#NAME?之类的错误值，要屏蔽这些错误值其实很简单，只需在原公式外侧加上一个IFERROR函数就好。\nIFERROR函数的用法为：\n=IFERROR(原公式,出现错误时要返回的内容)\n如果公式正确，就返回原有计算结果，如果公式返回的是错误值，就返回用户指定的显示内容。\n\n17、四舍五入函数\nROUND函数这个想必大家经常用到吧，就是对数值按指定的位数四舍五入。比如：\n=ROUND(8/9,3)\n就是将8/9的计算结果四舍五入到三位小数，结果为0.889。\n\n18、取整的间隔小时数\n计算两个时间的间隔小时数，不足一小时部分舍去，计算加班时经常会用到，说多了都是泪……\n=TEXT(B2-B1,\"[h]\")\n\n\n19、提取日期时间中的日期值\n要从日期时间数据中提取出日期，可以使用以下公式：\n=INT(A2)\n要继续提取时间，只需要做个减法，就欧了：\n\n\n20、生成随机数\nRANDBETWEEN能够在指定范围内生成一组随机数据，对于广大质检、监理、统计人员来说，这的确是一个伟大的函数。\n函数的用法是：\n=RANDBETWEEN(数字下限,数字上限)\n比如以下公式，就是生成60到100之间的随机数：\n=RANDBETWEEN(60,100)\n","source":"_posts/excel常用公式.md","raw":"---\nlayout:\n  - post\ntitle: excel常用公式\ndate: 2020-09-21 20:18:49\ntags: useful\n---\n1、IF函数条件判断\nIF函数是最常用的判断类函数之一，能完成非此即彼的判断。\n如下图，考核得分的标准为9分，要判断B列的考核成绩是否合格。\n=IF(B4>=9,\"合格\",\"不合格\")\n\nIF，相当于普通话的“如果”，常规用法是：\nIF(判断的条件,符合条件时的结果,不符合条件时的结果)\n\n2、多条件判断\n如下图所示，如果部门为生产、岗位为主操 有高温补助。在D列使用公式：\n=IF(AND(B2=\"生产\",C2=\"主操\"),\"有\",\"无\")\n\nAND函数对两个条件判断，如果同时符合，IF函数返回“有”，否则为无。\n\n3、条件求和\n如下图所示，使用SUMIF函数计算一班的总成绩：\n=SUMIF(D2:D5,F2,C2:C5)\n\nSUMIF用法是：\n=SUMIF(条件区域,指定的求和条件,求和的区域)\n用通俗的话描述就是：\n如果D2:D5区域的班级等于F2单元格的“一班”，就对C2:C5单元格对应的区域求和。\n\n4、多条件求和\n如下图所示，要统计部门为生产,并且岗位为主操的补助总额。\n公式为：\n=SUMIFS(D2:D9,B2:B9,F2,C2:C9,G2)\n\nSUMIFS用法是：\n=SUMIFS(求和的区域，条件区域1,指定的求和条件1,条件区域2,指定的求和条件2,……)\n\n5、条件计数\n如下图，要统计指定店铺的业务笔数。也就是统计B列中有多少个指定的店铺名称。\n=COUNTIF(B2:B12,E3)\n\nCOUNTIF函数统计条件区域中，符合指定条件的单元格个数。常规用法为：\n=COUNTIF(条件区域,指定条件)\n\n6、多条件计数\n要求：统计统计部门为生产,并且岗位为主操的人数\n公式为：\n=COUNTIFS(B2:B9,F2,C2:C9,G2)\n\nCOUNTIFS函数统计条件区域中，符合多个指定条件的单元格个数。常规用法为：\n=COUNTIFS(条件区域1,指定条件1,条件区域2,指定条件2……)\n\n7、条件查找\nVLOOKUP函数一直是大众情人般的存在，函数的语法为：\nVLOOKUP(要找谁,在哪儿找,返回第几列的内容,精确找还是近似找)\n如下图，要查询F5单元格中的员工姓名是什么职务。\n=VLOOKUP($F$5,$B$1:$D$10,2,0)\n\n使用该函数时，需要注意以下几点：\n1、第4参数一般用0（或FASLE）以精确匹配方式进行查找。\n2、第3参数中的列号，不能理解为工作表中实际的列号，而是指定返回值在查找范围中的第几列。\n3、如果查找值与数据区域关键字的数据类型不一致，会返回错误值#N/A。\n4、查找值必须位于查询区域中的第一列。\n\n8、多条件查找\n如下图所示，要求查询部门为生产,并且岗位为部长的姓名。\n公式为：\n=LOOKUP(1,0/((B2:B9=F2)*(C2:C9=G2)),A2:A9)\n\nLOOKUP函数多条件查询写法为：\n=LOOKUP(1,0/((条件区域1=条件1)*(条件区域2=条件2)),查询区域)\n\n9、计算文本算式\n如下图，要计算单元格中的文本算式，先单击第一个要输入公式的单元格，定义名称 ：\n计算 = EVALUATE(C2)\n然后在单元格中输入公式：\n=计算\n\n\n10、合并多个单元格内容\n要连接合并多个单元格中的内容，可以使用&符号完成。如下图，要合并A列的姓名和B列的电话号码，可以使用公式：\n=A2&B$1&B2\n\n\n11、合并带格式的单元格内容\n合并带有格式的内容时，Excel默认按常规格式进行合并，但是如果是日期、时间或是其他有格式的数值，结果就会让人大失所望了：\n\n如何才能正确连接出需要的字符串呢？其实很简单，C2公式为：\n=A2&TEXT(B2,\" y年m月d日\")\n\n首先使用TEXT函数，把B列的日期变成具有特定样式的字符串，然后再与A列的姓名连接，就变成了最终需要的样式。\n\n12、比较大小写的单词是否相同\n如果在A1和A2单元格中分别输入大小写的单词，使用以下公式判断时，Excel会默认二者是相同的：\n=A2=B2\n\n如需区别大小写，可以使用公式：\n=EXACT(A2,B2)\nEXACT函数 区分大小写，但忽略格式上的差异。\n\n13、提取混合内容中的姓名\n如下图，要从A列姓名电话中提取出姓名，除了使用高版本的自动填充功能，还可以使用公式完成：\n=LEFT(A2,LENB(A2)-LEN(A2))\n\nLENB函数将每个汉字（双字节字符）的字符数按2计数，LEN函数则对所有的字符都按1计数。因此“LENB(A2)-LEN(A2)”返回的结果就是文本字符串中的汉字个数。\nLEFT函数从文本字符串的第一个字符开始，返回指定个数的字符，最终提取出员工姓名。\n\n14、根据身份证号码提取出生年月\n计算公式为：\n=1*TEXT(MID(B2,7,8),\"0-00-00\")\n\n首先使用MID函数从B2单元格的第7位开始，提取出表示出生年月的8个字符，结果为：\n\"19780215\"\n再使用TEXT函数将字符串转换为日期样式：\n\"1978-02-15\"\n然后通过*1计算，将其转换为真正的日期。最后设置为日期格式即可。\n\n15、替换部分电话号码\n如下图所示，要将手机号码的中间四位换成星号，公式为：\n=SUBSTITUTE(B2,MID(B2,4,4),\"****\",1)\n\nSUBSTITUTE函数的用法是：\nSUBSTITUTE(要替换的文本,旧文本,新文本,[替换第几个])\n先使用MID函数取得B列号码中的中间4位，再用“*****”替换掉这部分内容。\n最后一个参数使用1，表示只替换第一次出现的内容。比如第九行的电话号码是13801010101，最后四位和中间四位相同，如果不指定1，就会全部替换掉了。\n\n16、屏蔽函数公式返回的错误值\n在使用函数公式过程中，经常会返回一些诸如#N/A、#NAME?之类的错误值，要屏蔽这些错误值其实很简单，只需在原公式外侧加上一个IFERROR函数就好。\nIFERROR函数的用法为：\n=IFERROR(原公式,出现错误时要返回的内容)\n如果公式正确，就返回原有计算结果，如果公式返回的是错误值，就返回用户指定的显示内容。\n\n17、四舍五入函数\nROUND函数这个想必大家经常用到吧，就是对数值按指定的位数四舍五入。比如：\n=ROUND(8/9,3)\n就是将8/9的计算结果四舍五入到三位小数，结果为0.889。\n\n18、取整的间隔小时数\n计算两个时间的间隔小时数，不足一小时部分舍去，计算加班时经常会用到，说多了都是泪……\n=TEXT(B2-B1,\"[h]\")\n\n\n19、提取日期时间中的日期值\n要从日期时间数据中提取出日期，可以使用以下公式：\n=INT(A2)\n要继续提取时间，只需要做个减法，就欧了：\n\n\n20、生成随机数\nRANDBETWEEN能够在指定范围内生成一组随机数据，对于广大质检、监理、统计人员来说，这的确是一个伟大的函数。\n函数的用法是：\n=RANDBETWEEN(数字下限,数字上限)\n比如以下公式，就是生成60到100之间的随机数：\n=RANDBETWEEN(60,100)\n","slug":"excel常用公式","published":1,"updated":"2020-09-21T14:11:57.114Z","comments":1,"photos":[],"link":"","_id":"ckfe0pcie00010wurbeh2g4w5","content":"<p>1、IF函数条件判断<br>IF函数是最常用的判断类函数之一，能完成非此即彼的判断。<br>如下图，考核得分的标准为9分，要判断B列的考核成绩是否合格。<br>=IF(B4&gt;=9,”合格”,”不合格”)</p>\n<p>IF，相当于普通话的“如果”，常规用法是：<br>IF(判断的条件,符合条件时的结果,不符合条件时的结果)</p>\n<p>2、多条件判断<br>如下图所示，如果部门为生产、岗位为主操 有高温补助。在D列使用公式：<br>=IF(AND(B2=”生产”,C2=”主操”),”有”,”无”)</p>\n<p>AND函数对两个条件判断，如果同时符合，IF函数返回“有”，否则为无。</p>\n<p>3、条件求和<br>如下图所示，使用SUMIF函数计算一班的总成绩：<br>=SUMIF(D2:D5,F2,C2:C5)</p>\n<p>SUMIF用法是：<br>=SUMIF(条件区域,指定的求和条件,求和的区域)<br>用通俗的话描述就是：<br>如果D2:D5区域的班级等于F2单元格的“一班”，就对C2:C5单元格对应的区域求和。</p>\n<p>4、多条件求和<br>如下图所示，要统计部门为生产,并且岗位为主操的补助总额。<br>公式为：<br>=SUMIFS(D2:D9,B2:B9,F2,C2:C9,G2)</p>\n<p>SUMIFS用法是：<br>=SUMIFS(求和的区域，条件区域1,指定的求和条件1,条件区域2,指定的求和条件2,……)</p>\n<p>5、条件计数<br>如下图，要统计指定店铺的业务笔数。也就是统计B列中有多少个指定的店铺名称。<br>=COUNTIF(B2:B12,E3)</p>\n<p>COUNTIF函数统计条件区域中，符合指定条件的单元格个数。常规用法为：<br>=COUNTIF(条件区域,指定条件)</p>\n<p>6、多条件计数<br>要求：统计统计部门为生产,并且岗位为主操的人数<br>公式为：<br>=COUNTIFS(B2:B9,F2,C2:C9,G2)</p>\n<p>COUNTIFS函数统计条件区域中，符合多个指定条件的单元格个数。常规用法为：<br>=COUNTIFS(条件区域1,指定条件1,条件区域2,指定条件2……)</p>\n<p>7、条件查找<br>VLOOKUP函数一直是大众情人般的存在，函数的语法为：<br>VLOOKUP(要找谁,在哪儿找,返回第几列的内容,精确找还是近似找)<br>如下图，要查询F5单元格中的员工姓名是什么职务。<br>=VLOOKUP($F$5,$B$1:$D$10,2,0)</p>\n<p>使用该函数时，需要注意以下几点：<br>1、第4参数一般用0（或FASLE）以精确匹配方式进行查找。<br>2、第3参数中的列号，不能理解为工作表中实际的列号，而是指定返回值在查找范围中的第几列。<br>3、如果查找值与数据区域关键字的数据类型不一致，会返回错误值#N/A。<br>4、查找值必须位于查询区域中的第一列。</p>\n<p>8、多条件查找<br>如下图所示，要求查询部门为生产,并且岗位为部长的姓名。<br>公式为：<br>=LOOKUP(1,0/((B2:B9=F2)*(C2:C9=G2)),A2:A9)</p>\n<p>LOOKUP函数多条件查询写法为：<br>=LOOKUP(1,0/((条件区域1=条件1)*(条件区域2=条件2)),查询区域)</p>\n<p>9、计算文本算式<br>如下图，要计算单元格中的文本算式，先单击第一个要输入公式的单元格，定义名称 ：<br>计算 = EVALUATE(C2)<br>然后在单元格中输入公式：<br>=计算</p>\n<p>10、合并多个单元格内容<br>要连接合并多个单元格中的内容，可以使用&amp;符号完成。如下图，要合并A列的姓名和B列的电话号码，可以使用公式：<br>=A2&amp;B$1&amp;B2</p>\n<p>11、合并带格式的单元格内容<br>合并带有格式的内容时，Excel默认按常规格式进行合并，但是如果是日期、时间或是其他有格式的数值，结果就会让人大失所望了：</p>\n<p>如何才能正确连接出需要的字符串呢？其实很简单，C2公式为：<br>=A2&amp;TEXT(B2,” y年m月d日”)</p>\n<p>首先使用TEXT函数，把B列的日期变成具有特定样式的字符串，然后再与A列的姓名连接，就变成了最终需要的样式。</p>\n<p>12、比较大小写的单词是否相同<br>如果在A1和A2单元格中分别输入大小写的单词，使用以下公式判断时，Excel会默认二者是相同的：<br>=A2=B2</p>\n<p>如需区别大小写，可以使用公式：<br>=EXACT(A2,B2)<br>EXACT函数 区分大小写，但忽略格式上的差异。</p>\n<p>13、提取混合内容中的姓名<br>如下图，要从A列姓名电话中提取出姓名，除了使用高版本的自动填充功能，还可以使用公式完成：<br>=LEFT(A2,LENB(A2)-LEN(A2))</p>\n<p>LENB函数将每个汉字（双字节字符）的字符数按2计数，LEN函数则对所有的字符都按1计数。因此“LENB(A2)-LEN(A2)”返回的结果就是文本字符串中的汉字个数。<br>LEFT函数从文本字符串的第一个字符开始，返回指定个数的字符，最终提取出员工姓名。</p>\n<p>14、根据身份证号码提取出生年月<br>计算公式为：<br>=1*TEXT(MID(B2,7,8),”0-00-00”)</p>\n<p>首先使用MID函数从B2单元格的第7位开始，提取出表示出生年月的8个字符，结果为：<br>“19780215”<br>再使用TEXT函数将字符串转换为日期样式：<br>“1978-02-15”<br>然后通过*1计算，将其转换为真正的日期。最后设置为日期格式即可。</p>\n<p>15、替换部分电话号码<br>如下图所示，要将手机号码的中间四位换成星号，公式为：<br>=SUBSTITUTE(B2,MID(B2,4,4),”****”,1)</p>\n<p>SUBSTITUTE函数的用法是：<br>SUBSTITUTE(要替换的文本,旧文本,新文本,[替换第几个])<br>先使用MID函数取得B列号码中的中间4位，再用“*****”替换掉这部分内容。<br>最后一个参数使用1，表示只替换第一次出现的内容。比如第九行的电话号码是13801010101，最后四位和中间四位相同，如果不指定1，就会全部替换掉了。</p>\n<p>16、屏蔽函数公式返回的错误值<br>在使用函数公式过程中，经常会返回一些诸如#N/A、#NAME?之类的错误值，要屏蔽这些错误值其实很简单，只需在原公式外侧加上一个IFERROR函数就好。<br>IFERROR函数的用法为：<br>=IFERROR(原公式,出现错误时要返回的内容)<br>如果公式正确，就返回原有计算结果，如果公式返回的是错误值，就返回用户指定的显示内容。</p>\n<p>17、四舍五入函数<br>ROUND函数这个想必大家经常用到吧，就是对数值按指定的位数四舍五入。比如：<br>=ROUND(8/9,3)<br>就是将8/9的计算结果四舍五入到三位小数，结果为0.889。</p>\n<p>18、取整的间隔小时数<br>计算两个时间的间隔小时数，不足一小时部分舍去，计算加班时经常会用到，说多了都是泪……<br>=TEXT(B2-B1,”[h]”)</p>\n<p>19、提取日期时间中的日期值<br>要从日期时间数据中提取出日期，可以使用以下公式：<br>=INT(A2)<br>要继续提取时间，只需要做个减法，就欧了：</p>\n<p>20、生成随机数<br>RANDBETWEEN能够在指定范围内生成一组随机数据，对于广大质检、监理、统计人员来说，这的确是一个伟大的函数。<br>函数的用法是：<br>=RANDBETWEEN(数字下限,数字上限)<br>比如以下公式，就是生成60到100之间的随机数：<br>=RANDBETWEEN(60,100)</p>\n","site":{"data":{}},"excerpt":"","more":"<p>1、IF函数条件判断<br>IF函数是最常用的判断类函数之一，能完成非此即彼的判断。<br>如下图，考核得分的标准为9分，要判断B列的考核成绩是否合格。<br>=IF(B4&gt;=9,”合格”,”不合格”)</p>\n<p>IF，相当于普通话的“如果”，常规用法是：<br>IF(判断的条件,符合条件时的结果,不符合条件时的结果)</p>\n<p>2、多条件判断<br>如下图所示，如果部门为生产、岗位为主操 有高温补助。在D列使用公式：<br>=IF(AND(B2=”生产”,C2=”主操”),”有”,”无”)</p>\n<p>AND函数对两个条件判断，如果同时符合，IF函数返回“有”，否则为无。</p>\n<p>3、条件求和<br>如下图所示，使用SUMIF函数计算一班的总成绩：<br>=SUMIF(D2:D5,F2,C2:C5)</p>\n<p>SUMIF用法是：<br>=SUMIF(条件区域,指定的求和条件,求和的区域)<br>用通俗的话描述就是：<br>如果D2:D5区域的班级等于F2单元格的“一班”，就对C2:C5单元格对应的区域求和。</p>\n<p>4、多条件求和<br>如下图所示，要统计部门为生产,并且岗位为主操的补助总额。<br>公式为：<br>=SUMIFS(D2:D9,B2:B9,F2,C2:C9,G2)</p>\n<p>SUMIFS用法是：<br>=SUMIFS(求和的区域，条件区域1,指定的求和条件1,条件区域2,指定的求和条件2,……)</p>\n<p>5、条件计数<br>如下图，要统计指定店铺的业务笔数。也就是统计B列中有多少个指定的店铺名称。<br>=COUNTIF(B2:B12,E3)</p>\n<p>COUNTIF函数统计条件区域中，符合指定条件的单元格个数。常规用法为：<br>=COUNTIF(条件区域,指定条件)</p>\n<p>6、多条件计数<br>要求：统计统计部门为生产,并且岗位为主操的人数<br>公式为：<br>=COUNTIFS(B2:B9,F2,C2:C9,G2)</p>\n<p>COUNTIFS函数统计条件区域中，符合多个指定条件的单元格个数。常规用法为：<br>=COUNTIFS(条件区域1,指定条件1,条件区域2,指定条件2……)</p>\n<p>7、条件查找<br>VLOOKUP函数一直是大众情人般的存在，函数的语法为：<br>VLOOKUP(要找谁,在哪儿找,返回第几列的内容,精确找还是近似找)<br>如下图，要查询F5单元格中的员工姓名是什么职务。<br>=VLOOKUP($F$5,$B$1:$D$10,2,0)</p>\n<p>使用该函数时，需要注意以下几点：<br>1、第4参数一般用0（或FASLE）以精确匹配方式进行查找。<br>2、第3参数中的列号，不能理解为工作表中实际的列号，而是指定返回值在查找范围中的第几列。<br>3、如果查找值与数据区域关键字的数据类型不一致，会返回错误值#N/A。<br>4、查找值必须位于查询区域中的第一列。</p>\n<p>8、多条件查找<br>如下图所示，要求查询部门为生产,并且岗位为部长的姓名。<br>公式为：<br>=LOOKUP(1,0/((B2:B9=F2)*(C2:C9=G2)),A2:A9)</p>\n<p>LOOKUP函数多条件查询写法为：<br>=LOOKUP(1,0/((条件区域1=条件1)*(条件区域2=条件2)),查询区域)</p>\n<p>9、计算文本算式<br>如下图，要计算单元格中的文本算式，先单击第一个要输入公式的单元格，定义名称 ：<br>计算 = EVALUATE(C2)<br>然后在单元格中输入公式：<br>=计算</p>\n<p>10、合并多个单元格内容<br>要连接合并多个单元格中的内容，可以使用&amp;符号完成。如下图，要合并A列的姓名和B列的电话号码，可以使用公式：<br>=A2&amp;B$1&amp;B2</p>\n<p>11、合并带格式的单元格内容<br>合并带有格式的内容时，Excel默认按常规格式进行合并，但是如果是日期、时间或是其他有格式的数值，结果就会让人大失所望了：</p>\n<p>如何才能正确连接出需要的字符串呢？其实很简单，C2公式为：<br>=A2&amp;TEXT(B2,” y年m月d日”)</p>\n<p>首先使用TEXT函数，把B列的日期变成具有特定样式的字符串，然后再与A列的姓名连接，就变成了最终需要的样式。</p>\n<p>12、比较大小写的单词是否相同<br>如果在A1和A2单元格中分别输入大小写的单词，使用以下公式判断时，Excel会默认二者是相同的：<br>=A2=B2</p>\n<p>如需区别大小写，可以使用公式：<br>=EXACT(A2,B2)<br>EXACT函数 区分大小写，但忽略格式上的差异。</p>\n<p>13、提取混合内容中的姓名<br>如下图，要从A列姓名电话中提取出姓名，除了使用高版本的自动填充功能，还可以使用公式完成：<br>=LEFT(A2,LENB(A2)-LEN(A2))</p>\n<p>LENB函数将每个汉字（双字节字符）的字符数按2计数，LEN函数则对所有的字符都按1计数。因此“LENB(A2)-LEN(A2)”返回的结果就是文本字符串中的汉字个数。<br>LEFT函数从文本字符串的第一个字符开始，返回指定个数的字符，最终提取出员工姓名。</p>\n<p>14、根据身份证号码提取出生年月<br>计算公式为：<br>=1*TEXT(MID(B2,7,8),”0-00-00”)</p>\n<p>首先使用MID函数从B2单元格的第7位开始，提取出表示出生年月的8个字符，结果为：<br>“19780215”<br>再使用TEXT函数将字符串转换为日期样式：<br>“1978-02-15”<br>然后通过*1计算，将其转换为真正的日期。最后设置为日期格式即可。</p>\n<p>15、替换部分电话号码<br>如下图所示，要将手机号码的中间四位换成星号，公式为：<br>=SUBSTITUTE(B2,MID(B2,4,4),”****”,1)</p>\n<p>SUBSTITUTE函数的用法是：<br>SUBSTITUTE(要替换的文本,旧文本,新文本,[替换第几个])<br>先使用MID函数取得B列号码中的中间4位，再用“*****”替换掉这部分内容。<br>最后一个参数使用1，表示只替换第一次出现的内容。比如第九行的电话号码是13801010101，最后四位和中间四位相同，如果不指定1，就会全部替换掉了。</p>\n<p>16、屏蔽函数公式返回的错误值<br>在使用函数公式过程中，经常会返回一些诸如#N/A、#NAME?之类的错误值，要屏蔽这些错误值其实很简单，只需在原公式外侧加上一个IFERROR函数就好。<br>IFERROR函数的用法为：<br>=IFERROR(原公式,出现错误时要返回的内容)<br>如果公式正确，就返回原有计算结果，如果公式返回的是错误值，就返回用户指定的显示内容。</p>\n<p>17、四舍五入函数<br>ROUND函数这个想必大家经常用到吧，就是对数值按指定的位数四舍五入。比如：<br>=ROUND(8/9,3)<br>就是将8/9的计算结果四舍五入到三位小数，结果为0.889。</p>\n<p>18、取整的间隔小时数<br>计算两个时间的间隔小时数，不足一小时部分舍去，计算加班时经常会用到，说多了都是泪……<br>=TEXT(B2-B1,”[h]”)</p>\n<p>19、提取日期时间中的日期值<br>要从日期时间数据中提取出日期，可以使用以下公式：<br>=INT(A2)<br>要继续提取时间，只需要做个减法，就欧了：</p>\n<p>20、生成随机数<br>RANDBETWEEN能够在指定范围内生成一组随机数据，对于广大质检、监理、统计人员来说，这的确是一个伟大的函数。<br>函数的用法是：<br>=RANDBETWEEN(数字下限,数字上限)<br>比如以下公式，就是生成60到100之间的随机数：<br>=RANDBETWEEN(60,100)</p>\n"},{"layout":"post","title":"聊天室项目","date":"2020-09-19T02:19:04.000Z","_content":"github地址：https://github.com/genaller/genal-chat\n![](聊天室数据库结构设计.png)","source":"_posts/聊天室项目.md","raw":"---\nlayout:\n  - post\ntitle: 聊天室项目\ndate: 2020-09-19 10:19:04\ntags: program\n---\ngithub地址：https://github.com/genaller/genal-chat\n![](聊天室数据库结构设计.png)","slug":"聊天室项目","published":1,"updated":"2020-09-20T10:48:56.728Z","comments":1,"photos":[],"link":"","_id":"ckfe0pcih00020wurf5li8kx3","content":"<p>github地址：<a href=\"https://github.com/genaller/genal-chat\">https://github.com/genaller/genal-chat</a><br><img src=\"%E8%81%8A%E5%A4%A9%E5%AE%A4%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>github地址：<a href=\"https://github.com/genaller/genal-chat\">https://github.com/genaller/genal-chat</a><br><img src=\"%E8%81%8A%E5%A4%A9%E5%AE%A4%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1.png\"></p>\n"},{"layout":"post","title":"first","date":"2020-09-18T15:06:39.000Z","_content":"the first blog","source":"_posts/first.md","raw":"---\nlayout: post\ntitle: first\ndate: 2020-09-18 23:06:39\ntags: essay\n---\nthe first blog","slug":"first","published":1,"updated":"2020-09-18T15:10:07.865Z","comments":1,"photos":[],"link":"","_id":"ckfe0pcim00070wur892m4lfr","content":"<p>the first blog</p>\n","site":{"data":{}},"excerpt":"","more":"<p>the first blog</p>\n"},{"layout":"post","title":"32个js问题","date":"2020-09-22T13:49:23.000Z","_content":"01.数组扁平化\n数组扁平化是指将一个多维数组变为一个一维数组\nconst arr = [1, [2, [3, [4, 5]]], 6];\n// => [1, 2, 3, 4, 5, 6]\n\n方法一：使用flat()\nconst res1 = arr.flat(Infinity);\n\n方法二：利用正则\nconst res2 = JSON.stringify(arr).replace(/\\[|\\]/g, '').split(',');\n\n但数据类型都会变为字符串\n方法三：正则改良版本\nconst res3 = JSON.parse('[' + JSON.stringify(arr).replace(/\\[|\\]/g, '') + ']');\n\n方法四：使用reduce\nconst flatten = arr => {\n  return arr.reduce((pre, cur) => {\n    return pre.concat(Array.isArray(cur) ? flatten(cur) : cur);\n  }, [])\n}\nconst res4 = flatten(arr);\n\n方法五：函数递归\nconst res5 = [];\nconst fn = arr => {\n  for (let i = 0; i < arr.length; i++) {\n    if (Array.isArray(arr[i])) {\n      fn(arr[i]);\n    } else {\n      res5.push(arr[i]);\n    }\n  }\n}\nfn(arr);\n\n02.数组去重\nconst arr = [1, 1, '1', 17, true, true, false, false, 'true', 'a', {}, {}];\n// => [1, '1', 17, true, false, 'true', 'a', {}, {}]\n\n方法一：利用Set\nconst res1 = Array.from(new Set(arr));\n\n方法二：两层for循环+splice\nconst unique1 = arr => {\n  let len = arr.length;\n  for (let i = 0; i < len; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (arr[i] === arr[j]) {\n        arr.splice(j, 1);\n        // 每删除一个树，j--保证j的值经过自加后不变。同时，len--，减少循环次数提升性能\n        len--;\n        j--;\n      }\n    }\n  }\n  return arr;\n}\n\n方法三：利用indexOf\nconst unique2 = arr => {\n  const res = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (res.indexOf(arr[i]) === -1) res.push(arr[i]);\n  }\n  return res;\n}\n\n当然也可以用include、filter，思路大同小异。\n方法四：利用include\nconst unique3 = arr => {\n  const res = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (!res.includes(arr[i])) res.push(arr[i]);\n  }\n  return res;\n}\n\n方法五：利用filter\nconst unique4 = arr => {\n  return arr.filter((item, index) => {\n    return arr.indexOf(item) === index;\n  });\n}\n\n方法六：利用Map\nconst unique5 = arr => {\n  const map = new Map();\n  const res = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (!map.has(arr[i])) {\n      map.set(arr[i], true)\n      res.push(arr[i]);\n    }\n  }\n  return res;\n}\n\n03.类数组转化为数组\n类数组是具有length属性，但不具有数组原型上的方法。常见的类数组有arguments、DOM操作方法返回的结果。\n方法一：Array.from\nArray.from(document.querySelectorAll('div'))\n\n方法二：Array.prototype.slice.call()\nArray.prototype.slice.call(document.querySelectorAll('div'))\n\n方法三：扩展运算符\n[...document.querySelectorAll('div')]\n\n方法四：利用concat\nArray.prototype.concat.apply([], document.querySelectorAll('div'));\n\n04.Array.prototype.filter()\n\nArray.prototype.filter = function(callback, thisArg) {\n  if (this == undefined) {\n    throw new TypeError('this is null or not undefined');\n  }\n  if (typeof callback !== 'function') {\n    throw new TypeError(callback + 'is not a function');\n  }\n  const res = [];\n  // 让O成为回调函数的对象传递（强制转换对象）\n  const O = Object(this);\n  // >>>0 保证len为number，且为正整数\n  const len = O.length >>> 0;\n  for (let i = 0; i < len; i++) {\n    // 检查i是否在O的属性（会检查原型链）\n    if (i in O) {\n      // 回调函数调用传参\n      if (callback.call(thisArg, O[i], i, O)) {\n        res.push(O[i]);\n      }\n    }\n  }\n  return res;\n}\n\n对于>>>0有疑问的：解释>>>0的作用\n05.Array.prototype.map()\n\nArray.prototype.map = function(callback, thisArg) {\n  if (this == undefined) {\n    throw new TypeError('this is null or not defined');\n  }\n  if (typeof callback !== 'function') {\n    throw new TypeError(callback + ' is not a function');\n  }\n  const res = [];\n  // 同理\n  const O = Object(this);\n  const len = O.length >>> 0;\n  for (let i = 0; i < len; i++) {\n    if (i in O) {\n      // 调用回调函数并传入新数组\n      res[i] = callback.call(thisArg, O[i], i, this);\n    }\n  }\n  return res;\n}\n\n06.Array.prototype.forEach()\n\nforEach跟map类似，唯一不同的是forEach是没有返回值的。\nArray.prototype.forEach = function(callback, thisArg) {\n  if (this == null) {\n    throw new TypeError('this is null or not defined');\n  }\n  if (typeof callback !== \"function\") {\n    throw new TypeError(callback + ' is not a function');\n  }\n  const O = Object(this);\n  const len = O.length >>> 0;\n  let k = 0;\n  while (k < len) {\n    if (k in O) {\n      callback.call(thisArg, O[k], k, O);\n    }\n    k++;\n  }\n}\n\n07.Array.prototype.reduce()\n\nArray.prototype.reduce = function(callback, initialValue) {\n  if (this == undefined) {\n    throw new TypeError('this is null or not defined');\n  }\n  if (typeof callback !== 'function') {\n    throw new TypeError(callbackfn + ' is not a function');\n  }\n  const O = Object(this);\n  const len = this.length >>> 0;\n  let accumulator = initialValue;\n  let k = 0;\n  // 如果第二个参数为undefined的情况下\n  // 则数组的第一个有效值作为累加器的初始值\n  if (accumulator === undefined) {\n    while (k < len && !(k in O)) {\n      k++;\n    }\n    // 如果超出数组界限还没有找到累加器的初始值，则TypeError\n    if (k >= len) {\n      throw new TypeError('Reduce of empty array with no initial value');\n    }\n    accumulator = O[k++];\n  }\n  while (k < len) {\n    if (k in O) {\n      accumulator = callback.call(undefined, accumulator, O[k], k, O);\n    }\n    k++;\n  }\n  return accumulator;\n}\n\n08.Function.prototype.apply()\n第一个参数是绑定的this，默认为window，第二个参数是数组或类数组\nFunction.prototype.apply = function(context = window, args) {\n  if (typeof this !== 'function') {\n    throw new TypeError('Type Error');\n  }\n  const fn = Symbol('fn');\n  context[fn] = this;\n\n  const res = context[fn](...args);\n  delete context[fn];\n  return res;\n}\n\n09.Function.prototype.call\n于call唯一不同的是，call()方法接受的是一个参数列表\nFunction.prototype.call = function(context = window, ...args) {\n  if (typeof this !== 'function') {\n    throw new TypeError('Type Error');\n  }\n  const fn = Symbol('fn');\n  context[fn] = this;\n\n  const res = this[fn](...args);\n  delete this.fn;\n  return res;\n}\n\n10.Function.prototype.bind\nFunction.prototype.bind = function(context, ...args) {\n  if (typeof this !== 'function') {\n    throw new Error(\"Type Error\");\n  }\n  // 保存this的值\n  var self = this;\n\n  return function F() {\n    // 考虑new的情况\n    if(this instanceof F) {\n      return new self(...args, ...arguments)\n    }\n    return self.apply(context, [...args, ...arguments])\n  }\n}\n\n11.debounce（防抖）\n触发高频时间后n秒内函数只会执行一次,如果n秒内高频时间再次触发,则重新计算时间。\nconst debounce = (fn, time) => {\n  let timeout = null;\n  return function() {\n    clearTimeout(timeout)\n    timeout = setTimeout(() => {\n      fn.apply(this, arguments);\n    }, time);\n  }\n};\n\n防抖常应用于用户进行搜索输入节约请求资源，window触发resize事件时进行防抖只触发一次。\n12.throttle（节流）\n高频时间触发,但n秒内只会执行一次,所以节流会稀释函数的执行频率。\nconst throttle = (fn, time) => {\n  let flag = true;\n  return function() {\n    if (!flag) return;\n    flag = false;\n    setTimeout(() => {\n      fn.apply(this, arguments);\n      flag = true;\n    }, time);\n  }\n}\n\n节流常应用于鼠标不断点击触发、监听滚动事件。\n13.函数珂里化\n\n指的是将一个接受多个参数的函数 变为 接受一个参数返回一个函数的固定形式，这样便于再次调用，例如f(1)(2)\n\n经典面试题：实现add(1)(2)(3)(4)=10; 、 add(1)(1,2,3)(2)=9;\nfunction add() {\n  const _args = [...arguments];\n  function fn() {\n    _args.push(...arguments);\n    return fn;\n  }\n  fn.toString = function() {\n    return _args.reduce((sum, cur) => sum + cur);\n  }\n  return fn;\n}\n\n14.模拟new操作\n3个步骤：\n\n以ctor.prototype为原型创建一个对象。\n执行构造函数并将this绑定到新创建的对象上。\n判断构造函数执行返回的结果是否是引用数据类型，若是则返回构造函数执行的结果，否则返回创建的对象。\n\nfunction newOperator(ctor, ...args) {\n  if (typeof ctor !== 'function') {\n    throw new TypeError('Type Error');\n  }\n  const obj = Object.create(ctor.prototype);\n  const res = ctor.apply(obj, args);\n\n  const isObject = typeof res === 'object' && res !== null;\n  const isFunction = typeof res === 'function';\n  return isObject || isFunction ? res : obj;\n}\n\n15.instanceof\ninstanceof运算符用于检测构造函数的prototype属性是否出现在某个实例对象的原型链上。\nconst myInstanceof = (left, right) => {\n  // 基本数据类型都返回false\n  if (typeof left !== 'object' || left === null) return false;\n  let proto = Object.getPrototypeOf(left);\n  while (true) {\n    if (proto === null) return false;\n    if (proto === right.prototype) return true;\n    proto = Object.getPrototypeOf(proto);\n  }\n}\n\n16.原型继承\n这里只写寄生组合继承了，中间还有几个演变过来的继承但都有一些缺陷\nfunction Parent5) {\n  this.name = 'parent';\n}\nfunction Child() {\n  Parent.call(this);\n  this.type = 'children';\n}\nChild.prototype = Object.create(Parent.prototype);\nChild.prototype.constructor = Child;\n\n17.Object.is\nObject.is解决的主要是这两个问题：\n+0 === -0  // true\nNaN === NaN // false\n\nconst is= (x, y) => {\n  if (x === y) {\n    // +0和-0应该不相等\n    return x !== 0 || y !== 0 || 1/x === 1/y;\n  } else {\n    return x !== x && y !== y;\n  }\n}\n\n18.Object.assign\nObject.assign()方法用于将所有可枚举属性的值从一个或多个源对象复制到目标对象。它将返回目标对象（请注意这个操作是浅拷贝）\nObject.defineProperty(Object, 'assign', {\n  value: function(target, ...args) {\n    if (target == null) {\n      return new TypeError('Cannot convert undefined or null to object');\n    }\n    \n    // 目标对象需要统一是引用数据类型，若不是会自动转换\n    const to = Object(target);\n\n    for (let i = 0; i < args.length; i++) {\n      // 每一个源对象\n      const nextSource = args[i];\n      if (nextSource !== null) {\n        // 使用for...in和hasOwnProperty双重判断，确保只拿到本身的属性、方法（不包含继承的）\n        for (const nextKey in nextSource) {\n          if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n            to[nextKey] = nextSource[nextKey];\n          }\n        }\n      }\n    }\n    return to;\n  },\n  // 不可枚举\n  enumerable: false,\n  writable: true,\n  configurable: true,\n})\n\n19.深拷贝\n递归的完整版本（考虑到了Symbol属性）：\nconst cloneDeep1 = (target, hash = new WeakMap()) => {\n  // 对于传入参数处理\n  if (typeof target !== 'object' || target === null) {\n    return target;\n  }\n  // 哈希表中存在直接返回\n  if (hash.has(target)) return hash.get(target);\n\n  const cloneTarget = Array.isArray(target) ? [] : {};\n  hash.set(target, cloneTarget);\n\n  // 针对Symbol属性\n  const symKeys = Object.getOwnPropertySymbols(target);\n  if (symKeys.length) {\n    symKeys.forEach(symKey => {\n      if (typeof target[symKey] === 'object' && target[symKey] !== null) {\n        cloneTarget[symKey] = cloneDeep1(target[symKey]);\n      } else {\n        cloneTarget[symKey] = target[symKey];\n      }\n    })\n  }\n\n  for (const i in target) {\n    if (Object.prototype.hasOwnProperty.call(target, i)) {\n      cloneTarget[i] =\n        typeof target[i] === 'object' && target[i] !== null\n        ? cloneDeep1(target[i], hash)\n        : target[i];\n    }\n  }\n  return cloneTarget;\n}\n\n20.Promise\n实现思路：Promise源码实现\nconst PENDING = 'PENDING';      // 进行中\nconst FULFILLED = 'FULFILLED';  // 已成功\nconst REJECTED = 'REJECTED';    // 已失败\n\nclass Promise {\n  constructor(exector) {\n    // 初始化状态\n    this.status = PENDING;\n    // 将成功、失败结果放在this上，便于then、catch访问\n    this.value = undefined;\n    this.reason = undefined;\n    // 成功态回调函数队列\n    this.onFulfilledCallbacks = [];\n    // 失败态回调函数队列\n    this.onRejectedCallbacks = [];\n\n    const resolve = value => {\n      // 只有进行中状态才能更改状态\n      if (this.status === PENDING) {\n        this.status = FULFILLED;\n        this.value = value;\n        // 成功态函数依次执行\n        this.onFulfilledCallbacks.forEach(fn => fn(this.value));\n      }\n    }\n    const reject = reason => {\n      // 只有进行中状态才能更改状态\n      if (this.status === PENDING) {\n        this.status = REJECTED;\n        this.reason = reason;\n        // 失败态函数依次执行\n        this.onRejectedCallbacks.forEach(fn => fn(this.reason))\n      }\n    }\n    try {\n      // 立即执行executor\n      // 把内部的resolve和reject传入executor，用户可调用resolve和reject\n      exector(resolve, reject);\n    } catch(e) {\n      // executor执行出错，将错误内容reject抛出去\n      reject(e);\n    }\n  }\n  then(onFulfilled, onRejected) {\n    onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : value => value;\n    onRejected = typeof onRejected === 'function'? onRejected:\n      reason => { throw new Error(reason instanceof Error ? reason.message:reason) }\n    // 保存this\n    const self = this;\n    return new Promise((resolve, reject) => {\n      if (self.status === PENDING) {\n        self.onFulfilledCallbacks.push(() => {\n          // try捕获错误\n          try {\n            // 模拟微任务\n            setTimeout(() => {\n              const result = onFulfilled(self.value);\n              // 分两种情况：\n              // 1. 回调函数返回值是Promise，执行then操作\n              // 2. 如果不是Promise，调用新Promise的resolve函数\n              result instanceof Promise ? result.then(resolve, reject) : resolve(result);\n            })\n          } catch(e) {\n            reject(e);\n          }\n        });\n        self.onRejectedCallbacks.push(() => {\n          // 以下同理\n          try {\n            setTimeout(() => {\n              const result = onRejected(self.reason);\n              // 不同点：此时是reject\n              result instanceof Promise ? result.then(resolve, reject) : reject(result);\n            })\n          } catch(e) {\n            reject(e);\n          }\n        })\n      } else if (self.status === FULFILLED) {\n        try {\n          setTimeout(() => {\n            const result = onFulfilled(self.value);\n            result instanceof Promise ? result.then(resolve, reject) : resolve(result);\n          });\n        } catch(e) {\n          reject(e);\n        }\n      } else if (self.status === REJECTED){\n        try {\n          setTimeout(() => {\n            const result = onRejected(self.reason);\n            result instanceof Promise ? result.then(resolve, reject) : reject(result);\n          })\n        } catch(e) {\n          reject(e);\n        }\n      }\n    });\n  }\n  catch(onRejected) {\n    return this.then(null, onRejected);\n  }\n  static resolve(value) {\n    if (value instanceof Promise) {\n      // 如果是Promise实例，直接返回\n      return value;\n    } else {\n      // 如果不是Promise实例，返回一个新的Promise对象，状态为FULFILLED\n      return new Promise((resolve, reject) => resolve(value));\n    }\n  }\n  static reject(reason) {\n    return new Promise((resolve, reject) => {\n      reject(reason);\n    })\n  }\n}\n\n21.Promise.all\nPromise.all是支持链式调用的，本质上就是返回了一个Promise实例，通过resolve和reject来改变实例状态。\nPromise.myAll = function(promiseArr) {\n  return new Promise((resolve, reject) => {\n    const ans = [];\n    let index = 0;\n    for (let i = 0; i < promiseArr.length; i++) {\n      promiseArr[i]\n      .then(res => {\n        ans[i] = res;\n        index++;\n        if (index === promiseArr.length) {\n          resolve(ans);\n        }\n      })\n      .catch(err => reject(err));\n    }\n  })\n}\n\n22.Promise.race\nPromise.race = function(promiseArr) {\n  return new Promise((resolve, reject) => {\n    promiseArr.forEach(p => {\n      // 如果不是Promise实例需要转化为Promise实例\n      Promise.resolve(p).then(\n        val => resolve(val),\n        err => reject(err),\n      )\n    })\n  })\n}\n\n23.Promise并行限制\n就是实现有并行限制的Promise调度器问题。\n详细实现思路：某条高频面试原题：实现有并行限制的Promise调度器\nclass Scheduler {\n  constructor() {\n    this.queue = [];\n    this.maxCount = 2;\n    this.runCounts = 0;\n  }\n  add(promiseCreator) {\n    this.queue.push(promiseCreator);\n  }\n  taskStart() {\n    for (let i = 0; i < this.maxCount; i++) {\n      this.request();\n    }\n  }\n  request() {\n    if (!this.queue || !this.queue.length || this.runCounts >= this.maxCount) {\n      return;\n    }\n    this.runCounts++;\n\n    this.queue.shift()().then(() => {\n      this.runCounts--;\n      this.request();\n    });\n  }\n}\n   \nconst timeout = time => new Promise(resolve => {\n  setTimeout(resolve, time);\n})\n  \nconst scheduler = new Scheduler();\n  \nconst addTask = (time,order) => {\n  scheduler.add(() => timeout(time).then(()=>console.log(order)))\n}\n  \n  \naddTask(1000, '1');\naddTask(500, '2');\naddTask(300, '3');\naddTask(400, '4');\nscheduler.taskStart()\n// 2\n// 3\n// 1\n// 4\n\n24.JSONP\nscript标签不遵循同源协议，可以用来进行跨域请求，优点就是兼容性好但仅限于GET请求\nconst jsonp = ({ url, params, callbackName }) => {\n  const generateUrl = () => {\n    let dataSrc = '';\n    for (let key in params) {\n      if (Object.prototype.hasOwnProperty.call(params, key)) {\n        dataSrc += `${key}=${params[key]}&`;\n      }\n    }\n    dataSrc += `callback=${callbackName}`;\n    return `${url}?${dataSrc}`;\n  }\n  return new Promise((resolve, reject) => {\n    const scriptEle = document.createElement('script');\n    scriptEle.src = generateUrl();\n    document.body.appendChild(scriptEle);\n    window[callbackName] = data => {\n      resolve(data);\n      document.removeChild(scriptEle);\n    }\n  })\n}\n\n25.AJAX\nconst getJSON = function(url) {\n  return new Promise((resolve, reject) => {\n    const xhr = XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject('Mscrosoft.XMLHttp');\n    xhr.open('GET', url, false);\n    xhr.setRequestHeader('Accept', 'application/json');\n    xhr.onreadystatechange = function() {\n      if (xhr.readyState !== 4) return;\n      if (xhr.status === 200 || xhr.status === 304) {\n        resolve(xhr.responseText);\n      } else {\n        reject(new Error(xhr.responseText));\n      }\n    }\n    xhr.send();\n  })\n}\n\n26.event模块\n实现node中回调函数的机制，node中回调函数其实是内部使用了观察者模式。\n\n观察者模式：定义了对象间一种一对多的依赖关系，当目标对象Subject发生改变时，所有依赖它的对象Observer都会得到通知。\n\nfunction EventEmitter() {\n  this.events = new Map();\n}\n\n// 需要实现的一些方法：\n// addListener、removeListener、once、removeAllListeners、emit\n\n// 模拟实现addlistener方法\nconst wrapCallback = (fn, once = false) => ({ callback: fn, once });\nEventEmitter.prototype.addListener = function(type, fn, once = false) {\n  const hanlder = this.events.get(type);\n  if (!hanlder) {\n    // 没有type绑定事件\n    this.events.set(type, wrapCallback(fn, once));\n  } else if (hanlder && typeof hanlder.callback === 'function') {\n    // 目前type事件只有一个回调\n    this.events.set(type, [hanlder, wrapCallback(fn, once)]);\n  } else {\n    // 目前type事件数>=2\n    hanlder.push(wrapCallback(fn, once));\n  }\n}\n// 模拟实现removeListener\nEventEmitter.prototype.removeListener = function(type, listener) {\n  const hanlder = this.events.get(type);\n  if (!hanlder) return;\n  if (!Array.isArray(this.events)) {\n    if (hanlder.callback === listener.callback) this.events.delete(type);\n    else return;\n  }\n  for (let i = 0; i < hanlder.length; i++) {\n    const item = hanlder[i];\n    if (item.callback === listener.callback) {\n      hanlder.splice(i, 1);\n      i--;\n      if (hanlder.length === 1) {\n        this.events.set(type, hanlder[0]);\n      }\n    }\n  }\n}\n// 模拟实现once方法\nEventEmitter.prototype.once = function(type, listener) {\n  this.addListener(type, listener, true);\n}\n// 模拟实现emit方法\nEventEmitter.prototype.emit = function(type, ...args) {\n  const hanlder = this.events.get(type);\n  if (!hanlder) return;\n  if (Array.isArray(hanlder)) {\n    hanlder.forEach(item => {\n      item.callback.apply(this, args);\n      if (item.once) {\n        this.removeListener(type, item);\n      }\n    })\n  } else {\n    hanlder.callback.apply(this, args);\n    if (hanlder.once) {\n      this.events.delete(type);\n    }\n  }\n  return true;\n}\nEventEmitter.prototype.removeAllListeners = function(type) {\n  const hanlder = this.events.get(type);\n  if (!hanlder) return;\n  this.events.delete(type);\n}\n\n27.图片懒加载\n可以给img标签统一自定义属性data-src='default.png'，当检测到图片出现在窗口之后再补充src属性，此时才会进行图片资源加载。\nfunction lazyload() {\n  const imgs = document.getElementsByTagName('img');\n  const len = imgs.length;\n  // 视口的高度\n  const viewHeight = document.documentElement.clientHeight;\n  // 滚动条高度\n  const scrollHeight = document.documentElement.scrollTop || document.body.scrollTop;\n  for (let i = 0; i < len; i++) {\n    const offsetHeight = imgs[i].offsetTop;\n    if (offsetHeight < viewHeight + scrollHeight) {\n      const src = imgs[i].dataset.src;\n      imgs[i].src = src;\n    }\n  }\n}\n\n// 可以使用节流优化一下\nwindow.addEventListener('scroll', lazyload);\n\n28.滚动加载\n原理就是监听页面滚动事件，分析clientHeight、scrollTop、scrollHeight三者的属性关系。\nwindow.addEventListener('scroll', function() {\n  const clientHeight = document.documentElement.clientHeight;\n  const scrollTop = document.documentElement.scrollTop;\n  const scrollHeight = document.documentElement.scrollHeight;\n  if (clientHeight + scrollTop >= scrollHeight) {\n    // 检测到滚动至页面底部，进行后续操作\n    // ...\n  }\n}, false);\n\n一个Demo：页面滚动加载的Demo\n29.渲染几万条数据不卡住页面\n渲染大数据时，合理使用createDocumentFragment和requestAnimationFrame，将操作切分为一小段一小段执行。\nsetTimeout(() => {\n  // 插入十万条数据\n  const total = 100000;\n  // 一次插入的数据\n  const once = 20;\n  // 插入数据需要的次数\n  const loopCount = Math.ceil(total / once);\n  let countOfRender = 0;\n  const ul = document.querySelector('ul');\n  // 添加数据的方法\n  function add() {\n    const fragment = document.createDocumentFragment();\n    for(let i = 0; i < once; i++) {\n      const li = document.createElement('li');\n      li.innerText = Math.floor(Math.random() * total);\n      fragment.appendChild(li);\n    }\n    ul.appendChild(fragment);\n    countOfRender += 1;\n    loop();\n  }\n  function loop() {\n    if(countOfRender < loopCount) {\n      window.requestAnimationFrame(add);\n    }\n  }\n  loop();\n}, 0)\n\n30.打印出当前网页使用了多少种HTML元素\n一行代码可以解决：\nconst fn = () => {\n  return [...new Set([...document.querySelectorAll('*')].map(el => el.tagName))].length;\n}\n\n值得注意的是：DOM操作返回的是类数组，需要转换为数组之后才可以调用数组的方法。\n31.将VirtualDom转化为真实DOM结构\n这是当前SPA应用的核心概念之一\n// vnode结构：\n// {\n//   tag,\n//   attrs,\n//   children,\n// }\n\n//Virtual DOM => DOM\nfunction render(vnode, container) {\n  container.appendChild(_render(vnode));\n}\nfunction _render(vnode) {\n  // 如果是数字类型转化为字符串\n  if (typeof vnode === 'number') {\n    vnode = String(vnode);\n  }\n  // 字符串类型直接就是文本节点\n  if (typeof vnode === 'string') {\n    return document.createTextNode(vnode);\n  }\n  // 普通DOM\n  const dom = document.createElement(vnode.tag);\n  if (vnode.attrs) {\n    // 遍历属性\n    Object.keys(vnode.attrs).forEach(key => {\n      const value = vnode.attrs[key];\n      dom.setAttribute(key, value);\n    })\n  }\n  // 子数组进行递归操作\n  vnode.children.forEach(child => render(child, dom));\n  return dom;\n}\n\n32.字符串解析问题\nvar a = {\n    b: 123,\n    c: '456',\n    e: '789',\n}\nvar str=`a{a.b}aa{a.c}aa {a.d}aaaa`;\n// => 'a123aa456aa {a.d}aaaa'\n\n实现函数使得将str字符串中的{}内的变量替换，如果属性不存在保持原样（比如{a.d}）\n类似于模版字符串，但有一点出入，实际上原理大差不差\nconst fn1 = (str, obj) => {\n    let res = '';\n    // 标志位，标志前面是否有{\n    let flag = false;\n    let start;\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] === '{') {\n            flag = true;\n            start = i + 1;\n            continue;\n        }\n        if (!flag) res += str[i];\n        else {\n            if (str[i] === '}') {\n                flag = false;\n                res += match(str.slice(start, i), obj);\n            }\n        }\n    }\n    return res;\n}\n// 对象匹配操作\nconst match = (str, obj) => {\n    const keys = str.split('.').slice(1);\n    let index = 0;\n    let o = obj;\n    while (index < keys.length) {\n        const key = keys[index];\n        if (!o[key]) {\n            return `{${str}}`;\n        } else {\n            o = o[key];\n        }\n        index++;\n    }\n    return o;\n}\n\n","source":"_posts/32个js问题.md","raw":"---\nlayout:\n  - post\ntitle: 32个js问题\ndate: 2020-09-22 21:49:23\ntags: program\n---\n01.数组扁平化\n数组扁平化是指将一个多维数组变为一个一维数组\nconst arr = [1, [2, [3, [4, 5]]], 6];\n// => [1, 2, 3, 4, 5, 6]\n\n方法一：使用flat()\nconst res1 = arr.flat(Infinity);\n\n方法二：利用正则\nconst res2 = JSON.stringify(arr).replace(/\\[|\\]/g, '').split(',');\n\n但数据类型都会变为字符串\n方法三：正则改良版本\nconst res3 = JSON.parse('[' + JSON.stringify(arr).replace(/\\[|\\]/g, '') + ']');\n\n方法四：使用reduce\nconst flatten = arr => {\n  return arr.reduce((pre, cur) => {\n    return pre.concat(Array.isArray(cur) ? flatten(cur) : cur);\n  }, [])\n}\nconst res4 = flatten(arr);\n\n方法五：函数递归\nconst res5 = [];\nconst fn = arr => {\n  for (let i = 0; i < arr.length; i++) {\n    if (Array.isArray(arr[i])) {\n      fn(arr[i]);\n    } else {\n      res5.push(arr[i]);\n    }\n  }\n}\nfn(arr);\n\n02.数组去重\nconst arr = [1, 1, '1', 17, true, true, false, false, 'true', 'a', {}, {}];\n// => [1, '1', 17, true, false, 'true', 'a', {}, {}]\n\n方法一：利用Set\nconst res1 = Array.from(new Set(arr));\n\n方法二：两层for循环+splice\nconst unique1 = arr => {\n  let len = arr.length;\n  for (let i = 0; i < len; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (arr[i] === arr[j]) {\n        arr.splice(j, 1);\n        // 每删除一个树，j--保证j的值经过自加后不变。同时，len--，减少循环次数提升性能\n        len--;\n        j--;\n      }\n    }\n  }\n  return arr;\n}\n\n方法三：利用indexOf\nconst unique2 = arr => {\n  const res = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (res.indexOf(arr[i]) === -1) res.push(arr[i]);\n  }\n  return res;\n}\n\n当然也可以用include、filter，思路大同小异。\n方法四：利用include\nconst unique3 = arr => {\n  const res = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (!res.includes(arr[i])) res.push(arr[i]);\n  }\n  return res;\n}\n\n方法五：利用filter\nconst unique4 = arr => {\n  return arr.filter((item, index) => {\n    return arr.indexOf(item) === index;\n  });\n}\n\n方法六：利用Map\nconst unique5 = arr => {\n  const map = new Map();\n  const res = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (!map.has(arr[i])) {\n      map.set(arr[i], true)\n      res.push(arr[i]);\n    }\n  }\n  return res;\n}\n\n03.类数组转化为数组\n类数组是具有length属性，但不具有数组原型上的方法。常见的类数组有arguments、DOM操作方法返回的结果。\n方法一：Array.from\nArray.from(document.querySelectorAll('div'))\n\n方法二：Array.prototype.slice.call()\nArray.prototype.slice.call(document.querySelectorAll('div'))\n\n方法三：扩展运算符\n[...document.querySelectorAll('div')]\n\n方法四：利用concat\nArray.prototype.concat.apply([], document.querySelectorAll('div'));\n\n04.Array.prototype.filter()\n\nArray.prototype.filter = function(callback, thisArg) {\n  if (this == undefined) {\n    throw new TypeError('this is null or not undefined');\n  }\n  if (typeof callback !== 'function') {\n    throw new TypeError(callback + 'is not a function');\n  }\n  const res = [];\n  // 让O成为回调函数的对象传递（强制转换对象）\n  const O = Object(this);\n  // >>>0 保证len为number，且为正整数\n  const len = O.length >>> 0;\n  for (let i = 0; i < len; i++) {\n    // 检查i是否在O的属性（会检查原型链）\n    if (i in O) {\n      // 回调函数调用传参\n      if (callback.call(thisArg, O[i], i, O)) {\n        res.push(O[i]);\n      }\n    }\n  }\n  return res;\n}\n\n对于>>>0有疑问的：解释>>>0的作用\n05.Array.prototype.map()\n\nArray.prototype.map = function(callback, thisArg) {\n  if (this == undefined) {\n    throw new TypeError('this is null or not defined');\n  }\n  if (typeof callback !== 'function') {\n    throw new TypeError(callback + ' is not a function');\n  }\n  const res = [];\n  // 同理\n  const O = Object(this);\n  const len = O.length >>> 0;\n  for (let i = 0; i < len; i++) {\n    if (i in O) {\n      // 调用回调函数并传入新数组\n      res[i] = callback.call(thisArg, O[i], i, this);\n    }\n  }\n  return res;\n}\n\n06.Array.prototype.forEach()\n\nforEach跟map类似，唯一不同的是forEach是没有返回值的。\nArray.prototype.forEach = function(callback, thisArg) {\n  if (this == null) {\n    throw new TypeError('this is null or not defined');\n  }\n  if (typeof callback !== \"function\") {\n    throw new TypeError(callback + ' is not a function');\n  }\n  const O = Object(this);\n  const len = O.length >>> 0;\n  let k = 0;\n  while (k < len) {\n    if (k in O) {\n      callback.call(thisArg, O[k], k, O);\n    }\n    k++;\n  }\n}\n\n07.Array.prototype.reduce()\n\nArray.prototype.reduce = function(callback, initialValue) {\n  if (this == undefined) {\n    throw new TypeError('this is null or not defined');\n  }\n  if (typeof callback !== 'function') {\n    throw new TypeError(callbackfn + ' is not a function');\n  }\n  const O = Object(this);\n  const len = this.length >>> 0;\n  let accumulator = initialValue;\n  let k = 0;\n  // 如果第二个参数为undefined的情况下\n  // 则数组的第一个有效值作为累加器的初始值\n  if (accumulator === undefined) {\n    while (k < len && !(k in O)) {\n      k++;\n    }\n    // 如果超出数组界限还没有找到累加器的初始值，则TypeError\n    if (k >= len) {\n      throw new TypeError('Reduce of empty array with no initial value');\n    }\n    accumulator = O[k++];\n  }\n  while (k < len) {\n    if (k in O) {\n      accumulator = callback.call(undefined, accumulator, O[k], k, O);\n    }\n    k++;\n  }\n  return accumulator;\n}\n\n08.Function.prototype.apply()\n第一个参数是绑定的this，默认为window，第二个参数是数组或类数组\nFunction.prototype.apply = function(context = window, args) {\n  if (typeof this !== 'function') {\n    throw new TypeError('Type Error');\n  }\n  const fn = Symbol('fn');\n  context[fn] = this;\n\n  const res = context[fn](...args);\n  delete context[fn];\n  return res;\n}\n\n09.Function.prototype.call\n于call唯一不同的是，call()方法接受的是一个参数列表\nFunction.prototype.call = function(context = window, ...args) {\n  if (typeof this !== 'function') {\n    throw new TypeError('Type Error');\n  }\n  const fn = Symbol('fn');\n  context[fn] = this;\n\n  const res = this[fn](...args);\n  delete this.fn;\n  return res;\n}\n\n10.Function.prototype.bind\nFunction.prototype.bind = function(context, ...args) {\n  if (typeof this !== 'function') {\n    throw new Error(\"Type Error\");\n  }\n  // 保存this的值\n  var self = this;\n\n  return function F() {\n    // 考虑new的情况\n    if(this instanceof F) {\n      return new self(...args, ...arguments)\n    }\n    return self.apply(context, [...args, ...arguments])\n  }\n}\n\n11.debounce（防抖）\n触发高频时间后n秒内函数只会执行一次,如果n秒内高频时间再次触发,则重新计算时间。\nconst debounce = (fn, time) => {\n  let timeout = null;\n  return function() {\n    clearTimeout(timeout)\n    timeout = setTimeout(() => {\n      fn.apply(this, arguments);\n    }, time);\n  }\n};\n\n防抖常应用于用户进行搜索输入节约请求资源，window触发resize事件时进行防抖只触发一次。\n12.throttle（节流）\n高频时间触发,但n秒内只会执行一次,所以节流会稀释函数的执行频率。\nconst throttle = (fn, time) => {\n  let flag = true;\n  return function() {\n    if (!flag) return;\n    flag = false;\n    setTimeout(() => {\n      fn.apply(this, arguments);\n      flag = true;\n    }, time);\n  }\n}\n\n节流常应用于鼠标不断点击触发、监听滚动事件。\n13.函数珂里化\n\n指的是将一个接受多个参数的函数 变为 接受一个参数返回一个函数的固定形式，这样便于再次调用，例如f(1)(2)\n\n经典面试题：实现add(1)(2)(3)(4)=10; 、 add(1)(1,2,3)(2)=9;\nfunction add() {\n  const _args = [...arguments];\n  function fn() {\n    _args.push(...arguments);\n    return fn;\n  }\n  fn.toString = function() {\n    return _args.reduce((sum, cur) => sum + cur);\n  }\n  return fn;\n}\n\n14.模拟new操作\n3个步骤：\n\n以ctor.prototype为原型创建一个对象。\n执行构造函数并将this绑定到新创建的对象上。\n判断构造函数执行返回的结果是否是引用数据类型，若是则返回构造函数执行的结果，否则返回创建的对象。\n\nfunction newOperator(ctor, ...args) {\n  if (typeof ctor !== 'function') {\n    throw new TypeError('Type Error');\n  }\n  const obj = Object.create(ctor.prototype);\n  const res = ctor.apply(obj, args);\n\n  const isObject = typeof res === 'object' && res !== null;\n  const isFunction = typeof res === 'function';\n  return isObject || isFunction ? res : obj;\n}\n\n15.instanceof\ninstanceof运算符用于检测构造函数的prototype属性是否出现在某个实例对象的原型链上。\nconst myInstanceof = (left, right) => {\n  // 基本数据类型都返回false\n  if (typeof left !== 'object' || left === null) return false;\n  let proto = Object.getPrototypeOf(left);\n  while (true) {\n    if (proto === null) return false;\n    if (proto === right.prototype) return true;\n    proto = Object.getPrototypeOf(proto);\n  }\n}\n\n16.原型继承\n这里只写寄生组合继承了，中间还有几个演变过来的继承但都有一些缺陷\nfunction Parent5) {\n  this.name = 'parent';\n}\nfunction Child() {\n  Parent.call(this);\n  this.type = 'children';\n}\nChild.prototype = Object.create(Parent.prototype);\nChild.prototype.constructor = Child;\n\n17.Object.is\nObject.is解决的主要是这两个问题：\n+0 === -0  // true\nNaN === NaN // false\n\nconst is= (x, y) => {\n  if (x === y) {\n    // +0和-0应该不相等\n    return x !== 0 || y !== 0 || 1/x === 1/y;\n  } else {\n    return x !== x && y !== y;\n  }\n}\n\n18.Object.assign\nObject.assign()方法用于将所有可枚举属性的值从一个或多个源对象复制到目标对象。它将返回目标对象（请注意这个操作是浅拷贝）\nObject.defineProperty(Object, 'assign', {\n  value: function(target, ...args) {\n    if (target == null) {\n      return new TypeError('Cannot convert undefined or null to object');\n    }\n    \n    // 目标对象需要统一是引用数据类型，若不是会自动转换\n    const to = Object(target);\n\n    for (let i = 0; i < args.length; i++) {\n      // 每一个源对象\n      const nextSource = args[i];\n      if (nextSource !== null) {\n        // 使用for...in和hasOwnProperty双重判断，确保只拿到本身的属性、方法（不包含继承的）\n        for (const nextKey in nextSource) {\n          if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n            to[nextKey] = nextSource[nextKey];\n          }\n        }\n      }\n    }\n    return to;\n  },\n  // 不可枚举\n  enumerable: false,\n  writable: true,\n  configurable: true,\n})\n\n19.深拷贝\n递归的完整版本（考虑到了Symbol属性）：\nconst cloneDeep1 = (target, hash = new WeakMap()) => {\n  // 对于传入参数处理\n  if (typeof target !== 'object' || target === null) {\n    return target;\n  }\n  // 哈希表中存在直接返回\n  if (hash.has(target)) return hash.get(target);\n\n  const cloneTarget = Array.isArray(target) ? [] : {};\n  hash.set(target, cloneTarget);\n\n  // 针对Symbol属性\n  const symKeys = Object.getOwnPropertySymbols(target);\n  if (symKeys.length) {\n    symKeys.forEach(symKey => {\n      if (typeof target[symKey] === 'object' && target[symKey] !== null) {\n        cloneTarget[symKey] = cloneDeep1(target[symKey]);\n      } else {\n        cloneTarget[symKey] = target[symKey];\n      }\n    })\n  }\n\n  for (const i in target) {\n    if (Object.prototype.hasOwnProperty.call(target, i)) {\n      cloneTarget[i] =\n        typeof target[i] === 'object' && target[i] !== null\n        ? cloneDeep1(target[i], hash)\n        : target[i];\n    }\n  }\n  return cloneTarget;\n}\n\n20.Promise\n实现思路：Promise源码实现\nconst PENDING = 'PENDING';      // 进行中\nconst FULFILLED = 'FULFILLED';  // 已成功\nconst REJECTED = 'REJECTED';    // 已失败\n\nclass Promise {\n  constructor(exector) {\n    // 初始化状态\n    this.status = PENDING;\n    // 将成功、失败结果放在this上，便于then、catch访问\n    this.value = undefined;\n    this.reason = undefined;\n    // 成功态回调函数队列\n    this.onFulfilledCallbacks = [];\n    // 失败态回调函数队列\n    this.onRejectedCallbacks = [];\n\n    const resolve = value => {\n      // 只有进行中状态才能更改状态\n      if (this.status === PENDING) {\n        this.status = FULFILLED;\n        this.value = value;\n        // 成功态函数依次执行\n        this.onFulfilledCallbacks.forEach(fn => fn(this.value));\n      }\n    }\n    const reject = reason => {\n      // 只有进行中状态才能更改状态\n      if (this.status === PENDING) {\n        this.status = REJECTED;\n        this.reason = reason;\n        // 失败态函数依次执行\n        this.onRejectedCallbacks.forEach(fn => fn(this.reason))\n      }\n    }\n    try {\n      // 立即执行executor\n      // 把内部的resolve和reject传入executor，用户可调用resolve和reject\n      exector(resolve, reject);\n    } catch(e) {\n      // executor执行出错，将错误内容reject抛出去\n      reject(e);\n    }\n  }\n  then(onFulfilled, onRejected) {\n    onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : value => value;\n    onRejected = typeof onRejected === 'function'? onRejected:\n      reason => { throw new Error(reason instanceof Error ? reason.message:reason) }\n    // 保存this\n    const self = this;\n    return new Promise((resolve, reject) => {\n      if (self.status === PENDING) {\n        self.onFulfilledCallbacks.push(() => {\n          // try捕获错误\n          try {\n            // 模拟微任务\n            setTimeout(() => {\n              const result = onFulfilled(self.value);\n              // 分两种情况：\n              // 1. 回调函数返回值是Promise，执行then操作\n              // 2. 如果不是Promise，调用新Promise的resolve函数\n              result instanceof Promise ? result.then(resolve, reject) : resolve(result);\n            })\n          } catch(e) {\n            reject(e);\n          }\n        });\n        self.onRejectedCallbacks.push(() => {\n          // 以下同理\n          try {\n            setTimeout(() => {\n              const result = onRejected(self.reason);\n              // 不同点：此时是reject\n              result instanceof Promise ? result.then(resolve, reject) : reject(result);\n            })\n          } catch(e) {\n            reject(e);\n          }\n        })\n      } else if (self.status === FULFILLED) {\n        try {\n          setTimeout(() => {\n            const result = onFulfilled(self.value);\n            result instanceof Promise ? result.then(resolve, reject) : resolve(result);\n          });\n        } catch(e) {\n          reject(e);\n        }\n      } else if (self.status === REJECTED){\n        try {\n          setTimeout(() => {\n            const result = onRejected(self.reason);\n            result instanceof Promise ? result.then(resolve, reject) : reject(result);\n          })\n        } catch(e) {\n          reject(e);\n        }\n      }\n    });\n  }\n  catch(onRejected) {\n    return this.then(null, onRejected);\n  }\n  static resolve(value) {\n    if (value instanceof Promise) {\n      // 如果是Promise实例，直接返回\n      return value;\n    } else {\n      // 如果不是Promise实例，返回一个新的Promise对象，状态为FULFILLED\n      return new Promise((resolve, reject) => resolve(value));\n    }\n  }\n  static reject(reason) {\n    return new Promise((resolve, reject) => {\n      reject(reason);\n    })\n  }\n}\n\n21.Promise.all\nPromise.all是支持链式调用的，本质上就是返回了一个Promise实例，通过resolve和reject来改变实例状态。\nPromise.myAll = function(promiseArr) {\n  return new Promise((resolve, reject) => {\n    const ans = [];\n    let index = 0;\n    for (let i = 0; i < promiseArr.length; i++) {\n      promiseArr[i]\n      .then(res => {\n        ans[i] = res;\n        index++;\n        if (index === promiseArr.length) {\n          resolve(ans);\n        }\n      })\n      .catch(err => reject(err));\n    }\n  })\n}\n\n22.Promise.race\nPromise.race = function(promiseArr) {\n  return new Promise((resolve, reject) => {\n    promiseArr.forEach(p => {\n      // 如果不是Promise实例需要转化为Promise实例\n      Promise.resolve(p).then(\n        val => resolve(val),\n        err => reject(err),\n      )\n    })\n  })\n}\n\n23.Promise并行限制\n就是实现有并行限制的Promise调度器问题。\n详细实现思路：某条高频面试原题：实现有并行限制的Promise调度器\nclass Scheduler {\n  constructor() {\n    this.queue = [];\n    this.maxCount = 2;\n    this.runCounts = 0;\n  }\n  add(promiseCreator) {\n    this.queue.push(promiseCreator);\n  }\n  taskStart() {\n    for (let i = 0; i < this.maxCount; i++) {\n      this.request();\n    }\n  }\n  request() {\n    if (!this.queue || !this.queue.length || this.runCounts >= this.maxCount) {\n      return;\n    }\n    this.runCounts++;\n\n    this.queue.shift()().then(() => {\n      this.runCounts--;\n      this.request();\n    });\n  }\n}\n   \nconst timeout = time => new Promise(resolve => {\n  setTimeout(resolve, time);\n})\n  \nconst scheduler = new Scheduler();\n  \nconst addTask = (time,order) => {\n  scheduler.add(() => timeout(time).then(()=>console.log(order)))\n}\n  \n  \naddTask(1000, '1');\naddTask(500, '2');\naddTask(300, '3');\naddTask(400, '4');\nscheduler.taskStart()\n// 2\n// 3\n// 1\n// 4\n\n24.JSONP\nscript标签不遵循同源协议，可以用来进行跨域请求，优点就是兼容性好但仅限于GET请求\nconst jsonp = ({ url, params, callbackName }) => {\n  const generateUrl = () => {\n    let dataSrc = '';\n    for (let key in params) {\n      if (Object.prototype.hasOwnProperty.call(params, key)) {\n        dataSrc += `${key}=${params[key]}&`;\n      }\n    }\n    dataSrc += `callback=${callbackName}`;\n    return `${url}?${dataSrc}`;\n  }\n  return new Promise((resolve, reject) => {\n    const scriptEle = document.createElement('script');\n    scriptEle.src = generateUrl();\n    document.body.appendChild(scriptEle);\n    window[callbackName] = data => {\n      resolve(data);\n      document.removeChild(scriptEle);\n    }\n  })\n}\n\n25.AJAX\nconst getJSON = function(url) {\n  return new Promise((resolve, reject) => {\n    const xhr = XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject('Mscrosoft.XMLHttp');\n    xhr.open('GET', url, false);\n    xhr.setRequestHeader('Accept', 'application/json');\n    xhr.onreadystatechange = function() {\n      if (xhr.readyState !== 4) return;\n      if (xhr.status === 200 || xhr.status === 304) {\n        resolve(xhr.responseText);\n      } else {\n        reject(new Error(xhr.responseText));\n      }\n    }\n    xhr.send();\n  })\n}\n\n26.event模块\n实现node中回调函数的机制，node中回调函数其实是内部使用了观察者模式。\n\n观察者模式：定义了对象间一种一对多的依赖关系，当目标对象Subject发生改变时，所有依赖它的对象Observer都会得到通知。\n\nfunction EventEmitter() {\n  this.events = new Map();\n}\n\n// 需要实现的一些方法：\n// addListener、removeListener、once、removeAllListeners、emit\n\n// 模拟实现addlistener方法\nconst wrapCallback = (fn, once = false) => ({ callback: fn, once });\nEventEmitter.prototype.addListener = function(type, fn, once = false) {\n  const hanlder = this.events.get(type);\n  if (!hanlder) {\n    // 没有type绑定事件\n    this.events.set(type, wrapCallback(fn, once));\n  } else if (hanlder && typeof hanlder.callback === 'function') {\n    // 目前type事件只有一个回调\n    this.events.set(type, [hanlder, wrapCallback(fn, once)]);\n  } else {\n    // 目前type事件数>=2\n    hanlder.push(wrapCallback(fn, once));\n  }\n}\n// 模拟实现removeListener\nEventEmitter.prototype.removeListener = function(type, listener) {\n  const hanlder = this.events.get(type);\n  if (!hanlder) return;\n  if (!Array.isArray(this.events)) {\n    if (hanlder.callback === listener.callback) this.events.delete(type);\n    else return;\n  }\n  for (let i = 0; i < hanlder.length; i++) {\n    const item = hanlder[i];\n    if (item.callback === listener.callback) {\n      hanlder.splice(i, 1);\n      i--;\n      if (hanlder.length === 1) {\n        this.events.set(type, hanlder[0]);\n      }\n    }\n  }\n}\n// 模拟实现once方法\nEventEmitter.prototype.once = function(type, listener) {\n  this.addListener(type, listener, true);\n}\n// 模拟实现emit方法\nEventEmitter.prototype.emit = function(type, ...args) {\n  const hanlder = this.events.get(type);\n  if (!hanlder) return;\n  if (Array.isArray(hanlder)) {\n    hanlder.forEach(item => {\n      item.callback.apply(this, args);\n      if (item.once) {\n        this.removeListener(type, item);\n      }\n    })\n  } else {\n    hanlder.callback.apply(this, args);\n    if (hanlder.once) {\n      this.events.delete(type);\n    }\n  }\n  return true;\n}\nEventEmitter.prototype.removeAllListeners = function(type) {\n  const hanlder = this.events.get(type);\n  if (!hanlder) return;\n  this.events.delete(type);\n}\n\n27.图片懒加载\n可以给img标签统一自定义属性data-src='default.png'，当检测到图片出现在窗口之后再补充src属性，此时才会进行图片资源加载。\nfunction lazyload() {\n  const imgs = document.getElementsByTagName('img');\n  const len = imgs.length;\n  // 视口的高度\n  const viewHeight = document.documentElement.clientHeight;\n  // 滚动条高度\n  const scrollHeight = document.documentElement.scrollTop || document.body.scrollTop;\n  for (let i = 0; i < len; i++) {\n    const offsetHeight = imgs[i].offsetTop;\n    if (offsetHeight < viewHeight + scrollHeight) {\n      const src = imgs[i].dataset.src;\n      imgs[i].src = src;\n    }\n  }\n}\n\n// 可以使用节流优化一下\nwindow.addEventListener('scroll', lazyload);\n\n28.滚动加载\n原理就是监听页面滚动事件，分析clientHeight、scrollTop、scrollHeight三者的属性关系。\nwindow.addEventListener('scroll', function() {\n  const clientHeight = document.documentElement.clientHeight;\n  const scrollTop = document.documentElement.scrollTop;\n  const scrollHeight = document.documentElement.scrollHeight;\n  if (clientHeight + scrollTop >= scrollHeight) {\n    // 检测到滚动至页面底部，进行后续操作\n    // ...\n  }\n}, false);\n\n一个Demo：页面滚动加载的Demo\n29.渲染几万条数据不卡住页面\n渲染大数据时，合理使用createDocumentFragment和requestAnimationFrame，将操作切分为一小段一小段执行。\nsetTimeout(() => {\n  // 插入十万条数据\n  const total = 100000;\n  // 一次插入的数据\n  const once = 20;\n  // 插入数据需要的次数\n  const loopCount = Math.ceil(total / once);\n  let countOfRender = 0;\n  const ul = document.querySelector('ul');\n  // 添加数据的方法\n  function add() {\n    const fragment = document.createDocumentFragment();\n    for(let i = 0; i < once; i++) {\n      const li = document.createElement('li');\n      li.innerText = Math.floor(Math.random() * total);\n      fragment.appendChild(li);\n    }\n    ul.appendChild(fragment);\n    countOfRender += 1;\n    loop();\n  }\n  function loop() {\n    if(countOfRender < loopCount) {\n      window.requestAnimationFrame(add);\n    }\n  }\n  loop();\n}, 0)\n\n30.打印出当前网页使用了多少种HTML元素\n一行代码可以解决：\nconst fn = () => {\n  return [...new Set([...document.querySelectorAll('*')].map(el => el.tagName))].length;\n}\n\n值得注意的是：DOM操作返回的是类数组，需要转换为数组之后才可以调用数组的方法。\n31.将VirtualDom转化为真实DOM结构\n这是当前SPA应用的核心概念之一\n// vnode结构：\n// {\n//   tag,\n//   attrs,\n//   children,\n// }\n\n//Virtual DOM => DOM\nfunction render(vnode, container) {\n  container.appendChild(_render(vnode));\n}\nfunction _render(vnode) {\n  // 如果是数字类型转化为字符串\n  if (typeof vnode === 'number') {\n    vnode = String(vnode);\n  }\n  // 字符串类型直接就是文本节点\n  if (typeof vnode === 'string') {\n    return document.createTextNode(vnode);\n  }\n  // 普通DOM\n  const dom = document.createElement(vnode.tag);\n  if (vnode.attrs) {\n    // 遍历属性\n    Object.keys(vnode.attrs).forEach(key => {\n      const value = vnode.attrs[key];\n      dom.setAttribute(key, value);\n    })\n  }\n  // 子数组进行递归操作\n  vnode.children.forEach(child => render(child, dom));\n  return dom;\n}\n\n32.字符串解析问题\nvar a = {\n    b: 123,\n    c: '456',\n    e: '789',\n}\nvar str=`a{a.b}aa{a.c}aa {a.d}aaaa`;\n// => 'a123aa456aa {a.d}aaaa'\n\n实现函数使得将str字符串中的{}内的变量替换，如果属性不存在保持原样（比如{a.d}）\n类似于模版字符串，但有一点出入，实际上原理大差不差\nconst fn1 = (str, obj) => {\n    let res = '';\n    // 标志位，标志前面是否有{\n    let flag = false;\n    let start;\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] === '{') {\n            flag = true;\n            start = i + 1;\n            continue;\n        }\n        if (!flag) res += str[i];\n        else {\n            if (str[i] === '}') {\n                flag = false;\n                res += match(str.slice(start, i), obj);\n            }\n        }\n    }\n    return res;\n}\n// 对象匹配操作\nconst match = (str, obj) => {\n    const keys = str.split('.').slice(1);\n    let index = 0;\n    let o = obj;\n    while (index < keys.length) {\n        const key = keys[index];\n        if (!o[key]) {\n            return `{${str}}`;\n        } else {\n            o = o[key];\n        }\n        index++;\n    }\n    return o;\n}\n\n","slug":"32个js问题","published":1,"updated":"2020-09-22T13:50:55.214Z","comments":1,"photos":[],"link":"","_id":"ckfe0pcin00080wur0ubtgp5v","content":"<p>01.数组扁平化<br>数组扁平化是指将一个多维数组变为一个一维数组<br>const arr = [1, [2, [3, [4, 5]]], 6];<br>// =&gt; [1, 2, 3, 4, 5, 6]</p>\n<p>方法一：使用flat()<br>const res1 = arr.flat(Infinity);</p>\n<p>方法二：利用正则<br>const res2 = JSON.stringify(arr).replace(/[|]/g, ‘’).split(‘,’);</p>\n<p>但数据类型都会变为字符串<br>方法三：正则改良版本<br>const res3 = JSON.parse(‘[‘ + JSON.stringify(arr).replace(/[|]/g, ‘’) + ‘]’);</p>\n<p>方法四：使用reduce<br>const flatten = arr =&gt; {<br>  return arr.reduce((pre, cur) =&gt; {<br>    return pre.concat(Array.isArray(cur) ? flatten(cur) : cur);<br>  }, [])<br>}<br>const res4 = flatten(arr);</p>\n<p>方法五：函数递归<br>const res5 = [];<br>const fn = arr =&gt; {<br>  for (let i = 0; i &lt; arr.length; i++) {<br>    if (Array.isArray(arr[i])) {<br>      fn(arr[i]);<br>    } else {<br>      res5.push(arr[i]);<br>    }<br>  }<br>}<br>fn(arr);</p>\n<p>02.数组去重<br>const arr = [1, 1, ‘1’, 17, true, true, false, false, ‘true’, ‘a’, {}, {}];<br>// =&gt; [1, ‘1’, 17, true, false, ‘true’, ‘a’, {}, {}]</p>\n<p>方法一：利用Set<br>const res1 = Array.from(new Set(arr));</p>\n<p>方法二：两层for循环+splice<br>const unique1 = arr =&gt; {<br>  let len = arr.length;<br>  for (let i = 0; i &lt; len; i++) {<br>    for (let j = i + 1; j &lt; len; j++) {<br>      if (arr[i] === arr[j]) {<br>        arr.splice(j, 1);<br>        // 每删除一个树，j–保证j的值经过自加后不变。同时，len–，减少循环次数提升性能<br>        len–;<br>        j–;<br>      }<br>    }<br>  }<br>  return arr;<br>}</p>\n<p>方法三：利用indexOf<br>const unique2 = arr =&gt; {<br>  const res = [];<br>  for (let i = 0; i &lt; arr.length; i++) {<br>    if (res.indexOf(arr[i]) === -1) res.push(arr[i]);<br>  }<br>  return res;<br>}</p>\n<p>当然也可以用include、filter，思路大同小异。<br>方法四：利用include<br>const unique3 = arr =&gt; {<br>  const res = [];<br>  for (let i = 0; i &lt; arr.length; i++) {<br>    if (!res.includes(arr[i])) res.push(arr[i]);<br>  }<br>  return res;<br>}</p>\n<p>方法五：利用filter<br>const unique4 = arr =&gt; {<br>  return arr.filter((item, index) =&gt; {<br>    return arr.indexOf(item) === index;<br>  });<br>}</p>\n<p>方法六：利用Map<br>const unique5 = arr =&gt; {<br>  const map = new Map();<br>  const res = [];<br>  for (let i = 0; i &lt; arr.length; i++) {<br>    if (!map.has(arr[i])) {<br>      map.set(arr[i], true)<br>      res.push(arr[i]);<br>    }<br>  }<br>  return res;<br>}</p>\n<p>03.类数组转化为数组<br>类数组是具有length属性，但不具有数组原型上的方法。常见的类数组有arguments、DOM操作方法返回的结果。<br>方法一：Array.from<br>Array.from(document.querySelectorAll(‘div’))</p>\n<p>方法二：Array.prototype.slice.call()<br>Array.prototype.slice.call(document.querySelectorAll(‘div’))</p>\n<p>方法三：扩展运算符<br>[…document.querySelectorAll(‘div’)]</p>\n<p>方法四：利用concat<br>Array.prototype.concat.apply([], document.querySelectorAll(‘div’));</p>\n<p>04.Array.prototype.filter()</p>\n<p>Array.prototype.filter = function(callback, thisArg) {<br>  if (this == undefined) {<br>    throw new TypeError(‘this is null or not undefined’);<br>  }<br>  if (typeof callback !== ‘function’) {<br>    throw new TypeError(callback + ‘is not a function’);<br>  }<br>  const res = [];<br>  // 让O成为回调函数的对象传递（强制转换对象）<br>  const O = Object(this);<br>  // &gt;&gt;&gt;0 保证len为number，且为正整数<br>  const len = O.length &gt;&gt;&gt; 0;<br>  for (let i = 0; i &lt; len; i++) {<br>    // 检查i是否在O的属性（会检查原型链）<br>    if (i in O) {<br>      // 回调函数调用传参<br>      if (callback.call(thisArg, O[i], i, O)) {<br>        res.push(O[i]);<br>      }<br>    }<br>  }<br>  return res;<br>}</p>\n<p>对于&gt;&gt;&gt;0有疑问的：解释&gt;&gt;&gt;0的作用<br>05.Array.prototype.map()</p>\n<p>Array.prototype.map = function(callback, thisArg) {<br>  if (this == undefined) {<br>    throw new TypeError(‘this is null or not defined’);<br>  }<br>  if (typeof callback !== ‘function’) {<br>    throw new TypeError(callback + ‘ is not a function’);<br>  }<br>  const res = [];<br>  // 同理<br>  const O = Object(this);<br>  const len = O.length &gt;&gt;&gt; 0;<br>  for (let i = 0; i &lt; len; i++) {<br>    if (i in O) {<br>      // 调用回调函数并传入新数组<br>      res[i] = callback.call(thisArg, O[i], i, this);<br>    }<br>  }<br>  return res;<br>}</p>\n<p>06.Array.prototype.forEach()</p>\n<p>forEach跟map类似，唯一不同的是forEach是没有返回值的。<br>Array.prototype.forEach = function(callback, thisArg) {<br>  if (this == null) {<br>    throw new TypeError(‘this is null or not defined’);<br>  }<br>  if (typeof callback !== “function”) {<br>    throw new TypeError(callback + ‘ is not a function’);<br>  }<br>  const O = Object(this);<br>  const len = O.length &gt;&gt;&gt; 0;<br>  let k = 0;<br>  while (k &lt; len) {<br>    if (k in O) {<br>      callback.call(thisArg, O[k], k, O);<br>    }<br>    k++;<br>  }<br>}</p>\n<p>07.Array.prototype.reduce()</p>\n<p>Array.prototype.reduce = function(callback, initialValue) {<br>  if (this == undefined) {<br>    throw new TypeError(‘this is null or not defined’);<br>  }<br>  if (typeof callback !== ‘function’) {<br>    throw new TypeError(callbackfn + ‘ is not a function’);<br>  }<br>  const O = Object(this);<br>  const len = this.length &gt;&gt;&gt; 0;<br>  let accumulator = initialValue;<br>  let k = 0;<br>  // 如果第二个参数为undefined的情况下<br>  // 则数组的第一个有效值作为累加器的初始值<br>  if (accumulator === undefined) {<br>    while (k &lt; len &amp;&amp; !(k in O)) {<br>      k++;<br>    }<br>    // 如果超出数组界限还没有找到累加器的初始值，则TypeError<br>    if (k &gt;= len) {<br>      throw new TypeError(‘Reduce of empty array with no initial value’);<br>    }<br>    accumulator = O[k++];<br>  }<br>  while (k &lt; len) {<br>    if (k in O) {<br>      accumulator = callback.call(undefined, accumulator, O[k], k, O);<br>    }<br>    k++;<br>  }<br>  return accumulator;<br>}</p>\n<p>08.Function.prototype.apply()<br>第一个参数是绑定的this，默认为window，第二个参数是数组或类数组<br>Function.prototype.apply = function(context = window, args) {<br>  if (typeof this !== ‘function’) {<br>    throw new TypeError(‘Type Error’);<br>  }<br>  const fn = Symbol(‘fn’);<br>  context[fn] = this;</p>\n<p>  const res = context<a href=\"...args\">fn</a>;<br>  delete context[fn];<br>  return res;<br>}</p>\n<p>09.Function.prototype.call<br>于call唯一不同的是，call()方法接受的是一个参数列表<br>Function.prototype.call = function(context = window, …args) {<br>  if (typeof this !== ‘function’) {<br>    throw new TypeError(‘Type Error’);<br>  }<br>  const fn = Symbol(‘fn’);<br>  context[fn] = this;</p>\n<p>  const res = this<a href=\"...args\">fn</a>;<br>  delete this.fn;<br>  return res;<br>}</p>\n<p>10.Function.prototype.bind<br>Function.prototype.bind = function(context, …args) {<br>  if (typeof this !== ‘function’) {<br>    throw new Error(“Type Error”);<br>  }<br>  // 保存this的值<br>  var self = this;</p>\n<p>  return function F() {<br>    // 考虑new的情况<br>    if(this instanceof F) {<br>      return new self(…args, …arguments)<br>    }<br>    return self.apply(context, […args, …arguments])<br>  }<br>}</p>\n<p>11.debounce（防抖）<br>触发高频时间后n秒内函数只会执行一次,如果n秒内高频时间再次触发,则重新计算时间。<br>const debounce = (fn, time) =&gt; {<br>  let timeout = null;<br>  return function() {<br>    clearTimeout(timeout)<br>    timeout = setTimeout(() =&gt; {<br>      fn.apply(this, arguments);<br>    }, time);<br>  }<br>};</p>\n<p>防抖常应用于用户进行搜索输入节约请求资源，window触发resize事件时进行防抖只触发一次。<br>12.throttle（节流）<br>高频时间触发,但n秒内只会执行一次,所以节流会稀释函数的执行频率。<br>const throttle = (fn, time) =&gt; {<br>  let flag = true;<br>  return function() {<br>    if (!flag) return;<br>    flag = false;<br>    setTimeout(() =&gt; {<br>      fn.apply(this, arguments);<br>      flag = true;<br>    }, time);<br>  }<br>}</p>\n<p>节流常应用于鼠标不断点击触发、监听滚动事件。<br>13.函数珂里化</p>\n<p>指的是将一个接受多个参数的函数 变为 接受一个参数返回一个函数的固定形式，这样便于再次调用，例如f(1)(2)</p>\n<p>经典面试题：实现add(1)(2)(3)(4)=10; 、 add(1)(1,2,3)(2)=9;<br>function add() {<br>  const _args = […arguments];<br>  function fn() {<br>    _args.push(…arguments);<br>    return fn;<br>  }<br>  fn.toString = function() {<br>    return _args.reduce((sum, cur) =&gt; sum + cur);<br>  }<br>  return fn;<br>}</p>\n<p>14.模拟new操作<br>3个步骤：</p>\n<p>以ctor.prototype为原型创建一个对象。<br>执行构造函数并将this绑定到新创建的对象上。<br>判断构造函数执行返回的结果是否是引用数据类型，若是则返回构造函数执行的结果，否则返回创建的对象。</p>\n<p>function newOperator(ctor, …args) {<br>  if (typeof ctor !== ‘function’) {<br>    throw new TypeError(‘Type Error’);<br>  }<br>  const obj = Object.create(ctor.prototype);<br>  const res = ctor.apply(obj, args);</p>\n<p>  const isObject = typeof res === ‘object’ &amp;&amp; res !== null;<br>  const isFunction = typeof res === ‘function’;<br>  return isObject || isFunction ? res : obj;<br>}</p>\n<p>15.instanceof<br>instanceof运算符用于检测构造函数的prototype属性是否出现在某个实例对象的原型链上。<br>const myInstanceof = (left, right) =&gt; {<br>  // 基本数据类型都返回false<br>  if (typeof left !== ‘object’ || left === null) return false;<br>  let proto = Object.getPrototypeOf(left);<br>  while (true) {<br>    if (proto === null) return false;<br>    if (proto === right.prototype) return true;<br>    proto = Object.getPrototypeOf(proto);<br>  }<br>}</p>\n<p>16.原型继承<br>这里只写寄生组合继承了，中间还有几个演变过来的继承但都有一些缺陷<br>function Parent5) {<br>  this.name = ‘parent’;<br>}<br>function Child() {<br>  Parent.call(this);<br>  this.type = ‘children’;<br>}<br>Child.prototype = Object.create(Parent.prototype);<br>Child.prototype.constructor = Child;</p>\n<p>17.Object.is<br>Object.is解决的主要是这两个问题：<br>+0 === -0  // true<br>NaN === NaN // false</p>\n<p>const is= (x, y) =&gt; {<br>  if (x === y) {<br>    // +0和-0应该不相等<br>    return x !== 0 || y !== 0 || 1/x === 1/y;<br>  } else {<br>    return x !== x &amp;&amp; y !== y;<br>  }<br>}</p>\n<p>18.Object.assign<br>Object.assign()方法用于将所有可枚举属性的值从一个或多个源对象复制到目标对象。它将返回目标对象（请注意这个操作是浅拷贝）<br>Object.defineProperty(Object, ‘assign’, {<br>  value: function(target, …args) {<br>    if (target == null) {<br>      return new TypeError(‘Cannot convert undefined or null to object’);<br>    }</p>\n<pre><code>// 目标对象需要统一是引用数据类型，若不是会自动转换\nconst to = Object(target);\n\nfor (let i = 0; i &lt; args.length; i++) &#123;\n  // 每一个源对象\n  const nextSource = args[i];\n  if (nextSource !== null) &#123;\n    // 使用for...in和hasOwnProperty双重判断，确保只拿到本身的属性、方法（不包含继承的）\n    for (const nextKey in nextSource) &#123;\n      if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) &#123;\n        to[nextKey] = nextSource[nextKey];\n      &#125;\n    &#125;\n  &#125;\n&#125;\nreturn to;</code></pre>\n<p>  },<br>  // 不可枚举<br>  enumerable: false,<br>  writable: true,<br>  configurable: true,<br>})</p>\n<p>19.深拷贝<br>递归的完整版本（考虑到了Symbol属性）：<br>const cloneDeep1 = (target, hash = new WeakMap()) =&gt; {<br>  // 对于传入参数处理<br>  if (typeof target !== ‘object’ || target === null) {<br>    return target;<br>  }<br>  // 哈希表中存在直接返回<br>  if (hash.has(target)) return hash.get(target);</p>\n<p>  const cloneTarget = Array.isArray(target) ? [] : {};<br>  hash.set(target, cloneTarget);</p>\n<p>  // 针对Symbol属性<br>  const symKeys = Object.getOwnPropertySymbols(target);<br>  if (symKeys.length) {<br>    symKeys.forEach(symKey =&gt; {<br>      if (typeof target[symKey] === ‘object’ &amp;&amp; target[symKey] !== null) {<br>        cloneTarget[symKey] = cloneDeep1(target[symKey]);<br>      } else {<br>        cloneTarget[symKey] = target[symKey];<br>      }<br>    })<br>  }</p>\n<p>  for (const i in target) {<br>    if (Object.prototype.hasOwnProperty.call(target, i)) {<br>      cloneTarget[i] =<br>        typeof target[i] === ‘object’ &amp;&amp; target[i] !== null<br>        ? cloneDeep1(target[i], hash)<br>        : target[i];<br>    }<br>  }<br>  return cloneTarget;<br>}</p>\n<p>20.Promise<br>实现思路：Promise源码实现<br>const PENDING = ‘PENDING’;      // 进行中<br>const FULFILLED = ‘FULFILLED’;  // 已成功<br>const REJECTED = ‘REJECTED’;    // 已失败</p>\n<p>class Promise {<br>  constructor(exector) {<br>    // 初始化状态<br>    this.status = PENDING;<br>    // 将成功、失败结果放在this上，便于then、catch访问<br>    this.value = undefined;<br>    this.reason = undefined;<br>    // 成功态回调函数队列<br>    this.onFulfilledCallbacks = [];<br>    // 失败态回调函数队列<br>    this.onRejectedCallbacks = [];</p>\n<pre><code>const resolve = value =&gt; &#123;\n  // 只有进行中状态才能更改状态\n  if (this.status === PENDING) &#123;\n    this.status = FULFILLED;\n    this.value = value;\n    // 成功态函数依次执行\n    this.onFulfilledCallbacks.forEach(fn =&gt; fn(this.value));\n  &#125;\n&#125;\nconst reject = reason =&gt; &#123;\n  // 只有进行中状态才能更改状态\n  if (this.status === PENDING) &#123;\n    this.status = REJECTED;\n    this.reason = reason;\n    // 失败态函数依次执行\n    this.onRejectedCallbacks.forEach(fn =&gt; fn(this.reason))\n  &#125;\n&#125;\ntry &#123;\n  // 立即执行executor\n  // 把内部的resolve和reject传入executor，用户可调用resolve和reject\n  exector(resolve, reject);\n&#125; catch(e) &#123;\n  // executor执行出错，将错误内容reject抛出去\n  reject(e);\n&#125;</code></pre>\n<p>  }<br>  then(onFulfilled, onRejected) {<br>    onFulfilled = typeof onFulfilled === ‘function’ ? onFulfilled : value =&gt; value;<br>    onRejected = typeof onRejected === ‘function’? onRejected:<br>      reason =&gt; { throw new Error(reason instanceof Error ? reason.message:reason) }<br>    // 保存this<br>    const self = this;<br>    return new Promise((resolve, reject) =&gt; {<br>      if (self.status === PENDING) {<br>        self.onFulfilledCallbacks.push(() =&gt; {<br>          // try捕获错误<br>          try {<br>            // 模拟微任务<br>            setTimeout(() =&gt; {<br>              const result = onFulfilled(self.value);<br>              // 分两种情况：<br>              // 1. 回调函数返回值是Promise，执行then操作<br>              // 2. 如果不是Promise，调用新Promise的resolve函数<br>              result instanceof Promise ? result.then(resolve, reject) : resolve(result);<br>            })<br>          } catch(e) {<br>            reject(e);<br>          }<br>        });<br>        self.onRejectedCallbacks.push(() =&gt; {<br>          // 以下同理<br>          try {<br>            setTimeout(() =&gt; {<br>              const result = onRejected(self.reason);<br>              // 不同点：此时是reject<br>              result instanceof Promise ? result.then(resolve, reject) : reject(result);<br>            })<br>          } catch(e) {<br>            reject(e);<br>          }<br>        })<br>      } else if (self.status === FULFILLED) {<br>        try {<br>          setTimeout(() =&gt; {<br>            const result = onFulfilled(self.value);<br>            result instanceof Promise ? result.then(resolve, reject) : resolve(result);<br>          });<br>        } catch(e) {<br>          reject(e);<br>        }<br>      } else if (self.status === REJECTED){<br>        try {<br>          setTimeout(() =&gt; {<br>            const result = onRejected(self.reason);<br>            result instanceof Promise ? result.then(resolve, reject) : reject(result);<br>          })<br>        } catch(e) {<br>          reject(e);<br>        }<br>      }<br>    });<br>  }<br>  catch(onRejected) {<br>    return this.then(null, onRejected);<br>  }<br>  static resolve(value) {<br>    if (value instanceof Promise) {<br>      // 如果是Promise实例，直接返回<br>      return value;<br>    } else {<br>      // 如果不是Promise实例，返回一个新的Promise对象，状态为FULFILLED<br>      return new Promise((resolve, reject) =&gt; resolve(value));<br>    }<br>  }<br>  static reject(reason) {<br>    return new Promise((resolve, reject) =&gt; {<br>      reject(reason);<br>    })<br>  }<br>}</p>\n<p>21.Promise.all<br>Promise.all是支持链式调用的，本质上就是返回了一个Promise实例，通过resolve和reject来改变实例状态。<br>Promise.myAll = function(promiseArr) {<br>  return new Promise((resolve, reject) =&gt; {<br>    const ans = [];<br>    let index = 0;<br>    for (let i = 0; i &lt; promiseArr.length; i++) {<br>      promiseArr[i]<br>      .then(res =&gt; {<br>        ans[i] = res;<br>        index++;<br>        if (index === promiseArr.length) {<br>          resolve(ans);<br>        }<br>      })<br>      .catch(err =&gt; reject(err));<br>    }<br>  })<br>}</p>\n<p>22.Promise.race<br>Promise.race = function(promiseArr) {<br>  return new Promise((resolve, reject) =&gt; {<br>    promiseArr.forEach(p =&gt; {<br>      // 如果不是Promise实例需要转化为Promise实例<br>      Promise.resolve(p).then(<br>        val =&gt; resolve(val),<br>        err =&gt; reject(err),<br>      )<br>    })<br>  })<br>}</p>\n<p>23.Promise并行限制<br>就是实现有并行限制的Promise调度器问题。<br>详细实现思路：某条高频面试原题：实现有并行限制的Promise调度器<br>class Scheduler {<br>  constructor() {<br>    this.queue = [];<br>    this.maxCount = 2;<br>    this.runCounts = 0;<br>  }<br>  add(promiseCreator) {<br>    this.queue.push(promiseCreator);<br>  }<br>  taskStart() {<br>    for (let i = 0; i &lt; this.maxCount; i++) {<br>      this.request();<br>    }<br>  }<br>  request() {<br>    if (!this.queue || !this.queue.length || this.runCounts &gt;= this.maxCount) {<br>      return;<br>    }<br>    this.runCounts++;</p>\n<pre><code>this.queue.shift()().then(() =&gt; &#123;\n  this.runCounts--;\n  this.request();\n&#125;);</code></pre>\n<p>  }<br>}</p>\n<p>const timeout = time =&gt; new Promise(resolve =&gt; {<br>  setTimeout(resolve, time);<br>})</p>\n<p>const scheduler = new Scheduler();</p>\n<p>const addTask = (time,order) =&gt; {<br>  scheduler.add(() =&gt; timeout(time).then(()=&gt;console.log(order)))<br>}</p>\n<p>addTask(1000, ‘1’);<br>addTask(500, ‘2’);<br>addTask(300, ‘3’);<br>addTask(400, ‘4’);<br>scheduler.taskStart()<br>// 2<br>// 3<br>// 1<br>// 4</p>\n<p>24.JSONP<br>script标签不遵循同源协议，可以用来进行跨域请求，优点就是兼容性好但仅限于GET请求<br>const jsonp = ({ url, params, callbackName }) =&gt; {<br>  const generateUrl = () =&gt; {<br>    let dataSrc = ‘’;<br>    for (let key in params) {<br>      if (Object.prototype.hasOwnProperty.call(params, key)) {<br>        dataSrc += <code>$&#123;key&#125;=$&#123;params[key]&#125;&amp;</code>;<br>      }<br>    }<br>    dataSrc += <code>callback=$&#123;callbackName&#125;</code>;<br>    return <code>$&#123;url&#125;?$&#123;dataSrc&#125;</code>;<br>  }<br>  return new Promise((resolve, reject) =&gt; {<br>    const scriptEle = document.createElement(‘script’);<br>    scriptEle.src = generateUrl();<br>    document.body.appendChild(scriptEle);<br>    window[callbackName] = data =&gt; {<br>      resolve(data);<br>      document.removeChild(scriptEle);<br>    }<br>  })<br>}</p>\n<p>25.AJAX<br>const getJSON = function(url) {<br>  return new Promise((resolve, reject) =&gt; {<br>    const xhr = XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject(‘Mscrosoft.XMLHttp’);<br>    xhr.open(‘GET’, url, false);<br>    xhr.setRequestHeader(‘Accept’, ‘application/json’);<br>    xhr.onreadystatechange = function() {<br>      if (xhr.readyState !== 4) return;<br>      if (xhr.status === 200 || xhr.status === 304) {<br>        resolve(xhr.responseText);<br>      } else {<br>        reject(new Error(xhr.responseText));<br>      }<br>    }<br>    xhr.send();<br>  })<br>}</p>\n<p>26.event模块<br>实现node中回调函数的机制，node中回调函数其实是内部使用了观察者模式。</p>\n<p>观察者模式：定义了对象间一种一对多的依赖关系，当目标对象Subject发生改变时，所有依赖它的对象Observer都会得到通知。</p>\n<p>function EventEmitter() {<br>  this.events = new Map();<br>}</p>\n<p>// 需要实现的一些方法：<br>// addListener、removeListener、once、removeAllListeners、emit</p>\n<p>// 模拟实现addlistener方法<br>const wrapCallback = (fn, once = false) =&gt; ({ callback: fn, once });<br>EventEmitter.prototype.addListener = function(type, fn, once = false) {<br>  const hanlder = this.events.get(type);<br>  if (!hanlder) {<br>    // 没有type绑定事件<br>    this.events.set(type, wrapCallback(fn, once));<br>  } else if (hanlder &amp;&amp; typeof hanlder.callback === ‘function’) {<br>    // 目前type事件只有一个回调<br>    this.events.set(type, [hanlder, wrapCallback(fn, once)]);<br>  } else {<br>    // 目前type事件数&gt;=2<br>    hanlder.push(wrapCallback(fn, once));<br>  }<br>}<br>// 模拟实现removeListener<br>EventEmitter.prototype.removeListener = function(type, listener) {<br>  const hanlder = this.events.get(type);<br>  if (!hanlder) return;<br>  if (!Array.isArray(this.events)) {<br>    if (hanlder.callback === listener.callback) this.events.delete(type);<br>    else return;<br>  }<br>  for (let i = 0; i &lt; hanlder.length; i++) {<br>    const item = hanlder[i];<br>    if (item.callback === listener.callback) {<br>      hanlder.splice(i, 1);<br>      i–;<br>      if (hanlder.length === 1) {<br>        this.events.set(type, hanlder[0]);<br>      }<br>    }<br>  }<br>}<br>// 模拟实现once方法<br>EventEmitter.prototype.once = function(type, listener) {<br>  this.addListener(type, listener, true);<br>}<br>// 模拟实现emit方法<br>EventEmitter.prototype.emit = function(type, …args) {<br>  const hanlder = this.events.get(type);<br>  if (!hanlder) return;<br>  if (Array.isArray(hanlder)) {<br>    hanlder.forEach(item =&gt; {<br>      item.callback.apply(this, args);<br>      if (item.once) {<br>        this.removeListener(type, item);<br>      }<br>    })<br>  } else {<br>    hanlder.callback.apply(this, args);<br>    if (hanlder.once) {<br>      this.events.delete(type);<br>    }<br>  }<br>  return true;<br>}<br>EventEmitter.prototype.removeAllListeners = function(type) {<br>  const hanlder = this.events.get(type);<br>  if (!hanlder) return;<br>  this.events.delete(type);<br>}</p>\n<p>27.图片懒加载<br>可以给img标签统一自定义属性data-src=’default.png’，当检测到图片出现在窗口之后再补充src属性，此时才会进行图片资源加载。<br>function lazyload() {<br>  const imgs = document.getElementsByTagName(‘img’);<br>  const len = imgs.length;<br>  // 视口的高度<br>  const viewHeight = document.documentElement.clientHeight;<br>  // 滚动条高度<br>  const scrollHeight = document.documentElement.scrollTop || document.body.scrollTop;<br>  for (let i = 0; i &lt; len; i++) {<br>    const offsetHeight = imgs[i].offsetTop;<br>    if (offsetHeight &lt; viewHeight + scrollHeight) {<br>      const src = imgs[i].dataset.src;<br>      imgs[i].src = src;<br>    }<br>  }<br>}</p>\n<p>// 可以使用节流优化一下<br>window.addEventListener(‘scroll’, lazyload);</p>\n<p>28.滚动加载<br>原理就是监听页面滚动事件，分析clientHeight、scrollTop、scrollHeight三者的属性关系。<br>window.addEventListener(‘scroll’, function() {<br>  const clientHeight = document.documentElement.clientHeight;<br>  const scrollTop = document.documentElement.scrollTop;<br>  const scrollHeight = document.documentElement.scrollHeight;<br>  if (clientHeight + scrollTop &gt;= scrollHeight) {<br>    // 检测到滚动至页面底部，进行后续操作<br>    // …<br>  }<br>}, false);</p>\n<p>一个Demo：页面滚动加载的Demo<br>29.渲染几万条数据不卡住页面<br>渲染大数据时，合理使用createDocumentFragment和requestAnimationFrame，将操作切分为一小段一小段执行。<br>setTimeout(() =&gt; {<br>  // 插入十万条数据<br>  const total = 100000;<br>  // 一次插入的数据<br>  const once = 20;<br>  // 插入数据需要的次数<br>  const loopCount = Math.ceil(total / once);<br>  let countOfRender = 0;<br>  const ul = document.querySelector(‘ul’);<br>  // 添加数据的方法<br>  function add() {<br>    const fragment = document.createDocumentFragment();<br>    for(let i = 0; i &lt; once; i++) {<br>      const li = document.createElement(‘li’);<br>      li.innerText = Math.floor(Math.random() * total);<br>      fragment.appendChild(li);<br>    }<br>    ul.appendChild(fragment);<br>    countOfRender += 1;<br>    loop();<br>  }<br>  function loop() {<br>    if(countOfRender &lt; loopCount) {<br>      window.requestAnimationFrame(add);<br>    }<br>  }<br>  loop();<br>}, 0)</p>\n<p>30.打印出当前网页使用了多少种HTML元素<br>一行代码可以解决：<br>const fn = () =&gt; {<br>  return […new Set([…document.querySelectorAll(‘*’)].map(el =&gt; el.tagName))].length;<br>}</p>\n<p>值得注意的是：DOM操作返回的是类数组，需要转换为数组之后才可以调用数组的方法。<br>31.将VirtualDom转化为真实DOM结构<br>这是当前SPA应用的核心概念之一<br>// vnode结构：<br>// {<br>//   tag,<br>//   attrs,<br>//   children,<br>// }</p>\n<p>//Virtual DOM =&gt; DOM<br>function render(vnode, container) {<br>  container.appendChild(_render(vnode));<br>}<br>function _render(vnode) {<br>  // 如果是数字类型转化为字符串<br>  if (typeof vnode === ‘number’) {<br>    vnode = String(vnode);<br>  }<br>  // 字符串类型直接就是文本节点<br>  if (typeof vnode === ‘string’) {<br>    return document.createTextNode(vnode);<br>  }<br>  // 普通DOM<br>  const dom = document.createElement(vnode.tag);<br>  if (vnode.attrs) {<br>    // 遍历属性<br>    Object.keys(vnode.attrs).forEach(key =&gt; {<br>      const value = vnode.attrs[key];<br>      dom.setAttribute(key, value);<br>    })<br>  }<br>  // 子数组进行递归操作<br>  vnode.children.forEach(child =&gt; render(child, dom));<br>  return dom;<br>}</p>\n<p>32.字符串解析问题<br>var a = {<br>    b: 123,<br>    c: ‘456’,<br>    e: ‘789’,<br>}<br>var str=<code>a&#123;a.b&#125;aa&#123;a.c&#125;aa &#123;a.d&#125;aaaa</code>;<br>// =&gt; ‘a123aa456aa {a.d}aaaa’</p>\n<p>实现函数使得将str字符串中的{}内的变量替换，如果属性不存在保持原样（比如{a.d}）<br>类似于模版字符串，但有一点出入，实际上原理大差不差<br>const fn1 = (str, obj) =&gt; {<br>    let res = ‘’;<br>    // 标志位，标志前面是否有{<br>    let flag = false;<br>    let start;<br>    for (let i = 0; i &lt; str.length; i++) {<br>        if (str[i] === ‘{‘) {<br>            flag = true;<br>            start = i + 1;<br>            continue;<br>        }<br>        if (!flag) res += str[i];<br>        else {<br>            if (str[i] === ‘}’) {<br>                flag = false;<br>                res += match(str.slice(start, i), obj);<br>            }<br>        }<br>    }<br>    return res;<br>}<br>// 对象匹配操作<br>const match = (str, obj) =&gt; {<br>    const keys = str.split(‘.’).slice(1);<br>    let index = 0;<br>    let o = obj;<br>    while (index &lt; keys.length) {<br>        const key = keys[index];<br>        if (!o[key]) {<br>            return <code>&#123;$&#123;str&#125;&#125;</code>;<br>        } else {<br>            o = o[key];<br>        }<br>        index++;<br>    }<br>    return o;<br>}</p>\n","site":{"data":{}},"excerpt":"","more":"<p>01.数组扁平化<br>数组扁平化是指将一个多维数组变为一个一维数组<br>const arr = [1, [2, [3, [4, 5]]], 6];<br>// =&gt; [1, 2, 3, 4, 5, 6]</p>\n<p>方法一：使用flat()<br>const res1 = arr.flat(Infinity);</p>\n<p>方法二：利用正则<br>const res2 = JSON.stringify(arr).replace(/[|]/g, ‘’).split(‘,’);</p>\n<p>但数据类型都会变为字符串<br>方法三：正则改良版本<br>const res3 = JSON.parse(‘[‘ + JSON.stringify(arr).replace(/[|]/g, ‘’) + ‘]’);</p>\n<p>方法四：使用reduce<br>const flatten = arr =&gt; {<br>  return arr.reduce((pre, cur) =&gt; {<br>    return pre.concat(Array.isArray(cur) ? flatten(cur) : cur);<br>  }, [])<br>}<br>const res4 = flatten(arr);</p>\n<p>方法五：函数递归<br>const res5 = [];<br>const fn = arr =&gt; {<br>  for (let i = 0; i &lt; arr.length; i++) {<br>    if (Array.isArray(arr[i])) {<br>      fn(arr[i]);<br>    } else {<br>      res5.push(arr[i]);<br>    }<br>  }<br>}<br>fn(arr);</p>\n<p>02.数组去重<br>const arr = [1, 1, ‘1’, 17, true, true, false, false, ‘true’, ‘a’, {}, {}];<br>// =&gt; [1, ‘1’, 17, true, false, ‘true’, ‘a’, {}, {}]</p>\n<p>方法一：利用Set<br>const res1 = Array.from(new Set(arr));</p>\n<p>方法二：两层for循环+splice<br>const unique1 = arr =&gt; {<br>  let len = arr.length;<br>  for (let i = 0; i &lt; len; i++) {<br>    for (let j = i + 1; j &lt; len; j++) {<br>      if (arr[i] === arr[j]) {<br>        arr.splice(j, 1);<br>        // 每删除一个树，j–保证j的值经过自加后不变。同时，len–，减少循环次数提升性能<br>        len–;<br>        j–;<br>      }<br>    }<br>  }<br>  return arr;<br>}</p>\n<p>方法三：利用indexOf<br>const unique2 = arr =&gt; {<br>  const res = [];<br>  for (let i = 0; i &lt; arr.length; i++) {<br>    if (res.indexOf(arr[i]) === -1) res.push(arr[i]);<br>  }<br>  return res;<br>}</p>\n<p>当然也可以用include、filter，思路大同小异。<br>方法四：利用include<br>const unique3 = arr =&gt; {<br>  const res = [];<br>  for (let i = 0; i &lt; arr.length; i++) {<br>    if (!res.includes(arr[i])) res.push(arr[i]);<br>  }<br>  return res;<br>}</p>\n<p>方法五：利用filter<br>const unique4 = arr =&gt; {<br>  return arr.filter((item, index) =&gt; {<br>    return arr.indexOf(item) === index;<br>  });<br>}</p>\n<p>方法六：利用Map<br>const unique5 = arr =&gt; {<br>  const map = new Map();<br>  const res = [];<br>  for (let i = 0; i &lt; arr.length; i++) {<br>    if (!map.has(arr[i])) {<br>      map.set(arr[i], true)<br>      res.push(arr[i]);<br>    }<br>  }<br>  return res;<br>}</p>\n<p>03.类数组转化为数组<br>类数组是具有length属性，但不具有数组原型上的方法。常见的类数组有arguments、DOM操作方法返回的结果。<br>方法一：Array.from<br>Array.from(document.querySelectorAll(‘div’))</p>\n<p>方法二：Array.prototype.slice.call()<br>Array.prototype.slice.call(document.querySelectorAll(‘div’))</p>\n<p>方法三：扩展运算符<br>[…document.querySelectorAll(‘div’)]</p>\n<p>方法四：利用concat<br>Array.prototype.concat.apply([], document.querySelectorAll(‘div’));</p>\n<p>04.Array.prototype.filter()</p>\n<p>Array.prototype.filter = function(callback, thisArg) {<br>  if (this == undefined) {<br>    throw new TypeError(‘this is null or not undefined’);<br>  }<br>  if (typeof callback !== ‘function’) {<br>    throw new TypeError(callback + ‘is not a function’);<br>  }<br>  const res = [];<br>  // 让O成为回调函数的对象传递（强制转换对象）<br>  const O = Object(this);<br>  // &gt;&gt;&gt;0 保证len为number，且为正整数<br>  const len = O.length &gt;&gt;&gt; 0;<br>  for (let i = 0; i &lt; len; i++) {<br>    // 检查i是否在O的属性（会检查原型链）<br>    if (i in O) {<br>      // 回调函数调用传参<br>      if (callback.call(thisArg, O[i], i, O)) {<br>        res.push(O[i]);<br>      }<br>    }<br>  }<br>  return res;<br>}</p>\n<p>对于&gt;&gt;&gt;0有疑问的：解释&gt;&gt;&gt;0的作用<br>05.Array.prototype.map()</p>\n<p>Array.prototype.map = function(callback, thisArg) {<br>  if (this == undefined) {<br>    throw new TypeError(‘this is null or not defined’);<br>  }<br>  if (typeof callback !== ‘function’) {<br>    throw new TypeError(callback + ‘ is not a function’);<br>  }<br>  const res = [];<br>  // 同理<br>  const O = Object(this);<br>  const len = O.length &gt;&gt;&gt; 0;<br>  for (let i = 0; i &lt; len; i++) {<br>    if (i in O) {<br>      // 调用回调函数并传入新数组<br>      res[i] = callback.call(thisArg, O[i], i, this);<br>    }<br>  }<br>  return res;<br>}</p>\n<p>06.Array.prototype.forEach()</p>\n<p>forEach跟map类似，唯一不同的是forEach是没有返回值的。<br>Array.prototype.forEach = function(callback, thisArg) {<br>  if (this == null) {<br>    throw new TypeError(‘this is null or not defined’);<br>  }<br>  if (typeof callback !== “function”) {<br>    throw new TypeError(callback + ‘ is not a function’);<br>  }<br>  const O = Object(this);<br>  const len = O.length &gt;&gt;&gt; 0;<br>  let k = 0;<br>  while (k &lt; len) {<br>    if (k in O) {<br>      callback.call(thisArg, O[k], k, O);<br>    }<br>    k++;<br>  }<br>}</p>\n<p>07.Array.prototype.reduce()</p>\n<p>Array.prototype.reduce = function(callback, initialValue) {<br>  if (this == undefined) {<br>    throw new TypeError(‘this is null or not defined’);<br>  }<br>  if (typeof callback !== ‘function’) {<br>    throw new TypeError(callbackfn + ‘ is not a function’);<br>  }<br>  const O = Object(this);<br>  const len = this.length &gt;&gt;&gt; 0;<br>  let accumulator = initialValue;<br>  let k = 0;<br>  // 如果第二个参数为undefined的情况下<br>  // 则数组的第一个有效值作为累加器的初始值<br>  if (accumulator === undefined) {<br>    while (k &lt; len &amp;&amp; !(k in O)) {<br>      k++;<br>    }<br>    // 如果超出数组界限还没有找到累加器的初始值，则TypeError<br>    if (k &gt;= len) {<br>      throw new TypeError(‘Reduce of empty array with no initial value’);<br>    }<br>    accumulator = O[k++];<br>  }<br>  while (k &lt; len) {<br>    if (k in O) {<br>      accumulator = callback.call(undefined, accumulator, O[k], k, O);<br>    }<br>    k++;<br>  }<br>  return accumulator;<br>}</p>\n<p>08.Function.prototype.apply()<br>第一个参数是绑定的this，默认为window，第二个参数是数组或类数组<br>Function.prototype.apply = function(context = window, args) {<br>  if (typeof this !== ‘function’) {<br>    throw new TypeError(‘Type Error’);<br>  }<br>  const fn = Symbol(‘fn’);<br>  context[fn] = this;</p>\n<p>  const res = context<a href=\"...args\">fn</a>;<br>  delete context[fn];<br>  return res;<br>}</p>\n<p>09.Function.prototype.call<br>于call唯一不同的是，call()方法接受的是一个参数列表<br>Function.prototype.call = function(context = window, …args) {<br>  if (typeof this !== ‘function’) {<br>    throw new TypeError(‘Type Error’);<br>  }<br>  const fn = Symbol(‘fn’);<br>  context[fn] = this;</p>\n<p>  const res = this<a href=\"...args\">fn</a>;<br>  delete this.fn;<br>  return res;<br>}</p>\n<p>10.Function.prototype.bind<br>Function.prototype.bind = function(context, …args) {<br>  if (typeof this !== ‘function’) {<br>    throw new Error(“Type Error”);<br>  }<br>  // 保存this的值<br>  var self = this;</p>\n<p>  return function F() {<br>    // 考虑new的情况<br>    if(this instanceof F) {<br>      return new self(…args, …arguments)<br>    }<br>    return self.apply(context, […args, …arguments])<br>  }<br>}</p>\n<p>11.debounce（防抖）<br>触发高频时间后n秒内函数只会执行一次,如果n秒内高频时间再次触发,则重新计算时间。<br>const debounce = (fn, time) =&gt; {<br>  let timeout = null;<br>  return function() {<br>    clearTimeout(timeout)<br>    timeout = setTimeout(() =&gt; {<br>      fn.apply(this, arguments);<br>    }, time);<br>  }<br>};</p>\n<p>防抖常应用于用户进行搜索输入节约请求资源，window触发resize事件时进行防抖只触发一次。<br>12.throttle（节流）<br>高频时间触发,但n秒内只会执行一次,所以节流会稀释函数的执行频率。<br>const throttle = (fn, time) =&gt; {<br>  let flag = true;<br>  return function() {<br>    if (!flag) return;<br>    flag = false;<br>    setTimeout(() =&gt; {<br>      fn.apply(this, arguments);<br>      flag = true;<br>    }, time);<br>  }<br>}</p>\n<p>节流常应用于鼠标不断点击触发、监听滚动事件。<br>13.函数珂里化</p>\n<p>指的是将一个接受多个参数的函数 变为 接受一个参数返回一个函数的固定形式，这样便于再次调用，例如f(1)(2)</p>\n<p>经典面试题：实现add(1)(2)(3)(4)=10; 、 add(1)(1,2,3)(2)=9;<br>function add() {<br>  const _args = […arguments];<br>  function fn() {<br>    _args.push(…arguments);<br>    return fn;<br>  }<br>  fn.toString = function() {<br>    return _args.reduce((sum, cur) =&gt; sum + cur);<br>  }<br>  return fn;<br>}</p>\n<p>14.模拟new操作<br>3个步骤：</p>\n<p>以ctor.prototype为原型创建一个对象。<br>执行构造函数并将this绑定到新创建的对象上。<br>判断构造函数执行返回的结果是否是引用数据类型，若是则返回构造函数执行的结果，否则返回创建的对象。</p>\n<p>function newOperator(ctor, …args) {<br>  if (typeof ctor !== ‘function’) {<br>    throw new TypeError(‘Type Error’);<br>  }<br>  const obj = Object.create(ctor.prototype);<br>  const res = ctor.apply(obj, args);</p>\n<p>  const isObject = typeof res === ‘object’ &amp;&amp; res !== null;<br>  const isFunction = typeof res === ‘function’;<br>  return isObject || isFunction ? res : obj;<br>}</p>\n<p>15.instanceof<br>instanceof运算符用于检测构造函数的prototype属性是否出现在某个实例对象的原型链上。<br>const myInstanceof = (left, right) =&gt; {<br>  // 基本数据类型都返回false<br>  if (typeof left !== ‘object’ || left === null) return false;<br>  let proto = Object.getPrototypeOf(left);<br>  while (true) {<br>    if (proto === null) return false;<br>    if (proto === right.prototype) return true;<br>    proto = Object.getPrototypeOf(proto);<br>  }<br>}</p>\n<p>16.原型继承<br>这里只写寄生组合继承了，中间还有几个演变过来的继承但都有一些缺陷<br>function Parent5) {<br>  this.name = ‘parent’;<br>}<br>function Child() {<br>  Parent.call(this);<br>  this.type = ‘children’;<br>}<br>Child.prototype = Object.create(Parent.prototype);<br>Child.prototype.constructor = Child;</p>\n<p>17.Object.is<br>Object.is解决的主要是这两个问题：<br>+0 === -0  // true<br>NaN === NaN // false</p>\n<p>const is= (x, y) =&gt; {<br>  if (x === y) {<br>    // +0和-0应该不相等<br>    return x !== 0 || y !== 0 || 1/x === 1/y;<br>  } else {<br>    return x !== x &amp;&amp; y !== y;<br>  }<br>}</p>\n<p>18.Object.assign<br>Object.assign()方法用于将所有可枚举属性的值从一个或多个源对象复制到目标对象。它将返回目标对象（请注意这个操作是浅拷贝）<br>Object.defineProperty(Object, ‘assign’, {<br>  value: function(target, …args) {<br>    if (target == null) {<br>      return new TypeError(‘Cannot convert undefined or null to object’);<br>    }</p>\n<pre><code>// 目标对象需要统一是引用数据类型，若不是会自动转换\nconst to = Object(target);\n\nfor (let i = 0; i &lt; args.length; i++) &#123;\n  // 每一个源对象\n  const nextSource = args[i];\n  if (nextSource !== null) &#123;\n    // 使用for...in和hasOwnProperty双重判断，确保只拿到本身的属性、方法（不包含继承的）\n    for (const nextKey in nextSource) &#123;\n      if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) &#123;\n        to[nextKey] = nextSource[nextKey];\n      &#125;\n    &#125;\n  &#125;\n&#125;\nreturn to;</code></pre>\n<p>  },<br>  // 不可枚举<br>  enumerable: false,<br>  writable: true,<br>  configurable: true,<br>})</p>\n<p>19.深拷贝<br>递归的完整版本（考虑到了Symbol属性）：<br>const cloneDeep1 = (target, hash = new WeakMap()) =&gt; {<br>  // 对于传入参数处理<br>  if (typeof target !== ‘object’ || target === null) {<br>    return target;<br>  }<br>  // 哈希表中存在直接返回<br>  if (hash.has(target)) return hash.get(target);</p>\n<p>  const cloneTarget = Array.isArray(target) ? [] : {};<br>  hash.set(target, cloneTarget);</p>\n<p>  // 针对Symbol属性<br>  const symKeys = Object.getOwnPropertySymbols(target);<br>  if (symKeys.length) {<br>    symKeys.forEach(symKey =&gt; {<br>      if (typeof target[symKey] === ‘object’ &amp;&amp; target[symKey] !== null) {<br>        cloneTarget[symKey] = cloneDeep1(target[symKey]);<br>      } else {<br>        cloneTarget[symKey] = target[symKey];<br>      }<br>    })<br>  }</p>\n<p>  for (const i in target) {<br>    if (Object.prototype.hasOwnProperty.call(target, i)) {<br>      cloneTarget[i] =<br>        typeof target[i] === ‘object’ &amp;&amp; target[i] !== null<br>        ? cloneDeep1(target[i], hash)<br>        : target[i];<br>    }<br>  }<br>  return cloneTarget;<br>}</p>\n<p>20.Promise<br>实现思路：Promise源码实现<br>const PENDING = ‘PENDING’;      // 进行中<br>const FULFILLED = ‘FULFILLED’;  // 已成功<br>const REJECTED = ‘REJECTED’;    // 已失败</p>\n<p>class Promise {<br>  constructor(exector) {<br>    // 初始化状态<br>    this.status = PENDING;<br>    // 将成功、失败结果放在this上，便于then、catch访问<br>    this.value = undefined;<br>    this.reason = undefined;<br>    // 成功态回调函数队列<br>    this.onFulfilledCallbacks = [];<br>    // 失败态回调函数队列<br>    this.onRejectedCallbacks = [];</p>\n<pre><code>const resolve = value =&gt; &#123;\n  // 只有进行中状态才能更改状态\n  if (this.status === PENDING) &#123;\n    this.status = FULFILLED;\n    this.value = value;\n    // 成功态函数依次执行\n    this.onFulfilledCallbacks.forEach(fn =&gt; fn(this.value));\n  &#125;\n&#125;\nconst reject = reason =&gt; &#123;\n  // 只有进行中状态才能更改状态\n  if (this.status === PENDING) &#123;\n    this.status = REJECTED;\n    this.reason = reason;\n    // 失败态函数依次执行\n    this.onRejectedCallbacks.forEach(fn =&gt; fn(this.reason))\n  &#125;\n&#125;\ntry &#123;\n  // 立即执行executor\n  // 把内部的resolve和reject传入executor，用户可调用resolve和reject\n  exector(resolve, reject);\n&#125; catch(e) &#123;\n  // executor执行出错，将错误内容reject抛出去\n  reject(e);\n&#125;</code></pre>\n<p>  }<br>  then(onFulfilled, onRejected) {<br>    onFulfilled = typeof onFulfilled === ‘function’ ? onFulfilled : value =&gt; value;<br>    onRejected = typeof onRejected === ‘function’? onRejected:<br>      reason =&gt; { throw new Error(reason instanceof Error ? reason.message:reason) }<br>    // 保存this<br>    const self = this;<br>    return new Promise((resolve, reject) =&gt; {<br>      if (self.status === PENDING) {<br>        self.onFulfilledCallbacks.push(() =&gt; {<br>          // try捕获错误<br>          try {<br>            // 模拟微任务<br>            setTimeout(() =&gt; {<br>              const result = onFulfilled(self.value);<br>              // 分两种情况：<br>              // 1. 回调函数返回值是Promise，执行then操作<br>              // 2. 如果不是Promise，调用新Promise的resolve函数<br>              result instanceof Promise ? result.then(resolve, reject) : resolve(result);<br>            })<br>          } catch(e) {<br>            reject(e);<br>          }<br>        });<br>        self.onRejectedCallbacks.push(() =&gt; {<br>          // 以下同理<br>          try {<br>            setTimeout(() =&gt; {<br>              const result = onRejected(self.reason);<br>              // 不同点：此时是reject<br>              result instanceof Promise ? result.then(resolve, reject) : reject(result);<br>            })<br>          } catch(e) {<br>            reject(e);<br>          }<br>        })<br>      } else if (self.status === FULFILLED) {<br>        try {<br>          setTimeout(() =&gt; {<br>            const result = onFulfilled(self.value);<br>            result instanceof Promise ? result.then(resolve, reject) : resolve(result);<br>          });<br>        } catch(e) {<br>          reject(e);<br>        }<br>      } else if (self.status === REJECTED){<br>        try {<br>          setTimeout(() =&gt; {<br>            const result = onRejected(self.reason);<br>            result instanceof Promise ? result.then(resolve, reject) : reject(result);<br>          })<br>        } catch(e) {<br>          reject(e);<br>        }<br>      }<br>    });<br>  }<br>  catch(onRejected) {<br>    return this.then(null, onRejected);<br>  }<br>  static resolve(value) {<br>    if (value instanceof Promise) {<br>      // 如果是Promise实例，直接返回<br>      return value;<br>    } else {<br>      // 如果不是Promise实例，返回一个新的Promise对象，状态为FULFILLED<br>      return new Promise((resolve, reject) =&gt; resolve(value));<br>    }<br>  }<br>  static reject(reason) {<br>    return new Promise((resolve, reject) =&gt; {<br>      reject(reason);<br>    })<br>  }<br>}</p>\n<p>21.Promise.all<br>Promise.all是支持链式调用的，本质上就是返回了一个Promise实例，通过resolve和reject来改变实例状态。<br>Promise.myAll = function(promiseArr) {<br>  return new Promise((resolve, reject) =&gt; {<br>    const ans = [];<br>    let index = 0;<br>    for (let i = 0; i &lt; promiseArr.length; i++) {<br>      promiseArr[i]<br>      .then(res =&gt; {<br>        ans[i] = res;<br>        index++;<br>        if (index === promiseArr.length) {<br>          resolve(ans);<br>        }<br>      })<br>      .catch(err =&gt; reject(err));<br>    }<br>  })<br>}</p>\n<p>22.Promise.race<br>Promise.race = function(promiseArr) {<br>  return new Promise((resolve, reject) =&gt; {<br>    promiseArr.forEach(p =&gt; {<br>      // 如果不是Promise实例需要转化为Promise实例<br>      Promise.resolve(p).then(<br>        val =&gt; resolve(val),<br>        err =&gt; reject(err),<br>      )<br>    })<br>  })<br>}</p>\n<p>23.Promise并行限制<br>就是实现有并行限制的Promise调度器问题。<br>详细实现思路：某条高频面试原题：实现有并行限制的Promise调度器<br>class Scheduler {<br>  constructor() {<br>    this.queue = [];<br>    this.maxCount = 2;<br>    this.runCounts = 0;<br>  }<br>  add(promiseCreator) {<br>    this.queue.push(promiseCreator);<br>  }<br>  taskStart() {<br>    for (let i = 0; i &lt; this.maxCount; i++) {<br>      this.request();<br>    }<br>  }<br>  request() {<br>    if (!this.queue || !this.queue.length || this.runCounts &gt;= this.maxCount) {<br>      return;<br>    }<br>    this.runCounts++;</p>\n<pre><code>this.queue.shift()().then(() =&gt; &#123;\n  this.runCounts--;\n  this.request();\n&#125;);</code></pre>\n<p>  }<br>}</p>\n<p>const timeout = time =&gt; new Promise(resolve =&gt; {<br>  setTimeout(resolve, time);<br>})</p>\n<p>const scheduler = new Scheduler();</p>\n<p>const addTask = (time,order) =&gt; {<br>  scheduler.add(() =&gt; timeout(time).then(()=&gt;console.log(order)))<br>}</p>\n<p>addTask(1000, ‘1’);<br>addTask(500, ‘2’);<br>addTask(300, ‘3’);<br>addTask(400, ‘4’);<br>scheduler.taskStart()<br>// 2<br>// 3<br>// 1<br>// 4</p>\n<p>24.JSONP<br>script标签不遵循同源协议，可以用来进行跨域请求，优点就是兼容性好但仅限于GET请求<br>const jsonp = ({ url, params, callbackName }) =&gt; {<br>  const generateUrl = () =&gt; {<br>    let dataSrc = ‘’;<br>    for (let key in params) {<br>      if (Object.prototype.hasOwnProperty.call(params, key)) {<br>        dataSrc += <code>$&#123;key&#125;=$&#123;params[key]&#125;&amp;</code>;<br>      }<br>    }<br>    dataSrc += <code>callback=$&#123;callbackName&#125;</code>;<br>    return <code>$&#123;url&#125;?$&#123;dataSrc&#125;</code>;<br>  }<br>  return new Promise((resolve, reject) =&gt; {<br>    const scriptEle = document.createElement(‘script’);<br>    scriptEle.src = generateUrl();<br>    document.body.appendChild(scriptEle);<br>    window[callbackName] = data =&gt; {<br>      resolve(data);<br>      document.removeChild(scriptEle);<br>    }<br>  })<br>}</p>\n<p>25.AJAX<br>const getJSON = function(url) {<br>  return new Promise((resolve, reject) =&gt; {<br>    const xhr = XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject(‘Mscrosoft.XMLHttp’);<br>    xhr.open(‘GET’, url, false);<br>    xhr.setRequestHeader(‘Accept’, ‘application/json’);<br>    xhr.onreadystatechange = function() {<br>      if (xhr.readyState !== 4) return;<br>      if (xhr.status === 200 || xhr.status === 304) {<br>        resolve(xhr.responseText);<br>      } else {<br>        reject(new Error(xhr.responseText));<br>      }<br>    }<br>    xhr.send();<br>  })<br>}</p>\n<p>26.event模块<br>实现node中回调函数的机制，node中回调函数其实是内部使用了观察者模式。</p>\n<p>观察者模式：定义了对象间一种一对多的依赖关系，当目标对象Subject发生改变时，所有依赖它的对象Observer都会得到通知。</p>\n<p>function EventEmitter() {<br>  this.events = new Map();<br>}</p>\n<p>// 需要实现的一些方法：<br>// addListener、removeListener、once、removeAllListeners、emit</p>\n<p>// 模拟实现addlistener方法<br>const wrapCallback = (fn, once = false) =&gt; ({ callback: fn, once });<br>EventEmitter.prototype.addListener = function(type, fn, once = false) {<br>  const hanlder = this.events.get(type);<br>  if (!hanlder) {<br>    // 没有type绑定事件<br>    this.events.set(type, wrapCallback(fn, once));<br>  } else if (hanlder &amp;&amp; typeof hanlder.callback === ‘function’) {<br>    // 目前type事件只有一个回调<br>    this.events.set(type, [hanlder, wrapCallback(fn, once)]);<br>  } else {<br>    // 目前type事件数&gt;=2<br>    hanlder.push(wrapCallback(fn, once));<br>  }<br>}<br>// 模拟实现removeListener<br>EventEmitter.prototype.removeListener = function(type, listener) {<br>  const hanlder = this.events.get(type);<br>  if (!hanlder) return;<br>  if (!Array.isArray(this.events)) {<br>    if (hanlder.callback === listener.callback) this.events.delete(type);<br>    else return;<br>  }<br>  for (let i = 0; i &lt; hanlder.length; i++) {<br>    const item = hanlder[i];<br>    if (item.callback === listener.callback) {<br>      hanlder.splice(i, 1);<br>      i–;<br>      if (hanlder.length === 1) {<br>        this.events.set(type, hanlder[0]);<br>      }<br>    }<br>  }<br>}<br>// 模拟实现once方法<br>EventEmitter.prototype.once = function(type, listener) {<br>  this.addListener(type, listener, true);<br>}<br>// 模拟实现emit方法<br>EventEmitter.prototype.emit = function(type, …args) {<br>  const hanlder = this.events.get(type);<br>  if (!hanlder) return;<br>  if (Array.isArray(hanlder)) {<br>    hanlder.forEach(item =&gt; {<br>      item.callback.apply(this, args);<br>      if (item.once) {<br>        this.removeListener(type, item);<br>      }<br>    })<br>  } else {<br>    hanlder.callback.apply(this, args);<br>    if (hanlder.once) {<br>      this.events.delete(type);<br>    }<br>  }<br>  return true;<br>}<br>EventEmitter.prototype.removeAllListeners = function(type) {<br>  const hanlder = this.events.get(type);<br>  if (!hanlder) return;<br>  this.events.delete(type);<br>}</p>\n<p>27.图片懒加载<br>可以给img标签统一自定义属性data-src=’default.png’，当检测到图片出现在窗口之后再补充src属性，此时才会进行图片资源加载。<br>function lazyload() {<br>  const imgs = document.getElementsByTagName(‘img’);<br>  const len = imgs.length;<br>  // 视口的高度<br>  const viewHeight = document.documentElement.clientHeight;<br>  // 滚动条高度<br>  const scrollHeight = document.documentElement.scrollTop || document.body.scrollTop;<br>  for (let i = 0; i &lt; len; i++) {<br>    const offsetHeight = imgs[i].offsetTop;<br>    if (offsetHeight &lt; viewHeight + scrollHeight) {<br>      const src = imgs[i].dataset.src;<br>      imgs[i].src = src;<br>    }<br>  }<br>}</p>\n<p>// 可以使用节流优化一下<br>window.addEventListener(‘scroll’, lazyload);</p>\n<p>28.滚动加载<br>原理就是监听页面滚动事件，分析clientHeight、scrollTop、scrollHeight三者的属性关系。<br>window.addEventListener(‘scroll’, function() {<br>  const clientHeight = document.documentElement.clientHeight;<br>  const scrollTop = document.documentElement.scrollTop;<br>  const scrollHeight = document.documentElement.scrollHeight;<br>  if (clientHeight + scrollTop &gt;= scrollHeight) {<br>    // 检测到滚动至页面底部，进行后续操作<br>    // …<br>  }<br>}, false);</p>\n<p>一个Demo：页面滚动加载的Demo<br>29.渲染几万条数据不卡住页面<br>渲染大数据时，合理使用createDocumentFragment和requestAnimationFrame，将操作切分为一小段一小段执行。<br>setTimeout(() =&gt; {<br>  // 插入十万条数据<br>  const total = 100000;<br>  // 一次插入的数据<br>  const once = 20;<br>  // 插入数据需要的次数<br>  const loopCount = Math.ceil(total / once);<br>  let countOfRender = 0;<br>  const ul = document.querySelector(‘ul’);<br>  // 添加数据的方法<br>  function add() {<br>    const fragment = document.createDocumentFragment();<br>    for(let i = 0; i &lt; once; i++) {<br>      const li = document.createElement(‘li’);<br>      li.innerText = Math.floor(Math.random() * total);<br>      fragment.appendChild(li);<br>    }<br>    ul.appendChild(fragment);<br>    countOfRender += 1;<br>    loop();<br>  }<br>  function loop() {<br>    if(countOfRender &lt; loopCount) {<br>      window.requestAnimationFrame(add);<br>    }<br>  }<br>  loop();<br>}, 0)</p>\n<p>30.打印出当前网页使用了多少种HTML元素<br>一行代码可以解决：<br>const fn = () =&gt; {<br>  return […new Set([…document.querySelectorAll(‘*’)].map(el =&gt; el.tagName))].length;<br>}</p>\n<p>值得注意的是：DOM操作返回的是类数组，需要转换为数组之后才可以调用数组的方法。<br>31.将VirtualDom转化为真实DOM结构<br>这是当前SPA应用的核心概念之一<br>// vnode结构：<br>// {<br>//   tag,<br>//   attrs,<br>//   children,<br>// }</p>\n<p>//Virtual DOM =&gt; DOM<br>function render(vnode, container) {<br>  container.appendChild(_render(vnode));<br>}<br>function _render(vnode) {<br>  // 如果是数字类型转化为字符串<br>  if (typeof vnode === ‘number’) {<br>    vnode = String(vnode);<br>  }<br>  // 字符串类型直接就是文本节点<br>  if (typeof vnode === ‘string’) {<br>    return document.createTextNode(vnode);<br>  }<br>  // 普通DOM<br>  const dom = document.createElement(vnode.tag);<br>  if (vnode.attrs) {<br>    // 遍历属性<br>    Object.keys(vnode.attrs).forEach(key =&gt; {<br>      const value = vnode.attrs[key];<br>      dom.setAttribute(key, value);<br>    })<br>  }<br>  // 子数组进行递归操作<br>  vnode.children.forEach(child =&gt; render(child, dom));<br>  return dom;<br>}</p>\n<p>32.字符串解析问题<br>var a = {<br>    b: 123,<br>    c: ‘456’,<br>    e: ‘789’,<br>}<br>var str=<code>a&#123;a.b&#125;aa&#123;a.c&#125;aa &#123;a.d&#125;aaaa</code>;<br>// =&gt; ‘a123aa456aa {a.d}aaaa’</p>\n<p>实现函数使得将str字符串中的{}内的变量替换，如果属性不存在保持原样（比如{a.d}）<br>类似于模版字符串，但有一点出入，实际上原理大差不差<br>const fn1 = (str, obj) =&gt; {<br>    let res = ‘’;<br>    // 标志位，标志前面是否有{<br>    let flag = false;<br>    let start;<br>    for (let i = 0; i &lt; str.length; i++) {<br>        if (str[i] === ‘{‘) {<br>            flag = true;<br>            start = i + 1;<br>            continue;<br>        }<br>        if (!flag) res += str[i];<br>        else {<br>            if (str[i] === ‘}’) {<br>                flag = false;<br>                res += match(str.slice(start, i), obj);<br>            }<br>        }<br>    }<br>    return res;<br>}<br>// 对象匹配操作<br>const match = (str, obj) =&gt; {<br>    const keys = str.split(‘.’).slice(1);<br>    let index = 0;<br>    let o = obj;<br>    while (index &lt; keys.length) {<br>        const key = keys[index];<br>        if (!o[key]) {<br>            return <code>&#123;$&#123;str&#125;&#125;</code>;<br>        } else {<br>            o = o[key];<br>        }<br>        index++;<br>    }<br>    return o;<br>}</p>\n"},{"layout":"post","title":"vue3傻瓜式入门","date":"2020-09-20T10:48:17.000Z","_content":"\n可任选一种创建方式\n我个人还是采用的脚手架\n升级（即重装）\nnpm install -g @vue/cli # OR yarn global add @vue/cli\nvue create hello-vue3\n下面和原来不同的就是多了个选择版本的，选择vue3上手即可\n\n<h2>一、重点</h2>\n先以下面官网所列出的显著的为主（后三个先忽略）\n\n<h3>1.1. composition API</h3>\n别不管 Options API 与composition API 比较，我们先直接上手composition API \ncomposition API 入口点setup函数\n创建响应式数据 ref与reactive\nref\nref函数接一个参数返回一个响应式的ref对象\n直接看栗子\n\n<xmp><srcript>\n  <div>\n      {{num}}\n  </div>\n</xmp></template>\n<xmp><srcript>\nimport { ref } from \"vue\";\nexport default {\n  setup() {\n    const num = ref(1);\n    return { num };\n  },\n};\n</srcript>\n</xmp>\n也即和vue2.x中的这种写法是一样的\ndata(){\n    return {\n        num:1\n    }\n}\n\n值得注意的是：ref返回的是一个对象，需要通过它的value属性拿到它的值\n也即num.value。不过在模板中使用时他会自动解。也就是上面栗子中模板直接使用num，还有一种可自动解的情况先看下面\n另外现在就可以理解ref是用来把简单类型的数据进行响应式化的\nreactive\nref负责简单数据数据，则reactive就是将引用类型的数据进行响应式化\n直接看栗子\n\n<xmp><srcript>\n  <div>{{num}}{{obj.name}}</div>\n</xmp></template>\n<xmp><srcript>\nimport { ref, reactive } from \"vue\";\nexport default {\n  setup() {\n    const num = ref(1);\n    const obj = reactive({\n      name: \"gxb\",\n      age: 18,\n    });\n    return { num, obj };\n  },\n};\n</srcript>\n</xmp>\n\n上面的ref对象自动解套的另一种情况也即在这里它作为reactive函数参数对象的一属性\n即:\n const num = ref(1);\nconst obj = reactive({\n      name: \"gxb\",\n      age: 18,\n      num\n    });\n\n值得注意的是：这里不要随意使用...语法或者解构，否则会丧失响应式性质，最后的工具函数那再写栗子介绍\nreadonly\n这个函数，参数可以一个响应式或者普通的对象再或者是个ref。返回的是一个只读代理（深层的）\n栗子\n![](1.png)\ncomputed 与 watch\ncomputed\ncomputed是一个函数，它需要传一个getter函数。其返回值是一个不可手动修改的ref对象\n栗子\n\n<xmp><srcript>\n  <div>{{num2}}</div>\n</xmp></template>\n<xmp><srcript>\nimport { ref, reactive, computed } from \"vue\";\nexport default {\n  setup() {\n    const num = ref(1);\n    const obj = reactive({\n      name: \"gxb\",\n      age: 18,\n      num,\n    });\n    const num2 = computed(() => num.value + 1);\n    return { num, obj, num2 };\n  },\n};\n</srcript>\n</xmp>\n\n注意不可修改\n如\n const num2=computed(()=>num.value+1)\n    num2.value++\n\n\n想要一个可以进行修改的，就需传一个具有get和set函数的对象\n<xmp><srcript>\n  <div>{{num2.value}}</div>\n</xmp></template>\n<xmp><srcript>\nimport { ref, reactive, computed } from \"vue\";\nexport default {\n  setup() {\n    const num = ref(1);\n    const obj = reactive({\n      name: \"gxb\",\n      age: 18,\n      num,\n    });\n    const num2 = computed({\n        get:()=>num,\n        set:value=>num.value=value\n    });\n    \n    num2.value=3\n    return { num, obj, num2 };\n  },\n};\n</srcript></xmp>\n\n要注意的是，此时num2这个ref对象不会在自动解套了\nwatch\n监听一个\n<xmp><srcript>\n  <div>{{num2.value}}</div>\n</xmp></template>\n<xmp><srcript>\nimport { ref, reactive, computed, watch } from \"vue\";\nexport default {\n  setup() {\n    const obj = reactive({\n      name: \"gxb\",\n      age: 18,\n      num,\n    });\n\n    watch(\n      () => obj.name,\n      (name, preName) => {\n        console.log(`new ${name}---old ${preName}`);\n      }\n    );\n    setTimeout(() => {\n      obj.name = \"zhangsan\";\n    }, 1000);\n\n    return { obj };\n  },\n};\n</srcript></xmp>\n\n\n第一参除了可以是上面那种有返回值的getter函数，也可以是一个ref对象\n即\n<xmp><srcript>\n  <div></div>\n</xmp></template>\n<xmp><srcript>\nimport { ref, reactive, computed, watch } from \"vue\";\nexport default {\n  setup() {\n    const obj = reactive({\n      name: \"gxb\",\n      age: 18,\n      num,\n    });\n    const num = ref(0);\n    watch(num, (name, preName) => {\n      console.log(`new ${name}---old ${preName}`);\n    });\n    setTimeout(() => {\n      num.value = 2;\n    }, 1000);\n\n    return { obj };\n  },\n};\n</srcript></xmp>\n\n\n监听多个\n即如下只要num或obj.name有一个发生变动就触发监听器处理回调\n<xmp><srcript>\n  <div></div>\n</xmp></template>\n<xmp><srcript>\nimport { ref, reactive, computed, watch } from \"vue\";\nexport default {\n  setup() {\n    const obj = reactive({\n      name: \"gxb\",\n      age: 18,\n      num,\n    });\n    const num = ref(0);\n    watch([num, ()=>obj.name], ([newNum, newName], [oldNum, oldName]) => {\n      console.log(`new ${(newNum)},${(newName)}---old ${(oldNum)},${oldName}`);\n    });\n    setTimeout(() => {\n      num.value = 6;\n    //   obj.name = \"zhangsan\";\n    }, 1000);\n\n    return { obj };\n  },\n};\n</srcript></xmp>\n\n生命周期钩子\n栗子\nimport { onMounted, onUpdated, onUnmounted } from 'vue'\n\nconst MyComponent = {\n  setup() {\n    onMounted(() => {\n      console.log('mounted!')\n    })\n    onUpdated(() => {\n      console.log('updated!')\n    })\n    onUnmounted(() => {\n      console.log('unmounted!')\n    })\n  },\n}\n\n对应2.x钩子\n\nprops和this\nprops\nsetup这个入口函数接收的第一个参数就是props\n栗子\n\n这里需要注意，不要随便进行解构\n即图省事\n  props: {\n    data: String,\n  },\n  setup({ data }) {\n    console.log(data);\n  }\n\n解构会使其丧失响应式的\nthis\n2.x中拿组件实例实例很好拿，一般就是直接this，但是setup则不同。\n但是组件实例上有许多api我们还是要使用的\n故setup的第二个参数是一个上下文对象\n栗子:派发一个自定义事件\n\n值得注意的是这个context只是选择性的暴露了一些属性，如上面的emit还有attrs、slots\n依赖注入与Refs\n依赖注入\n和vue2.x的provide和inject基本一样\n栗子\n\n为图简单我用的一个组件举例\n\n它们的响应式需要自己出来一下（如用ref）\nRefs\n如拿下面这个节点\n\n<xmp><srcript>\n  <div ref=\"test\">test</div>\n</xmp></template>\n<xmp><srcript>\nimport {\n  ref,\n  reactive,\n  computed,\n  watch,\n  provide,\n  inject,\n  onMounted,\n} from \"vue\";\nexport default {\n  setup() {\n    const test = ref(null);\n    onMounted(() => {\n      console.log(test.value);\n    });\n\n    return { test };\n  },\n};\n</srcript></xmp>\n\n\n一些工具函数\n先来写下破坏reactive生成的响应对象代理的栗子\n首先正常写法\n<xmp><srcript>\n  <div ref=\"test\">\n    {{obj.age}}\n    <button @click=\"obj.age++\">add</button>\n  </div>\n</xmp></template>\n<xmp><srcript>\nimport { ref, reactive, computed, watch, provide, inject, readonly } from \"vue\";\nexport default {\n  props: {\n    data: String,\n  },\n  setup(props, context) {\n    console.log(props.data);\n    context.emit(\"test\");\n    const obj = reactive({\n      name: \"gxb\",\n      age: 18,\n\n    });\n\n    return { obj };\n  },\n};\n</srcript></xmp>\n\n\n使用扩展语法\n<xmp><srcript>\n  <div ref=\"test\">\n    {{age}}\n    <button @click=\"age++\">add</button>\n  </div>\n</xmp></template>\n<xmp><srcript>\nimport { ref, reactive, computed, watch, provide, inject, readonly } from \"vue\";\nexport default {\n  props: {\n    data: String,\n  },\n  setup(props, context) {\n    console.log(props.data);\n    context.emit(\"test\");\n    const obj = reactive({\n      name: \"gxb\",\n      age: 18,\n\n    });\n\n    return { ...obj };\n  },\n};\n</srcript></xmp>\n\n\n解构出来的同样不行\n<xmp><srcript>\n  <div ref=\"test\">\n    {{age}}\n    <button @click=\"age++\">add</button>\n  </div>\n</xmp></template>\n<xmp><srcript>\nimport { ref, reactive, computed, watch, provide, inject, readonly } from \"vue\";\nexport default {\n  props: {\n    data: String,\n  },\n  setup(props, context) {\n    console.log(props.data);\n    context.emit(\"test\");\n    const obj = reactive({\n      name: \"gxb\",\n      age: 18,\n    });\n    const { age } = obj;\n    return { age };\n  },\n};\n</srcript></xmp>\n\n这个的原理也很简单，reactive的内部原理是Proxy，它操作均在返回的代理实例上\n下面开始介绍几个工具函数\n\nunref，参数是一个ref则返回这个ref的value属性，否则返本身\ntoRef，给一个 reactive 对象的属性创建一个 ref \ntoRefs， 把一个响应式对象转换成普通对象，该普通对象的每个 property 都是一个 ref  \nisRef，判断一个值是否是ref\nisProxy，判断一个对象是否是由 reactive 或者 readonly 方法创建的代理。\nisReactive，判断一个对象是否是由 reactive 创建的响应式代理 \nisReadonly，判断一个对象是否是由 readonly 创建的只读代理。 \n\n仅给2、3写个例子吧\ntoRef，即把reactive 对象上的一个属性变成ref\n什么意思呢，还是看上面的破坏了响应式的栗子\n修复一下(即可把它一个属性抽出来做成响应式的ref，且它们还是互相关联的)\n\n<xmp><srcript>\n  <div ref=\"test\">\n    {{age}}\n    <button @click=\"age++\">add</button>\n  </div>\n</xmp></template>\n<xmp><srcript>\nimport {\n  ref,\n  reactive,\n  computed,\n  watch,\n  provide,\n  inject,\n  readonly,\n  toRef,\n} from \"vue\";\nexport default {\n  props: {\n    data: String,\n  },\n  setup(props, context) {\n    const obj = reactive({\n      name: \"gxb\",\n      age: 18,\n    });\n    const age=toRef(obj, \"age\");\n    watch(()=>obj.age,(newAge,oldAge)=>{\n        console.log(newAge);\n    })\n    return { age };\n  },\n};\n</srcript>\n</xmp>\n\ntoRefs则是把这个对象里面的所有属性均整成ref，这个修复则更简单了\n\n<xmp><srcript>\n  <div ref=\"test\">\n    {{age}}\n    <button @click=\"age++\">add</button>\n  </div>\n</xmp></template>\n<xmp><srcript>\nimport {\n  ref,\n  reactive,\n  computed,\n  watch,\n  provide,\n  inject,\n  readonly,\n  toRef,\n  toRefs\n} from \"vue\";\nexport default {\n  props: {\n    data: String,\n  },\n  setup(props, context) {\n    const obj = reactive({\n      name: \"gxb\",\n      age: 18,\n    });\n    const obj02=toRefs(obj);\n    \n    return { ...obj02 };\n  },\n};\n</srcript></xmp>\n\n<h2>1.2. Teleport</h2>\n传送门，顾名思义\n场景：某一些组件中我们可能需要一个模态框的功能，然而虽然逻辑上来说这个模态框是属于该组件中的，但是实际操作一般需要把这个框子挂到body上。Teleport 组件就是帮我们处理这个问题的\n来看栗子\n假设组件中需要有一个模态框\n<xmp><srcript>\n    <div>\n        <model></model>\n    </div>\n</xmp></template>\n<xmp><srcript>\nimport Model from './model'\nexport default {\n    components:{Model}\n}\n</srcript>\n</xmp>\n模态框组件\n\n<xmp><srcript>\n  <div>\n    <button @click=\"flag=true\">点击</button>\n    <teleport to=\"body\">\n      <div v-if=\"flag\">\n        <div>模态框</div>\n      </div>\n    </teleport>\n  </div>\n</xmp></template>\n<xmp><srcript>\nimport { ref } from \"vue\";\nexport default {\n  setup() {\n    const flag = ref(false);\n    return { flag };\n  },\n};\n</srcript>\n</xmp>\n即teleport组件的作用就是把teleport标签里面的元素传送到body上去\n\n再看层级\n\n<h2>1.3. Fragments</h2>\n这个的理解就更简单了\n原来只能这样:即只允许存在一个最外层的父元素div\n\n<xmp><srcript>\n  <div>\n    ...\n  </div>\n</xmp></template>\n</xmp>\n现在可多个\n\n<xmp><srcript>\n  <div>\n    ...\n  </div>\n  <div>\n    ...\n  </div>\n    ...\n</xmp></template>\n</xmp>\n<h2>1.4. Emits Component Option</h2>\n<h3>1.4.1 自定义事件派发</h3>\n这里的重点：即多了一个派发事件的选项emits\n也就我们以后再次使用emit派发一个事件的时候需要把这此派发的事件名放到选项里\n栗子:\n\n<xmp><srcript>\n  <div>\n    <button @click=\"$emit('test')\">点击</button>\n  </div>\n</xmp></template>\n<xmp><srcript>\nexport default {\n  emits: [\"test\"],\n};\n</srcript>\n</xmp>\n注意：这里如果你派发的是一个原生事件，且没有把此事件放进emits选项中，其父组件的监听会被触发两次\n\n<xmp><srcript>\n  <div>\n    <button @click=\"$emit('click')\">点击</button>\n  </div>\n</xmp></template>\n<xmp><srcript>\nexport default {\n//   emits: [\"click\"],\n};\n</srcript>\n</xmp>\n\n<h3>1.4.2 v-model</h3>\nvue3中的v-model,所借助的属性是 modelValue  所借助的事件是 update:modelValue (且3中把sync移出掉了)\n栗子\n父组件\n\n<xmp><srcript>\n  <div id=\"nav\">\n    {{data}}\n    <test05 v-model=\"data\"></test05>\n  </div>\n</xmp></template>\n<xmp><srcript>\nimport { ref } from \"vue\";\nimport Test05 from \"./components/test05\";\nexport default {\n  components: { Test05 },\n  setup() {\n    const data=ref('gxb')\n    return {data};\n  },\n};\n</srcript>\n</xmp>\n子组件\n\n<xmp><srcript>\n  <div>\n    <input type=\"text\" :value=\"modelValue\" @input=\"$emit('update:modelValue',$event.target.value)\" />\n  </div>\n</xmp></template>\n<xmp><srcript>\nexport default {\n    props:{\n        modelValue:String\n    },\n    emits:['update:modelValue']\n}\n</srcript></xmp>\n\n自定义属性名，vue2.x中可通过 model选项  指定传过来的属性名和指定本次v-model要利用的事件。 vue3中也可自定属性\n栗子\n父组件(即在v-model后面指定绑定)\n<test05 v-model:foo=\"data\"></test05>\n\n子组件\n<xmp><srcript>\n  <div>\n    <input type=\"text\" :value=\"foo\" @input=\"$emit('update:foo',$event.target.value)\" />\n  </div>\n</xmp></template>\n<xmp><srcript>\nexport default {\n    props:{\n        foo:String\n    },\n    emits:['update:foo']\n}\n</srcript></xmp>\n\n一个组件中可写多个v-model指令\n栗子：\n父组件\n <test01 v-model:foo=\"a\" v-model:bar=\"b\"></test01>\n\n子组件\n<xmp><srcript>\n  <div>\n    <input type=\"text\" :value=\"foo\" @input=\"$emit('update:foo',$event.target.value)\" />\n    <input type=\"text\" :value=\"bar\" @input=\"$emit('update:bar',$event.target.value)\" />\n  </div>\n</xmp></template>\n<xmp><srcript>\nexport default {\n  props: {\n    foo: String,\n    bar: String,\n  },\n  emits: [\"update:foo\", \"update:bar\"],\n  setup(props) {\n    return {};\n  },\n};\n</srcript></xmp>\n\n<h2>1.5. createRendererAPI</h2>\n自定义渲染器字如其名，它的主要功能是我们可以自定义 Virtual DOM 到DOM的方式，看了好3、4个大佬的栗子都是用canvas画了图。自己这里想不出什么栗子来先不写了\n二、其他\n2.1 Global API\n在vue2.x中没有应用的概念，vue2.x中的所谓的“app”也只不过是一个通过Vue构造出的实例。但是2.x中的一些全局API（像mixins、use、 component等 ）是直接在Vue构造函数中的\n也即如果下面还有使用new Vue的“应用”，这些全局API很容易造成污染\n下面来看一眼vue3的入口文件\nimport { createApp } from 'vue'\nimport App from './App.vue'\nimport router from './router'\nimport store from './store'\n\ncreateApp(App).use(store).use(router).mount('#app')\n\n现在有了一个createApp，这个方法就返回一个应用程序的实例\n拿component写个栗子\nimport { createApp, h } from 'vue'\nimport App from './App.vue'\nimport router from './router'\nimport store from './store'\n\ncreateApp(App)\n    .component('test06', {\n        render() {\n            return h('div', {}, '全局组件')\n        }\n    })\n    .use(store)\n    .use(router)\n    .mount('#app')\n\n其他API相应改变，如官网\n\nGlobal API Treeshaking\n官网是以 Vue.nextTick() ，这个全局API来举例的\n这个摇树是什么玩意呢？\n\n通过这句话可以理解，即这些个API不分青红皂白就写死在vue的构造函数上，如果我们在应用中本就没有对这些个API进行使用。那么打包时把这些东西也打进去是不是浪费性能同时也增大了打包体积呢\n故vue3中，nextTick的使用也是需要从vue中导入一下的\nimport { nextTick } from 'vue'\n\nnextTick(() => {\n  ...\n})\n\n其他受影响的API\n\n2.2 Template Directives\nv-model\nv-model上面已经写了，去掉了.sync，使用v-model进行了统一\nv-if、v-for优先级问题\n在2.x是v-for优先级高，在3.0中v-if的优先级高\n2.3 Components\n函数式组件\n因为在vue3中函数式组件现在在性能上的提升可以忽略不计，还是推荐使用状态组件。\n并且这里函数式组件只能通过纯函数进行声明，只能接受props和context（也是emit、slots、attrs）\n简单搞个例子\n这里偷个懒吧，把官网的栗子拿过来\nvue2.x\n// Vue 2 Functional Component Example\nexport default {\n  functional: true,\n  props: ['level'],\n  render(h, { props, data, children }) {\n    return h(`h${props.level}`, data, children)\n  }\n}\n\nvue3,区别除了下面所要说的h函数变化问题，还有上面提到的参数问题，再一个变化就是去掉了 functional: true,\nimport { h } from 'vue'\n\nconst DynamicHeading = (props, context) => {\n  return h(`h${props.level}`, context.attrs, context.slots)\n}\n\nDynamicHeading.props = ['level']\n\nexport default DynamicHeading\n\n单文件形式对比\n2.x\n// Vue 2 Functional Component Example with <xmp><srcript>\n<template functional>\n  <component\n    :is=\"`h${props.level}`\"\n    v-bind=\"attrs\"\n    v-on=\"listeners\"\n  />\n</xmp></template>\n\n<xmp><srcript>\nexport default {\n  props: ['level']\n}\n</srcript></xmp>\n\n3.0,区别去掉了functional,监听器放进了$attrs且可删除\n<xmp><srcript>\n  <component\n    v-bind:is=\"`h${props.level}`\"\n    v-bind=\"$attrs\"\n  />\n</xmp></template>\n\n<xmp><srcript>\nexport default {\n  props: ['level']\n}\n</srcript></xmp>\n\n异步组件\n原来异步组件咋整的呢\nconst asyncPage = () => import('./NextPage.vue')\n\n或者带选项的\nconst asyncPage = {\n  component: () => import('./NextPage.vue'),\n  delay: 200,\n  timeout: 3000,\n  error: ErrorComponent,\n  loading: LoadingComponent\n}\n\n但是vue3中不一样了，这里有一个新的API defineAsyncComponent用来显示定义异步组件\n也即\nconst asyncPage = defineAsyncComponent(() => import('./NextPage.vue'))\n\n或\nconst asyncPageWithOptions = defineAsyncComponent({\n  loader: () => import('./NextPage.vue'),\n  delay: 200,\n  timeout: 3000,\n  errorComponent: ErrorComponent,\n  loadingComponent: LoadingComponent\n})\n\n细心看也可看出component改成了loader\n还有一点不同的是，2.x中函数参数中可接收resolve,reject,3.0则不可，但是必须要返回一个Promise\n<h2>2.4 Render Function</h2>\n渲染函数的改变\n即原来的h函数是这样的\nexport default {\n  render(h) {\n    return h('div')\n  }\n}\n\n而现在h函数则需要从vue的再导入进来\n其实我上面有一个栗子已经用到了，再拿过来一次\nimport { createApp, h } from 'vue'\nimport App from './App.vue'\nimport router from './router'\nimport store from './store'\n\ncreateApp(App)\n    .component('test06', {\n        render() {\n            return h('div', {}, '全局组件')\n        }\n    })\n    .use(store)\n    .use(router)\n    .mount('#app')\n\n还有一个属性的变动，直接拿官网的栗子吧\n2.x 中的节点属性格式\n{\n  class: ['button', 'is-outlined'],\n  style: { color: '#34495E' },\n  attrs: { id: 'submit' },\n  domProps: { innerxmp: '' },\n  on: { click: submitForm },\n  key: 'submit-button'\n}\n\n在3.0中，这些属性不再被嵌套，被展平了(这看起来更像DOM节点上的东西了吧)\n{\n  class: ['button', 'is-outlined'],\n  style: { color: '#34495E' },\n  id: 'submit',\n  innerxmp: '',\n  onClick: submitForm,\n  key: 'submit-button'\n}\n\n插槽方面\n废掉了$scopedSlots，使用$slots\nvue2.x中，一个组件使用渲染函数拿插槽是这样的\n\n<xmp><srcript>\nexport default {\n    render(h) {\n        return h('div',{},this.$scopedSlots.default)\n    },\n}\n</srcript>\n</xmp>\nvue3.x中则是这样的\n</xmp>\n<xmp><srcript>\nimport {h} from 'vue'\nexport default {\n    props:{\n        data:String\n    },\n    render() {\n        return h('div',{},this.$slots.default())\n    },\n}\n</srcript>\n</xmp>\n\n\n<h2>2.5 Custom Elements</h2>\n自定义元素白名单\n如一些特殊的组件，我们要特殊用处的希望vue的编译忽略\n栗子\n直接往组件中放一个为注册过的组件\n <test08></test08>\n\n\n不希望出现这个错就把它放进白名单里\n使用构建工具版本\nrules: [\n  {\n    test: /\\.vue$/,\n    use: 'vue-loader',\n    options: {\n      compilerOptions: {\n        isCustomElement: tag => tag === 'test08'\n      }\n    }\n  }\n  // ...\n]\n\n 运行时编译版本 \nconst app = Vue.createApp({})\napp.config.isCustomElement = tag => tag === 'test08'\nis只能用在<component>上\n但是 <component :is=\"componentId\"></component> 除了这个玩意，我们别的地方可能也有需求需要用到is怎么办呢\n故vue3中推出了v-is指令\n\n","source":"_posts/a.md","raw":"---\nlayout:\n  - post\ntitle: vue3傻瓜式入门\ndate: 2020-09-20 18:48:17\ntags: program\n---\n\n可任选一种创建方式\n我个人还是采用的脚手架\n升级（即重装）\nnpm install -g @vue/cli # OR yarn global add @vue/cli\nvue create hello-vue3\n下面和原来不同的就是多了个选择版本的，选择vue3上手即可\n\n<h2>一、重点</h2>\n先以下面官网所列出的显著的为主（后三个先忽略）\n\n<h3>1.1. composition API</h3>\n别不管 Options API 与composition API 比较，我们先直接上手composition API \ncomposition API 入口点setup函数\n创建响应式数据 ref与reactive\nref\nref函数接一个参数返回一个响应式的ref对象\n直接看栗子\n\n<xmp><srcript>\n  <div>\n      {{num}}\n  </div>\n</xmp></template>\n<xmp><srcript>\nimport { ref } from \"vue\";\nexport default {\n  setup() {\n    const num = ref(1);\n    return { num };\n  },\n};\n</srcript>\n</xmp>\n也即和vue2.x中的这种写法是一样的\ndata(){\n    return {\n        num:1\n    }\n}\n\n值得注意的是：ref返回的是一个对象，需要通过它的value属性拿到它的值\n也即num.value。不过在模板中使用时他会自动解。也就是上面栗子中模板直接使用num，还有一种可自动解的情况先看下面\n另外现在就可以理解ref是用来把简单类型的数据进行响应式化的\nreactive\nref负责简单数据数据，则reactive就是将引用类型的数据进行响应式化\n直接看栗子\n\n<xmp><srcript>\n  <div>{{num}}{{obj.name}}</div>\n</xmp></template>\n<xmp><srcript>\nimport { ref, reactive } from \"vue\";\nexport default {\n  setup() {\n    const num = ref(1);\n    const obj = reactive({\n      name: \"gxb\",\n      age: 18,\n    });\n    return { num, obj };\n  },\n};\n</srcript>\n</xmp>\n\n上面的ref对象自动解套的另一种情况也即在这里它作为reactive函数参数对象的一属性\n即:\n const num = ref(1);\nconst obj = reactive({\n      name: \"gxb\",\n      age: 18,\n      num\n    });\n\n值得注意的是：这里不要随意使用...语法或者解构，否则会丧失响应式性质，最后的工具函数那再写栗子介绍\nreadonly\n这个函数，参数可以一个响应式或者普通的对象再或者是个ref。返回的是一个只读代理（深层的）\n栗子\n![](1.png)\ncomputed 与 watch\ncomputed\ncomputed是一个函数，它需要传一个getter函数。其返回值是一个不可手动修改的ref对象\n栗子\n\n<xmp><srcript>\n  <div>{{num2}}</div>\n</xmp></template>\n<xmp><srcript>\nimport { ref, reactive, computed } from \"vue\";\nexport default {\n  setup() {\n    const num = ref(1);\n    const obj = reactive({\n      name: \"gxb\",\n      age: 18,\n      num,\n    });\n    const num2 = computed(() => num.value + 1);\n    return { num, obj, num2 };\n  },\n};\n</srcript>\n</xmp>\n\n注意不可修改\n如\n const num2=computed(()=>num.value+1)\n    num2.value++\n\n\n想要一个可以进行修改的，就需传一个具有get和set函数的对象\n<xmp><srcript>\n  <div>{{num2.value}}</div>\n</xmp></template>\n<xmp><srcript>\nimport { ref, reactive, computed } from \"vue\";\nexport default {\n  setup() {\n    const num = ref(1);\n    const obj = reactive({\n      name: \"gxb\",\n      age: 18,\n      num,\n    });\n    const num2 = computed({\n        get:()=>num,\n        set:value=>num.value=value\n    });\n    \n    num2.value=3\n    return { num, obj, num2 };\n  },\n};\n</srcript></xmp>\n\n要注意的是，此时num2这个ref对象不会在自动解套了\nwatch\n监听一个\n<xmp><srcript>\n  <div>{{num2.value}}</div>\n</xmp></template>\n<xmp><srcript>\nimport { ref, reactive, computed, watch } from \"vue\";\nexport default {\n  setup() {\n    const obj = reactive({\n      name: \"gxb\",\n      age: 18,\n      num,\n    });\n\n    watch(\n      () => obj.name,\n      (name, preName) => {\n        console.log(`new ${name}---old ${preName}`);\n      }\n    );\n    setTimeout(() => {\n      obj.name = \"zhangsan\";\n    }, 1000);\n\n    return { obj };\n  },\n};\n</srcript></xmp>\n\n\n第一参除了可以是上面那种有返回值的getter函数，也可以是一个ref对象\n即\n<xmp><srcript>\n  <div></div>\n</xmp></template>\n<xmp><srcript>\nimport { ref, reactive, computed, watch } from \"vue\";\nexport default {\n  setup() {\n    const obj = reactive({\n      name: \"gxb\",\n      age: 18,\n      num,\n    });\n    const num = ref(0);\n    watch(num, (name, preName) => {\n      console.log(`new ${name}---old ${preName}`);\n    });\n    setTimeout(() => {\n      num.value = 2;\n    }, 1000);\n\n    return { obj };\n  },\n};\n</srcript></xmp>\n\n\n监听多个\n即如下只要num或obj.name有一个发生变动就触发监听器处理回调\n<xmp><srcript>\n  <div></div>\n</xmp></template>\n<xmp><srcript>\nimport { ref, reactive, computed, watch } from \"vue\";\nexport default {\n  setup() {\n    const obj = reactive({\n      name: \"gxb\",\n      age: 18,\n      num,\n    });\n    const num = ref(0);\n    watch([num, ()=>obj.name], ([newNum, newName], [oldNum, oldName]) => {\n      console.log(`new ${(newNum)},${(newName)}---old ${(oldNum)},${oldName}`);\n    });\n    setTimeout(() => {\n      num.value = 6;\n    //   obj.name = \"zhangsan\";\n    }, 1000);\n\n    return { obj };\n  },\n};\n</srcript></xmp>\n\n生命周期钩子\n栗子\nimport { onMounted, onUpdated, onUnmounted } from 'vue'\n\nconst MyComponent = {\n  setup() {\n    onMounted(() => {\n      console.log('mounted!')\n    })\n    onUpdated(() => {\n      console.log('updated!')\n    })\n    onUnmounted(() => {\n      console.log('unmounted!')\n    })\n  },\n}\n\n对应2.x钩子\n\nprops和this\nprops\nsetup这个入口函数接收的第一个参数就是props\n栗子\n\n这里需要注意，不要随便进行解构\n即图省事\n  props: {\n    data: String,\n  },\n  setup({ data }) {\n    console.log(data);\n  }\n\n解构会使其丧失响应式的\nthis\n2.x中拿组件实例实例很好拿，一般就是直接this，但是setup则不同。\n但是组件实例上有许多api我们还是要使用的\n故setup的第二个参数是一个上下文对象\n栗子:派发一个自定义事件\n\n值得注意的是这个context只是选择性的暴露了一些属性，如上面的emit还有attrs、slots\n依赖注入与Refs\n依赖注入\n和vue2.x的provide和inject基本一样\n栗子\n\n为图简单我用的一个组件举例\n\n它们的响应式需要自己出来一下（如用ref）\nRefs\n如拿下面这个节点\n\n<xmp><srcript>\n  <div ref=\"test\">test</div>\n</xmp></template>\n<xmp><srcript>\nimport {\n  ref,\n  reactive,\n  computed,\n  watch,\n  provide,\n  inject,\n  onMounted,\n} from \"vue\";\nexport default {\n  setup() {\n    const test = ref(null);\n    onMounted(() => {\n      console.log(test.value);\n    });\n\n    return { test };\n  },\n};\n</srcript></xmp>\n\n\n一些工具函数\n先来写下破坏reactive生成的响应对象代理的栗子\n首先正常写法\n<xmp><srcript>\n  <div ref=\"test\">\n    {{obj.age}}\n    <button @click=\"obj.age++\">add</button>\n  </div>\n</xmp></template>\n<xmp><srcript>\nimport { ref, reactive, computed, watch, provide, inject, readonly } from \"vue\";\nexport default {\n  props: {\n    data: String,\n  },\n  setup(props, context) {\n    console.log(props.data);\n    context.emit(\"test\");\n    const obj = reactive({\n      name: \"gxb\",\n      age: 18,\n\n    });\n\n    return { obj };\n  },\n};\n</srcript></xmp>\n\n\n使用扩展语法\n<xmp><srcript>\n  <div ref=\"test\">\n    {{age}}\n    <button @click=\"age++\">add</button>\n  </div>\n</xmp></template>\n<xmp><srcript>\nimport { ref, reactive, computed, watch, provide, inject, readonly } from \"vue\";\nexport default {\n  props: {\n    data: String,\n  },\n  setup(props, context) {\n    console.log(props.data);\n    context.emit(\"test\");\n    const obj = reactive({\n      name: \"gxb\",\n      age: 18,\n\n    });\n\n    return { ...obj };\n  },\n};\n</srcript></xmp>\n\n\n解构出来的同样不行\n<xmp><srcript>\n  <div ref=\"test\">\n    {{age}}\n    <button @click=\"age++\">add</button>\n  </div>\n</xmp></template>\n<xmp><srcript>\nimport { ref, reactive, computed, watch, provide, inject, readonly } from \"vue\";\nexport default {\n  props: {\n    data: String,\n  },\n  setup(props, context) {\n    console.log(props.data);\n    context.emit(\"test\");\n    const obj = reactive({\n      name: \"gxb\",\n      age: 18,\n    });\n    const { age } = obj;\n    return { age };\n  },\n};\n</srcript></xmp>\n\n这个的原理也很简单，reactive的内部原理是Proxy，它操作均在返回的代理实例上\n下面开始介绍几个工具函数\n\nunref，参数是一个ref则返回这个ref的value属性，否则返本身\ntoRef，给一个 reactive 对象的属性创建一个 ref \ntoRefs， 把一个响应式对象转换成普通对象，该普通对象的每个 property 都是一个 ref  \nisRef，判断一个值是否是ref\nisProxy，判断一个对象是否是由 reactive 或者 readonly 方法创建的代理。\nisReactive，判断一个对象是否是由 reactive 创建的响应式代理 \nisReadonly，判断一个对象是否是由 readonly 创建的只读代理。 \n\n仅给2、3写个例子吧\ntoRef，即把reactive 对象上的一个属性变成ref\n什么意思呢，还是看上面的破坏了响应式的栗子\n修复一下(即可把它一个属性抽出来做成响应式的ref，且它们还是互相关联的)\n\n<xmp><srcript>\n  <div ref=\"test\">\n    {{age}}\n    <button @click=\"age++\">add</button>\n  </div>\n</xmp></template>\n<xmp><srcript>\nimport {\n  ref,\n  reactive,\n  computed,\n  watch,\n  provide,\n  inject,\n  readonly,\n  toRef,\n} from \"vue\";\nexport default {\n  props: {\n    data: String,\n  },\n  setup(props, context) {\n    const obj = reactive({\n      name: \"gxb\",\n      age: 18,\n    });\n    const age=toRef(obj, \"age\");\n    watch(()=>obj.age,(newAge,oldAge)=>{\n        console.log(newAge);\n    })\n    return { age };\n  },\n};\n</srcript>\n</xmp>\n\ntoRefs则是把这个对象里面的所有属性均整成ref，这个修复则更简单了\n\n<xmp><srcript>\n  <div ref=\"test\">\n    {{age}}\n    <button @click=\"age++\">add</button>\n  </div>\n</xmp></template>\n<xmp><srcript>\nimport {\n  ref,\n  reactive,\n  computed,\n  watch,\n  provide,\n  inject,\n  readonly,\n  toRef,\n  toRefs\n} from \"vue\";\nexport default {\n  props: {\n    data: String,\n  },\n  setup(props, context) {\n    const obj = reactive({\n      name: \"gxb\",\n      age: 18,\n    });\n    const obj02=toRefs(obj);\n    \n    return { ...obj02 };\n  },\n};\n</srcript></xmp>\n\n<h2>1.2. Teleport</h2>\n传送门，顾名思义\n场景：某一些组件中我们可能需要一个模态框的功能，然而虽然逻辑上来说这个模态框是属于该组件中的，但是实际操作一般需要把这个框子挂到body上。Teleport 组件就是帮我们处理这个问题的\n来看栗子\n假设组件中需要有一个模态框\n<xmp><srcript>\n    <div>\n        <model></model>\n    </div>\n</xmp></template>\n<xmp><srcript>\nimport Model from './model'\nexport default {\n    components:{Model}\n}\n</srcript>\n</xmp>\n模态框组件\n\n<xmp><srcript>\n  <div>\n    <button @click=\"flag=true\">点击</button>\n    <teleport to=\"body\">\n      <div v-if=\"flag\">\n        <div>模态框</div>\n      </div>\n    </teleport>\n  </div>\n</xmp></template>\n<xmp><srcript>\nimport { ref } from \"vue\";\nexport default {\n  setup() {\n    const flag = ref(false);\n    return { flag };\n  },\n};\n</srcript>\n</xmp>\n即teleport组件的作用就是把teleport标签里面的元素传送到body上去\n\n再看层级\n\n<h2>1.3. Fragments</h2>\n这个的理解就更简单了\n原来只能这样:即只允许存在一个最外层的父元素div\n\n<xmp><srcript>\n  <div>\n    ...\n  </div>\n</xmp></template>\n</xmp>\n现在可多个\n\n<xmp><srcript>\n  <div>\n    ...\n  </div>\n  <div>\n    ...\n  </div>\n    ...\n</xmp></template>\n</xmp>\n<h2>1.4. Emits Component Option</h2>\n<h3>1.4.1 自定义事件派发</h3>\n这里的重点：即多了一个派发事件的选项emits\n也就我们以后再次使用emit派发一个事件的时候需要把这此派发的事件名放到选项里\n栗子:\n\n<xmp><srcript>\n  <div>\n    <button @click=\"$emit('test')\">点击</button>\n  </div>\n</xmp></template>\n<xmp><srcript>\nexport default {\n  emits: [\"test\"],\n};\n</srcript>\n</xmp>\n注意：这里如果你派发的是一个原生事件，且没有把此事件放进emits选项中，其父组件的监听会被触发两次\n\n<xmp><srcript>\n  <div>\n    <button @click=\"$emit('click')\">点击</button>\n  </div>\n</xmp></template>\n<xmp><srcript>\nexport default {\n//   emits: [\"click\"],\n};\n</srcript>\n</xmp>\n\n<h3>1.4.2 v-model</h3>\nvue3中的v-model,所借助的属性是 modelValue  所借助的事件是 update:modelValue (且3中把sync移出掉了)\n栗子\n父组件\n\n<xmp><srcript>\n  <div id=\"nav\">\n    {{data}}\n    <test05 v-model=\"data\"></test05>\n  </div>\n</xmp></template>\n<xmp><srcript>\nimport { ref } from \"vue\";\nimport Test05 from \"./components/test05\";\nexport default {\n  components: { Test05 },\n  setup() {\n    const data=ref('gxb')\n    return {data};\n  },\n};\n</srcript>\n</xmp>\n子组件\n\n<xmp><srcript>\n  <div>\n    <input type=\"text\" :value=\"modelValue\" @input=\"$emit('update:modelValue',$event.target.value)\" />\n  </div>\n</xmp></template>\n<xmp><srcript>\nexport default {\n    props:{\n        modelValue:String\n    },\n    emits:['update:modelValue']\n}\n</srcript></xmp>\n\n自定义属性名，vue2.x中可通过 model选项  指定传过来的属性名和指定本次v-model要利用的事件。 vue3中也可自定属性\n栗子\n父组件(即在v-model后面指定绑定)\n<test05 v-model:foo=\"data\"></test05>\n\n子组件\n<xmp><srcript>\n  <div>\n    <input type=\"text\" :value=\"foo\" @input=\"$emit('update:foo',$event.target.value)\" />\n  </div>\n</xmp></template>\n<xmp><srcript>\nexport default {\n    props:{\n        foo:String\n    },\n    emits:['update:foo']\n}\n</srcript></xmp>\n\n一个组件中可写多个v-model指令\n栗子：\n父组件\n <test01 v-model:foo=\"a\" v-model:bar=\"b\"></test01>\n\n子组件\n<xmp><srcript>\n  <div>\n    <input type=\"text\" :value=\"foo\" @input=\"$emit('update:foo',$event.target.value)\" />\n    <input type=\"text\" :value=\"bar\" @input=\"$emit('update:bar',$event.target.value)\" />\n  </div>\n</xmp></template>\n<xmp><srcript>\nexport default {\n  props: {\n    foo: String,\n    bar: String,\n  },\n  emits: [\"update:foo\", \"update:bar\"],\n  setup(props) {\n    return {};\n  },\n};\n</srcript></xmp>\n\n<h2>1.5. createRendererAPI</h2>\n自定义渲染器字如其名，它的主要功能是我们可以自定义 Virtual DOM 到DOM的方式，看了好3、4个大佬的栗子都是用canvas画了图。自己这里想不出什么栗子来先不写了\n二、其他\n2.1 Global API\n在vue2.x中没有应用的概念，vue2.x中的所谓的“app”也只不过是一个通过Vue构造出的实例。但是2.x中的一些全局API（像mixins、use、 component等 ）是直接在Vue构造函数中的\n也即如果下面还有使用new Vue的“应用”，这些全局API很容易造成污染\n下面来看一眼vue3的入口文件\nimport { createApp } from 'vue'\nimport App from './App.vue'\nimport router from './router'\nimport store from './store'\n\ncreateApp(App).use(store).use(router).mount('#app')\n\n现在有了一个createApp，这个方法就返回一个应用程序的实例\n拿component写个栗子\nimport { createApp, h } from 'vue'\nimport App from './App.vue'\nimport router from './router'\nimport store from './store'\n\ncreateApp(App)\n    .component('test06', {\n        render() {\n            return h('div', {}, '全局组件')\n        }\n    })\n    .use(store)\n    .use(router)\n    .mount('#app')\n\n其他API相应改变，如官网\n\nGlobal API Treeshaking\n官网是以 Vue.nextTick() ，这个全局API来举例的\n这个摇树是什么玩意呢？\n\n通过这句话可以理解，即这些个API不分青红皂白就写死在vue的构造函数上，如果我们在应用中本就没有对这些个API进行使用。那么打包时把这些东西也打进去是不是浪费性能同时也增大了打包体积呢\n故vue3中，nextTick的使用也是需要从vue中导入一下的\nimport { nextTick } from 'vue'\n\nnextTick(() => {\n  ...\n})\n\n其他受影响的API\n\n2.2 Template Directives\nv-model\nv-model上面已经写了，去掉了.sync，使用v-model进行了统一\nv-if、v-for优先级问题\n在2.x是v-for优先级高，在3.0中v-if的优先级高\n2.3 Components\n函数式组件\n因为在vue3中函数式组件现在在性能上的提升可以忽略不计，还是推荐使用状态组件。\n并且这里函数式组件只能通过纯函数进行声明，只能接受props和context（也是emit、slots、attrs）\n简单搞个例子\n这里偷个懒吧，把官网的栗子拿过来\nvue2.x\n// Vue 2 Functional Component Example\nexport default {\n  functional: true,\n  props: ['level'],\n  render(h, { props, data, children }) {\n    return h(`h${props.level}`, data, children)\n  }\n}\n\nvue3,区别除了下面所要说的h函数变化问题，还有上面提到的参数问题，再一个变化就是去掉了 functional: true,\nimport { h } from 'vue'\n\nconst DynamicHeading = (props, context) => {\n  return h(`h${props.level}`, context.attrs, context.slots)\n}\n\nDynamicHeading.props = ['level']\n\nexport default DynamicHeading\n\n单文件形式对比\n2.x\n// Vue 2 Functional Component Example with <xmp><srcript>\n<template functional>\n  <component\n    :is=\"`h${props.level}`\"\n    v-bind=\"attrs\"\n    v-on=\"listeners\"\n  />\n</xmp></template>\n\n<xmp><srcript>\nexport default {\n  props: ['level']\n}\n</srcript></xmp>\n\n3.0,区别去掉了functional,监听器放进了$attrs且可删除\n<xmp><srcript>\n  <component\n    v-bind:is=\"`h${props.level}`\"\n    v-bind=\"$attrs\"\n  />\n</xmp></template>\n\n<xmp><srcript>\nexport default {\n  props: ['level']\n}\n</srcript></xmp>\n\n异步组件\n原来异步组件咋整的呢\nconst asyncPage = () => import('./NextPage.vue')\n\n或者带选项的\nconst asyncPage = {\n  component: () => import('./NextPage.vue'),\n  delay: 200,\n  timeout: 3000,\n  error: ErrorComponent,\n  loading: LoadingComponent\n}\n\n但是vue3中不一样了，这里有一个新的API defineAsyncComponent用来显示定义异步组件\n也即\nconst asyncPage = defineAsyncComponent(() => import('./NextPage.vue'))\n\n或\nconst asyncPageWithOptions = defineAsyncComponent({\n  loader: () => import('./NextPage.vue'),\n  delay: 200,\n  timeout: 3000,\n  errorComponent: ErrorComponent,\n  loadingComponent: LoadingComponent\n})\n\n细心看也可看出component改成了loader\n还有一点不同的是，2.x中函数参数中可接收resolve,reject,3.0则不可，但是必须要返回一个Promise\n<h2>2.4 Render Function</h2>\n渲染函数的改变\n即原来的h函数是这样的\nexport default {\n  render(h) {\n    return h('div')\n  }\n}\n\n而现在h函数则需要从vue的再导入进来\n其实我上面有一个栗子已经用到了，再拿过来一次\nimport { createApp, h } from 'vue'\nimport App from './App.vue'\nimport router from './router'\nimport store from './store'\n\ncreateApp(App)\n    .component('test06', {\n        render() {\n            return h('div', {}, '全局组件')\n        }\n    })\n    .use(store)\n    .use(router)\n    .mount('#app')\n\n还有一个属性的变动，直接拿官网的栗子吧\n2.x 中的节点属性格式\n{\n  class: ['button', 'is-outlined'],\n  style: { color: '#34495E' },\n  attrs: { id: 'submit' },\n  domProps: { innerxmp: '' },\n  on: { click: submitForm },\n  key: 'submit-button'\n}\n\n在3.0中，这些属性不再被嵌套，被展平了(这看起来更像DOM节点上的东西了吧)\n{\n  class: ['button', 'is-outlined'],\n  style: { color: '#34495E' },\n  id: 'submit',\n  innerxmp: '',\n  onClick: submitForm,\n  key: 'submit-button'\n}\n\n插槽方面\n废掉了$scopedSlots，使用$slots\nvue2.x中，一个组件使用渲染函数拿插槽是这样的\n\n<xmp><srcript>\nexport default {\n    render(h) {\n        return h('div',{},this.$scopedSlots.default)\n    },\n}\n</srcript>\n</xmp>\nvue3.x中则是这样的\n</xmp>\n<xmp><srcript>\nimport {h} from 'vue'\nexport default {\n    props:{\n        data:String\n    },\n    render() {\n        return h('div',{},this.$slots.default())\n    },\n}\n</srcript>\n</xmp>\n\n\n<h2>2.5 Custom Elements</h2>\n自定义元素白名单\n如一些特殊的组件，我们要特殊用处的希望vue的编译忽略\n栗子\n直接往组件中放一个为注册过的组件\n <test08></test08>\n\n\n不希望出现这个错就把它放进白名单里\n使用构建工具版本\nrules: [\n  {\n    test: /\\.vue$/,\n    use: 'vue-loader',\n    options: {\n      compilerOptions: {\n        isCustomElement: tag => tag === 'test08'\n      }\n    }\n  }\n  // ...\n]\n\n 运行时编译版本 \nconst app = Vue.createApp({})\napp.config.isCustomElement = tag => tag === 'test08'\nis只能用在<component>上\n但是 <component :is=\"componentId\"></component> 除了这个玩意，我们别的地方可能也有需求需要用到is怎么办呢\n故vue3中推出了v-is指令\n\n","slug":"a","published":1,"updated":"2020-09-21T12:22:06.024Z","comments":1,"photos":[],"link":"","_id":"ckfe0pcip000a0wurc38ha9wu","content":"<p>可任选一种创建方式<br>我个人还是采用的脚手架<br>升级（即重装）<br>npm install -g @vue/cli # OR yarn global add @vue/cli<br>vue create hello-vue3<br>下面和原来不同的就是多了个选择版本的，选择vue3上手即可</p>\n<h2>一、重点</h2>\n先以下面官网所列出的显著的为主（后三个先忽略）\n\n<h3>1.1. composition API</h3>\n别不管 Options API 与composition API 比较，我们先直接上手composition API \ncomposition API 入口点setup函数\n创建响应式数据 ref与reactive\nref\nref函数接一个参数返回一个响应式的ref对象\n直接看栗子\n\n<p><xmp><srcript><br>  <div><br>      <br>  </div><br></xmp></template><br><xmp><srcript><br>import { ref } from “vue”;<br>export default {<br>  setup() {<br>    const num = ref(1);<br>    return { num };<br>  },<br>};<br></srcript><br></xmp><br>也即和vue2.x中的这种写法是一样的<br>data(){<br>    return {<br>        num:1<br>    }<br>}</p>\n<p>值得注意的是：ref返回的是一个对象，需要通过它的value属性拿到它的值<br>也即num.value。不过在模板中使用时他会自动解。也就是上面栗子中模板直接使用num，还有一种可自动解的情况先看下面<br>另外现在就可以理解ref是用来把简单类型的数据进行响应式化的<br>reactive<br>ref负责简单数据数据，则reactive就是将引用类型的数据进行响应式化<br>直接看栗子</p>\n<p><xmp><srcript><br>  <div></div><br></xmp></template><br><xmp><srcript><br>import { ref, reactive } from “vue”;<br>export default {<br>  setup() {<br>    const num = ref(1);<br>    const obj = reactive({<br>      name: “gxb”,<br>      age: 18,<br>    });<br>    return { num, obj };<br>  },<br>};<br></srcript><br></xmp></p>\n<p>上面的ref对象自动解套的另一种情况也即在这里它作为reactive函数参数对象的一属性<br>即:<br> const num = ref(1);<br>const obj = reactive({<br>      name: “gxb”,<br>      age: 18,<br>      num<br>    });</p>\n<p>值得注意的是：这里不要随意使用…语法或者解构，否则会丧失响应式性质，最后的工具函数那再写栗子介绍<br>readonly<br>这个函数，参数可以一个响应式或者普通的对象再或者是个ref。返回的是一个只读代理（深层的）<br>栗子<br><img src=\"1.png\"><br>computed 与 watch<br>computed<br>computed是一个函数，它需要传一个getter函数。其返回值是一个不可手动修改的ref对象<br>栗子</p>\n<p><xmp><srcript><br>  <div></div><br></xmp></template><br><xmp><srcript><br>import { ref, reactive, computed } from “vue”;<br>export default {<br>  setup() {<br>    const num = ref(1);<br>    const obj = reactive({<br>      name: “gxb”,<br>      age: 18,<br>      num,<br>    });<br>    const num2 = computed(() =&gt; num.value + 1);<br>    return { num, obj, num2 };<br>  },<br>};<br></srcript><br></xmp></p>\n<p>注意不可修改<br>如<br> const num2=computed(()=&gt;num.value+1)<br>    num2.value++</p>\n<p>想要一个可以进行修改的，就需传一个具有get和set函数的对象<br><xmp><srcript><br>  <div></div><br></xmp></template><br><xmp><srcript><br>import { ref, reactive, computed } from “vue”;<br>export default {<br>  setup() {<br>    const num = ref(1);<br>    const obj = reactive({<br>      name: “gxb”,<br>      age: 18,<br>      num,<br>    });<br>    const num2 = computed({<br>        get:()=&gt;num,<br>        set:value=&gt;num.value=value<br>    });</p>\n<pre><code>num2.value=3\nreturn &#123; num, obj, num2 &#125;;</code></pre>\n<p>  },<br>};<br></srcript></xmp></p>\n<p>要注意的是，此时num2这个ref对象不会在自动解套了<br>watch<br>监听一个<br><xmp><srcript><br>  <div></div><br></xmp></template><br><xmp><srcript><br>import { ref, reactive, computed, watch } from “vue”;<br>export default {<br>  setup() {<br>    const obj = reactive({<br>      name: “gxb”,<br>      age: 18,<br>      num,<br>    });</p>\n<pre><code>watch(\n  () =&gt; obj.name,\n  (name, preName) =&gt; &#123;\n    console.log(`new $&#123;name&#125;---old $&#123;preName&#125;`);\n  &#125;\n);\nsetTimeout(() =&gt; &#123;\n  obj.name = &quot;zhangsan&quot;;\n&#125;, 1000);\n\nreturn &#123; obj &#125;;</code></pre>\n<p>  },<br>};<br></srcript></xmp></p>\n<p>第一参除了可以是上面那种有返回值的getter函数，也可以是一个ref对象<br>即<br><xmp><srcript><br>  <div></div><br></xmp></template><br><xmp><srcript><br>import { ref, reactive, computed, watch } from “vue”;<br>export default {<br>  setup() {<br>    const obj = reactive({<br>      name: “gxb”,<br>      age: 18,<br>      num,<br>    });<br>    const num = ref(0);<br>    watch(num, (name, preName) =&gt; {<br>      console.log(<code>new $&#123;name&#125;---old $&#123;preName&#125;</code>);<br>    });<br>    setTimeout(() =&gt; {<br>      num.value = 2;<br>    }, 1000);</p>\n<pre><code>return &#123; obj &#125;;</code></pre>\n<p>  },<br>};<br></srcript></xmp></p>\n<p>监听多个<br>即如下只要num或obj.name有一个发生变动就触发监听器处理回调<br><xmp><srcript><br>  <div></div><br></xmp></template><br><xmp><srcript><br>import { ref, reactive, computed, watch } from “vue”;<br>export default {<br>  setup() {<br>    const obj = reactive({<br>      name: “gxb”,<br>      age: 18,<br>      num,<br>    });<br>    const num = ref(0);<br>    watch([num, ()=&gt;obj.name], ([newNum, newName], [oldNum, oldName]) =&gt; {<br>      console.log(<code>new $&#123;(newNum)&#125;,$&#123;(newName)&#125;---old $&#123;(oldNum)&#125;,$&#123;oldName&#125;</code>);<br>    });<br>    setTimeout(() =&gt; {<br>      num.value = 6;<br>    //   obj.name = “zhangsan”;<br>    }, 1000);</p>\n<pre><code>return &#123; obj &#125;;</code></pre>\n<p>  },<br>};<br></srcript></xmp></p>\n<p>生命周期钩子<br>栗子<br>import { onMounted, onUpdated, onUnmounted } from ‘vue’</p>\n<p>const MyComponent = {<br>  setup() {<br>    onMounted(() =&gt; {<br>      console.log(‘mounted!’)<br>    })<br>    onUpdated(() =&gt; {<br>      console.log(‘updated!’)<br>    })<br>    onUnmounted(() =&gt; {<br>      console.log(‘unmounted!’)<br>    })<br>  },<br>}</p>\n<p>对应2.x钩子</p>\n<p>props和this<br>props<br>setup这个入口函数接收的第一个参数就是props<br>栗子</p>\n<p>这里需要注意，不要随便进行解构<br>即图省事<br>  props: {<br>    data: String,<br>  },<br>  setup({ data }) {<br>    console.log(data);<br>  }</p>\n<p>解构会使其丧失响应式的<br>this<br>2.x中拿组件实例实例很好拿，一般就是直接this，但是setup则不同。<br>但是组件实例上有许多api我们还是要使用的<br>故setup的第二个参数是一个上下文对象<br>栗子:派发一个自定义事件</p>\n<p>值得注意的是这个context只是选择性的暴露了一些属性，如上面的emit还有attrs、slots<br>依赖注入与Refs<br>依赖注入<br>和vue2.x的provide和inject基本一样<br>栗子</p>\n<p>为图简单我用的一个组件举例</p>\n<p>它们的响应式需要自己出来一下（如用ref）<br>Refs<br>如拿下面这个节点</p>\n<p><xmp><srcript><br>  <div ref=\"test\">test</div><br></xmp></template><br><xmp><srcript><br>import {<br>  ref,<br>  reactive,<br>  computed,<br>  watch,<br>  provide,<br>  inject,<br>  onMounted,<br>} from “vue”;<br>export default {<br>  setup() {<br>    const test = ref(null);<br>    onMounted(() =&gt; {<br>      console.log(test.value);<br>    });</p>\n<pre><code>return &#123; test &#125;;</code></pre>\n<p>  },<br>};<br></srcript></xmp></p>\n<p>一些工具函数<br>先来写下破坏reactive生成的响应对象代理的栗子<br>首先正常写法<br><xmp><srcript><br>  <div ref=\"test\"><br>    <br>    &lt;button @click=”obj.age++”&gt;add</button><br>  </div><br></xmp></template><br><xmp><srcript><br>import { ref, reactive, computed, watch, provide, inject, readonly } from “vue”;<br>export default {<br>  props: {<br>    data: String,<br>  },<br>  setup(props, context) {<br>    console.log(props.data);<br>    context.emit(“test”);<br>    const obj = reactive({<br>      name: “gxb”,<br>      age: 18,</p>\n<pre><code>&#125;);\n\nreturn &#123; obj &#125;;</code></pre>\n<p>  },<br>};<br></srcript></xmp></p>\n<p>使用扩展语法<br><xmp><srcript><br>  <div ref=\"test\"><br>    <br>    &lt;button @click=”age++”&gt;add</button><br>  </div><br></xmp></template><br><xmp><srcript><br>import { ref, reactive, computed, watch, provide, inject, readonly } from “vue”;<br>export default {<br>  props: {<br>    data: String,<br>  },<br>  setup(props, context) {<br>    console.log(props.data);<br>    context.emit(“test”);<br>    const obj = reactive({<br>      name: “gxb”,<br>      age: 18,</p>\n<pre><code>&#125;);\n\nreturn &#123; ...obj &#125;;</code></pre>\n<p>  },<br>};<br></srcript></xmp></p>\n<p>解构出来的同样不行<br><xmp><srcript><br>  <div ref=\"test\"><br>    <br>    &lt;button @click=”age++”&gt;add</button><br>  </div><br></xmp></template><br><xmp><srcript><br>import { ref, reactive, computed, watch, provide, inject, readonly } from “vue”;<br>export default {<br>  props: {<br>    data: String,<br>  },<br>  setup(props, context) {<br>    console.log(props.data);<br>    context.emit(“test”);<br>    const obj = reactive({<br>      name: “gxb”,<br>      age: 18,<br>    });<br>    const { age } = obj;<br>    return { age };<br>  },<br>};<br></srcript></xmp></p>\n<p>这个的原理也很简单，reactive的内部原理是Proxy，它操作均在返回的代理实例上<br>下面开始介绍几个工具函数</p>\n<p>unref，参数是一个ref则返回这个ref的value属性，否则返本身<br>toRef，给一个 reactive 对象的属性创建一个 ref<br>toRefs， 把一个响应式对象转换成普通对象，该普通对象的每个 property 都是一个 ref<br>isRef，判断一个值是否是ref<br>isProxy，判断一个对象是否是由 reactive 或者 readonly 方法创建的代理。<br>isReactive，判断一个对象是否是由 reactive 创建的响应式代理<br>isReadonly，判断一个对象是否是由 readonly 创建的只读代理。 </p>\n<p>仅给2、3写个例子吧<br>toRef，即把reactive 对象上的一个属性变成ref<br>什么意思呢，还是看上面的破坏了响应式的栗子<br>修复一下(即可把它一个属性抽出来做成响应式的ref，且它们还是互相关联的)</p>\n<p><xmp><srcript><br>  <div ref=\"test\"><br>    <br>    &lt;button @click=”age++”&gt;add</button><br>  </div><br></xmp></template><br><xmp><srcript><br>import {<br>  ref,<br>  reactive,<br>  computed,<br>  watch,<br>  provide,<br>  inject,<br>  readonly,<br>  toRef,<br>} from “vue”;<br>export default {<br>  props: {<br>    data: String,<br>  },<br>  setup(props, context) {<br>    const obj = reactive({<br>      name: “gxb”,<br>      age: 18,<br>    });<br>    const age=toRef(obj, “age”);<br>    watch(()=&gt;obj.age,(newAge,oldAge)=&gt;{<br>        console.log(newAge);<br>    })<br>    return { age };<br>  },<br>};<br></srcript><br></xmp></p>\n<p>toRefs则是把这个对象里面的所有属性均整成ref，这个修复则更简单了</p>\n<p><xmp><srcript><br>  <div ref=\"test\"><br>    <br>    &lt;button @click=”age++”&gt;add</button><br>  </div><br></xmp></template><br><xmp><srcript><br>import {<br>  ref,<br>  reactive,<br>  computed,<br>  watch,<br>  provide,<br>  inject,<br>  readonly,<br>  toRef,<br>  toRefs<br>} from “vue”;<br>export default {<br>  props: {<br>    data: String,<br>  },<br>  setup(props, context) {<br>    const obj = reactive({<br>      name: “gxb”,<br>      age: 18,<br>    });<br>    const obj02=toRefs(obj);</p>\n<pre><code>return &#123; ...obj02 &#125;;</code></pre>\n<p>  },<br>};<br></srcript></xmp></p>\n<h2>1.2. Teleport</h2>\n传送门，顾名思义\n场景：某一些组件中我们可能需要一个模态框的功能，然而虽然逻辑上来说这个模态框是属于该组件中的，但是实际操作一般需要把这个框子挂到body上。Teleport 组件就是帮我们处理这个问题的\n来看栗子\n假设组件中需要有一个模态框\n<xmp><srcript>\n    <div>\n        <model></model>\n    </div>\n</xmp></template>\n<xmp><srcript>\nimport Model from './model'\nexport default {\n    components:{Model}\n}\n</srcript>\n</xmp>\n模态框组件\n\n<p><xmp><srcript><br>  <div><br>    &lt;button @click=”flag=true”&gt;点击</button><br>    <teleport to=\"body\"><br>      <div v-if=\"flag\"><br>        <div>模态框</div><br>      </div><br>    </teleport><br>  </div><br></xmp></template><br><xmp><srcript><br>import { ref } from “vue”;<br>export default {<br>  setup() {<br>    const flag = ref(false);<br>    return { flag };<br>  },<br>};<br></srcript><br></xmp><br>即teleport组件的作用就是把teleport标签里面的元素传送到body上去</p>\n<p>再看层级</p>\n<h2>1.3. Fragments</h2>\n这个的理解就更简单了\n原来只能这样:即只允许存在一个最外层的父元素div\n\n<p><xmp><srcript><br>  <div><br>    …<br>  </div><br></xmp></template><br></xmp><br>现在可多个</p>\n<p><xmp><srcript><br>  <div><br>    …<br>  </div><br>  <div><br>    …<br>  </div><br>    …<br></xmp></template><br></xmp></p>\n<h2>1.4. Emits Component Option</h2>\n<h3>1.4.1 自定义事件派发</h3>\n这里的重点：即多了一个派发事件的选项emits\n也就我们以后再次使用emit派发一个事件的时候需要把这此派发的事件名放到选项里\n栗子:\n\n<p><xmp><srcript><br>  <div><br>    &lt;button @click=”$emit(‘test’)”&gt;点击</button><br>  </div><br></xmp></template><br><xmp><srcript><br>export default {<br>  emits: [“test”],<br>};<br></srcript><br></xmp><br>注意：这里如果你派发的是一个原生事件，且没有把此事件放进emits选项中，其父组件的监听会被触发两次</p>\n<p><xmp><srcript><br>  <div><br>    &lt;button @click=”$emit(‘click’)”&gt;点击</button><br>  </div><br></xmp></template><br><xmp><srcript><br>export default {<br>//   emits: [“click”],<br>};<br></srcript><br></xmp></p>\n<h3>1.4.2 v-model</h3>\nvue3中的v-model,所借助的属性是 modelValue  所借助的事件是 update:modelValue (且3中把sync移出掉了)\n栗子\n父组件\n\n<p><xmp><srcript><br>  <div id=\"nav\"><br>    <br>    <test05 v-model=\"data\"></test05><br>  </div><br></xmp></template><br><xmp><srcript><br>import { ref } from “vue”;<br>import Test05 from “./components/test05”;<br>export default {<br>  components: { Test05 },<br>  setup() {<br>    const data=ref(‘gxb’)<br>    return {data};<br>  },<br>};<br></srcript><br></xmp><br>子组件</p>\n<p><xmp><srcript><br>  <div><br>    &lt;input type=”text” :value=”modelValue” @input=”$emit(‘update:modelValue’,$event.target.value)” /&gt;<br>  </div><br></xmp></template><br><xmp><srcript><br>export default {<br>    props:{<br>        modelValue:String<br>    },<br>    emits:[‘update:modelValue’]<br>}<br></srcript></xmp></p>\n<p>自定义属性名，vue2.x中可通过 model选项  指定传过来的属性名和指定本次v-model要利用的事件。 vue3中也可自定属性<br>栗子<br>父组件(即在v-model后面指定绑定)<br><test05 v-model:foo=\"data\"></test05></p>\n<p>子组件<br><xmp><srcript><br>  <div><br>    &lt;input type=”text” :value=”foo” @input=”$emit(‘update:foo’,$event.target.value)” /&gt;<br>  </div><br></xmp></template><br><xmp><srcript><br>export default {<br>    props:{<br>        foo:String<br>    },<br>    emits:[‘update:foo’]<br>}<br></srcript></xmp></p>\n<p>一个组件中可写多个v-model指令<br>栗子：<br>父组件<br> <test01 v-model:foo=\"a\" v-model:bar=\"b\"></test01></p>\n<p>子组件<br><xmp><srcript><br>  <div><br>    &lt;input type=”text” :value=”foo” @input=”$emit(‘update:foo’,$event.target.value)” /&gt;<br>    &lt;input type=”text” :value=”bar” @input=”$emit(‘update:bar’,$event.target.value)” /&gt;<br>  </div><br></xmp></template><br><xmp><srcript><br>export default {<br>  props: {<br>    foo: String,<br>    bar: String,<br>  },<br>  emits: [“update:foo”, “update:bar”],<br>  setup(props) {<br>    return {};<br>  },<br>};<br></srcript></xmp></p>\n<h2>1.5. createRendererAPI</h2>\n自定义渲染器字如其名，它的主要功能是我们可以自定义 Virtual DOM 到DOM的方式，看了好3、4个大佬的栗子都是用canvas画了图。自己这里想不出什么栗子来先不写了\n二、其他\n2.1 Global API\n在vue2.x中没有应用的概念，vue2.x中的所谓的“app”也只不过是一个通过Vue构造出的实例。但是2.x中的一些全局API（像mixins、use、 component等 ）是直接在Vue构造函数中的\n也即如果下面还有使用new Vue的“应用”，这些全局API很容易造成污染\n下面来看一眼vue3的入口文件\nimport { createApp } from 'vue'\nimport App from './App.vue'\nimport router from './router'\nimport store from './store'\n\n<p>createApp(App).use(store).use(router).mount(‘#app’)</p>\n<p>现在有了一个createApp，这个方法就返回一个应用程序的实例<br>拿component写个栗子<br>import { createApp, h } from ‘vue’<br>import App from ‘./App.vue’<br>import router from ‘./router’<br>import store from ‘./store’</p>\n<p>createApp(App)<br>    .component(‘test06’, {<br>        render() {<br>            return h(‘div’, {}, ‘全局组件’)<br>        }<br>    })<br>    .use(store)<br>    .use(router)<br>    .mount(‘#app’)</p>\n<p>其他API相应改变，如官网</p>\n<p>Global API Treeshaking<br>官网是以 Vue.nextTick() ，这个全局API来举例的<br>这个摇树是什么玩意呢？</p>\n<p>通过这句话可以理解，即这些个API不分青红皂白就写死在vue的构造函数上，如果我们在应用中本就没有对这些个API进行使用。那么打包时把这些东西也打进去是不是浪费性能同时也增大了打包体积呢<br>故vue3中，nextTick的使用也是需要从vue中导入一下的<br>import { nextTick } from ‘vue’</p>\n<p>nextTick(() =&gt; {<br>  …<br>})</p>\n<p>其他受影响的API</p>\n<p>2.2 Template Directives<br>v-model<br>v-model上面已经写了，去掉了.sync，使用v-model进行了统一<br>v-if、v-for优先级问题<br>在2.x是v-for优先级高，在3.0中v-if的优先级高<br>2.3 Components<br>函数式组件<br>因为在vue3中函数式组件现在在性能上的提升可以忽略不计，还是推荐使用状态组件。<br>并且这里函数式组件只能通过纯函数进行声明，只能接受props和context（也是emit、slots、attrs）<br>简单搞个例子<br>这里偷个懒吧，把官网的栗子拿过来<br>vue2.x<br>// Vue 2 Functional Component Example<br>export default {<br>  functional: true,<br>  props: [‘level’],<br>  render(h, { props, data, children }) {<br>    return h(<code>h$&#123;props.level&#125;</code>, data, children)<br>  }<br>}</p>\n<p>vue3,区别除了下面所要说的h函数变化问题，还有上面提到的参数问题，再一个变化就是去掉了 functional: true,<br>import { h } from ‘vue’</p>\n<p>const DynamicHeading = (props, context) =&gt; {<br>  return h(<code>h$&#123;props.level&#125;</code>, context.attrs, context.slots)<br>}</p>\n<p>DynamicHeading.props = [‘level’]</p>\n<p>export default DynamicHeading</p>\n<p>单文件形式对比<br>2.x<br>// Vue 2 Functional Component Example with <xmp><srcript><br><template functional><br>  <component\n    :is=\"`h${props.level}`\"\n    v-bind=\"attrs\"\n    v-on=\"listeners\"\n  /><br></xmp></template></p>\n<p><xmp><srcript><br>export default {<br>  props: [‘level’]<br>}<br></srcript></xmp></p>\n<p>3.0,区别去掉了functional,监听器放进了$attrs且可删除<br><xmp><srcript><br>  <component\n    v-bind:is=\"`h${props.level}`\"\n    v-bind=\"$attrs\"\n  /><br></xmp></template></p>\n<p><xmp><srcript><br>export default {<br>  props: [‘level’]<br>}<br></srcript></xmp></p>\n<p>异步组件<br>原来异步组件咋整的呢<br>const asyncPage = () =&gt; import(‘./NextPage.vue’)</p>\n<p>或者带选项的<br>const asyncPage = {<br>  component: () =&gt; import(‘./NextPage.vue’),<br>  delay: 200,<br>  timeout: 3000,<br>  error: ErrorComponent,<br>  loading: LoadingComponent<br>}</p>\n<p>但是vue3中不一样了，这里有一个新的API defineAsyncComponent用来显示定义异步组件<br>也即<br>const asyncPage = defineAsyncComponent(() =&gt; import(‘./NextPage.vue’))</p>\n<p>或<br>const asyncPageWithOptions = defineAsyncComponent({<br>  loader: () =&gt; import(‘./NextPage.vue’),<br>  delay: 200,<br>  timeout: 3000,<br>  errorComponent: ErrorComponent,<br>  loadingComponent: LoadingComponent<br>})</p>\n<p>细心看也可看出component改成了loader<br>还有一点不同的是，2.x中函数参数中可接收resolve,reject,3.0则不可，但是必须要返回一个Promise</p>\n<h2>2.4 Render Function</h2>\n渲染函数的改变\n即原来的h函数是这样的\nexport default {\n  render(h) {\n    return h('div')\n  }\n}\n\n<p>而现在h函数则需要从vue的再导入进来<br>其实我上面有一个栗子已经用到了，再拿过来一次<br>import { createApp, h } from ‘vue’<br>import App from ‘./App.vue’<br>import router from ‘./router’<br>import store from ‘./store’</p>\n<p>createApp(App)<br>    .component(‘test06’, {<br>        render() {<br>            return h(‘div’, {}, ‘全局组件’)<br>        }<br>    })<br>    .use(store)<br>    .use(router)<br>    .mount(‘#app’)</p>\n<p>还有一个属性的变动，直接拿官网的栗子吧<br>2.x 中的节点属性格式<br>{<br>  class: [‘button’, ‘is-outlined’],<br>  style: { color: ‘#34495E’ },<br>  attrs: { id: ‘submit’ },<br>  domProps: { innerxmp: ‘’ },<br>  on: { click: submitForm },<br>  key: ‘submit-button’<br>}</p>\n<p>在3.0中，这些属性不再被嵌套，被展平了(这看起来更像DOM节点上的东西了吧)<br>{<br>  class: [‘button’, ‘is-outlined’],<br>  style: { color: ‘#34495E’ },<br>  id: ‘submit’,<br>  innerxmp: ‘’,<br>  onClick: submitForm,<br>  key: ‘submit-button’<br>}</p>\n<p>插槽方面<br>废掉了$scopedSlots，使用$slots<br>vue2.x中，一个组件使用渲染函数拿插槽是这样的</p>\n<p><xmp><srcript><br>export default {<br>    render(h) {<br>        return h(‘div’,{},this.$scopedSlots.default)<br>    },<br>}<br></srcript><br></xmp><br>vue3.x中则是这样的<br></xmp><br><xmp><srcript><br>import {h} from ‘vue’<br>export default {<br>    props:{<br>        data:String<br>    },<br>    render() {<br>        return h(‘div’,{},this.$slots.default())<br>    },<br>}<br></srcript><br></xmp></p>\n<h2>2.5 Custom Elements</h2>\n自定义元素白名单\n如一些特殊的组件，我们要特殊用处的希望vue的编译忽略\n栗子\n直接往组件中放一个为注册过的组件\n <test08></test08>\n\n\n<p>不希望出现这个错就把它放进白名单里<br>使用构建工具版本<br>rules: [<br>  {<br>    test: /.vue$/,<br>    use: ‘vue-loader’,<br>    options: {<br>      compilerOptions: {<br>        isCustomElement: tag =&gt; tag === ‘test08’<br>      }<br>    }<br>  }<br>  // …<br>]</p>\n<p> 运行时编译版本<br>const app = Vue.createApp({})<br>app.config.isCustomElement = tag =&gt; tag === ‘test08’<br>is只能用在<component>上<br>但是 <component :is=\"componentId\"></component> 除了这个玩意，我们别的地方可能也有需求需要用到is怎么办呢<br>故vue3中推出了v-is指令</p>\n","site":{"data":{}},"excerpt":"","more":"<p>可任选一种创建方式<br>我个人还是采用的脚手架<br>升级（即重装）<br>npm install -g @vue/cli # OR yarn global add @vue/cli<br>vue create hello-vue3<br>下面和原来不同的就是多了个选择版本的，选择vue3上手即可</p>\n<h2>一、重点</h2>\n先以下面官网所列出的显著的为主（后三个先忽略）\n\n<h3>1.1. composition API</h3>\n别不管 Options API 与composition API 比较，我们先直接上手composition API \ncomposition API 入口点setup函数\n创建响应式数据 ref与reactive\nref\nref函数接一个参数返回一个响应式的ref对象\n直接看栗子\n\n<p><xmp><srcript><br>  <div><br>      <br>  </div><br></xmp></template><br><xmp><srcript><br>import { ref } from “vue”;<br>export default {<br>  setup() {<br>    const num = ref(1);<br>    return { num };<br>  },<br>};<br></srcript><br></xmp><br>也即和vue2.x中的这种写法是一样的<br>data(){<br>    return {<br>        num:1<br>    }<br>}</p>\n<p>值得注意的是：ref返回的是一个对象，需要通过它的value属性拿到它的值<br>也即num.value。不过在模板中使用时他会自动解。也就是上面栗子中模板直接使用num，还有一种可自动解的情况先看下面<br>另外现在就可以理解ref是用来把简单类型的数据进行响应式化的<br>reactive<br>ref负责简单数据数据，则reactive就是将引用类型的数据进行响应式化<br>直接看栗子</p>\n<p><xmp><srcript><br>  <div></div><br></xmp></template><br><xmp><srcript><br>import { ref, reactive } from “vue”;<br>export default {<br>  setup() {<br>    const num = ref(1);<br>    const obj = reactive({<br>      name: “gxb”,<br>      age: 18,<br>    });<br>    return { num, obj };<br>  },<br>};<br></srcript><br></xmp></p>\n<p>上面的ref对象自动解套的另一种情况也即在这里它作为reactive函数参数对象的一属性<br>即:<br> const num = ref(1);<br>const obj = reactive({<br>      name: “gxb”,<br>      age: 18,<br>      num<br>    });</p>\n<p>值得注意的是：这里不要随意使用…语法或者解构，否则会丧失响应式性质，最后的工具函数那再写栗子介绍<br>readonly<br>这个函数，参数可以一个响应式或者普通的对象再或者是个ref。返回的是一个只读代理（深层的）<br>栗子<br><img src=\"1.png\"><br>computed 与 watch<br>computed<br>computed是一个函数，它需要传一个getter函数。其返回值是一个不可手动修改的ref对象<br>栗子</p>\n<p><xmp><srcript><br>  <div></div><br></xmp></template><br><xmp><srcript><br>import { ref, reactive, computed } from “vue”;<br>export default {<br>  setup() {<br>    const num = ref(1);<br>    const obj = reactive({<br>      name: “gxb”,<br>      age: 18,<br>      num,<br>    });<br>    const num2 = computed(() =&gt; num.value + 1);<br>    return { num, obj, num2 };<br>  },<br>};<br></srcript><br></xmp></p>\n<p>注意不可修改<br>如<br> const num2=computed(()=&gt;num.value+1)<br>    num2.value++</p>\n<p>想要一个可以进行修改的，就需传一个具有get和set函数的对象<br><xmp><srcript><br>  <div></div><br></xmp></template><br><xmp><srcript><br>import { ref, reactive, computed } from “vue”;<br>export default {<br>  setup() {<br>    const num = ref(1);<br>    const obj = reactive({<br>      name: “gxb”,<br>      age: 18,<br>      num,<br>    });<br>    const num2 = computed({<br>        get:()=&gt;num,<br>        set:value=&gt;num.value=value<br>    });</p>\n<pre><code>num2.value=3\nreturn &#123; num, obj, num2 &#125;;</code></pre>\n<p>  },<br>};<br></srcript></xmp></p>\n<p>要注意的是，此时num2这个ref对象不会在自动解套了<br>watch<br>监听一个<br><xmp><srcript><br>  <div></div><br></xmp></template><br><xmp><srcript><br>import { ref, reactive, computed, watch } from “vue”;<br>export default {<br>  setup() {<br>    const obj = reactive({<br>      name: “gxb”,<br>      age: 18,<br>      num,<br>    });</p>\n<pre><code>watch(\n  () =&gt; obj.name,\n  (name, preName) =&gt; &#123;\n    console.log(`new $&#123;name&#125;---old $&#123;preName&#125;`);\n  &#125;\n);\nsetTimeout(() =&gt; &#123;\n  obj.name = &quot;zhangsan&quot;;\n&#125;, 1000);\n\nreturn &#123; obj &#125;;</code></pre>\n<p>  },<br>};<br></srcript></xmp></p>\n<p>第一参除了可以是上面那种有返回值的getter函数，也可以是一个ref对象<br>即<br><xmp><srcript><br>  <div></div><br></xmp></template><br><xmp><srcript><br>import { ref, reactive, computed, watch } from “vue”;<br>export default {<br>  setup() {<br>    const obj = reactive({<br>      name: “gxb”,<br>      age: 18,<br>      num,<br>    });<br>    const num = ref(0);<br>    watch(num, (name, preName) =&gt; {<br>      console.log(<code>new $&#123;name&#125;---old $&#123;preName&#125;</code>);<br>    });<br>    setTimeout(() =&gt; {<br>      num.value = 2;<br>    }, 1000);</p>\n<pre><code>return &#123; obj &#125;;</code></pre>\n<p>  },<br>};<br></srcript></xmp></p>\n<p>监听多个<br>即如下只要num或obj.name有一个发生变动就触发监听器处理回调<br><xmp><srcript><br>  <div></div><br></xmp></template><br><xmp><srcript><br>import { ref, reactive, computed, watch } from “vue”;<br>export default {<br>  setup() {<br>    const obj = reactive({<br>      name: “gxb”,<br>      age: 18,<br>      num,<br>    });<br>    const num = ref(0);<br>    watch([num, ()=&gt;obj.name], ([newNum, newName], [oldNum, oldName]) =&gt; {<br>      console.log(<code>new $&#123;(newNum)&#125;,$&#123;(newName)&#125;---old $&#123;(oldNum)&#125;,$&#123;oldName&#125;</code>);<br>    });<br>    setTimeout(() =&gt; {<br>      num.value = 6;<br>    //   obj.name = “zhangsan”;<br>    }, 1000);</p>\n<pre><code>return &#123; obj &#125;;</code></pre>\n<p>  },<br>};<br></srcript></xmp></p>\n<p>生命周期钩子<br>栗子<br>import { onMounted, onUpdated, onUnmounted } from ‘vue’</p>\n<p>const MyComponent = {<br>  setup() {<br>    onMounted(() =&gt; {<br>      console.log(‘mounted!’)<br>    })<br>    onUpdated(() =&gt; {<br>      console.log(‘updated!’)<br>    })<br>    onUnmounted(() =&gt; {<br>      console.log(‘unmounted!’)<br>    })<br>  },<br>}</p>\n<p>对应2.x钩子</p>\n<p>props和this<br>props<br>setup这个入口函数接收的第一个参数就是props<br>栗子</p>\n<p>这里需要注意，不要随便进行解构<br>即图省事<br>  props: {<br>    data: String,<br>  },<br>  setup({ data }) {<br>    console.log(data);<br>  }</p>\n<p>解构会使其丧失响应式的<br>this<br>2.x中拿组件实例实例很好拿，一般就是直接this，但是setup则不同。<br>但是组件实例上有许多api我们还是要使用的<br>故setup的第二个参数是一个上下文对象<br>栗子:派发一个自定义事件</p>\n<p>值得注意的是这个context只是选择性的暴露了一些属性，如上面的emit还有attrs、slots<br>依赖注入与Refs<br>依赖注入<br>和vue2.x的provide和inject基本一样<br>栗子</p>\n<p>为图简单我用的一个组件举例</p>\n<p>它们的响应式需要自己出来一下（如用ref）<br>Refs<br>如拿下面这个节点</p>\n<p><xmp><srcript><br>  <div ref=\"test\">test</div><br></xmp></template><br><xmp><srcript><br>import {<br>  ref,<br>  reactive,<br>  computed,<br>  watch,<br>  provide,<br>  inject,<br>  onMounted,<br>} from “vue”;<br>export default {<br>  setup() {<br>    const test = ref(null);<br>    onMounted(() =&gt; {<br>      console.log(test.value);<br>    });</p>\n<pre><code>return &#123; test &#125;;</code></pre>\n<p>  },<br>};<br></srcript></xmp></p>\n<p>一些工具函数<br>先来写下破坏reactive生成的响应对象代理的栗子<br>首先正常写法<br><xmp><srcript><br>  <div ref=\"test\"><br>    <br>    &lt;button @click=”obj.age++”&gt;add</button><br>  </div><br></xmp></template><br><xmp><srcript><br>import { ref, reactive, computed, watch, provide, inject, readonly } from “vue”;<br>export default {<br>  props: {<br>    data: String,<br>  },<br>  setup(props, context) {<br>    console.log(props.data);<br>    context.emit(“test”);<br>    const obj = reactive({<br>      name: “gxb”,<br>      age: 18,</p>\n<pre><code>&#125;);\n\nreturn &#123; obj &#125;;</code></pre>\n<p>  },<br>};<br></srcript></xmp></p>\n<p>使用扩展语法<br><xmp><srcript><br>  <div ref=\"test\"><br>    <br>    &lt;button @click=”age++”&gt;add</button><br>  </div><br></xmp></template><br><xmp><srcript><br>import { ref, reactive, computed, watch, provide, inject, readonly } from “vue”;<br>export default {<br>  props: {<br>    data: String,<br>  },<br>  setup(props, context) {<br>    console.log(props.data);<br>    context.emit(“test”);<br>    const obj = reactive({<br>      name: “gxb”,<br>      age: 18,</p>\n<pre><code>&#125;);\n\nreturn &#123; ...obj &#125;;</code></pre>\n<p>  },<br>};<br></srcript></xmp></p>\n<p>解构出来的同样不行<br><xmp><srcript><br>  <div ref=\"test\"><br>    <br>    &lt;button @click=”age++”&gt;add</button><br>  </div><br></xmp></template><br><xmp><srcript><br>import { ref, reactive, computed, watch, provide, inject, readonly } from “vue”;<br>export default {<br>  props: {<br>    data: String,<br>  },<br>  setup(props, context) {<br>    console.log(props.data);<br>    context.emit(“test”);<br>    const obj = reactive({<br>      name: “gxb”,<br>      age: 18,<br>    });<br>    const { age } = obj;<br>    return { age };<br>  },<br>};<br></srcript></xmp></p>\n<p>这个的原理也很简单，reactive的内部原理是Proxy，它操作均在返回的代理实例上<br>下面开始介绍几个工具函数</p>\n<p>unref，参数是一个ref则返回这个ref的value属性，否则返本身<br>toRef，给一个 reactive 对象的属性创建一个 ref<br>toRefs， 把一个响应式对象转换成普通对象，该普通对象的每个 property 都是一个 ref<br>isRef，判断一个值是否是ref<br>isProxy，判断一个对象是否是由 reactive 或者 readonly 方法创建的代理。<br>isReactive，判断一个对象是否是由 reactive 创建的响应式代理<br>isReadonly，判断一个对象是否是由 readonly 创建的只读代理。 </p>\n<p>仅给2、3写个例子吧<br>toRef，即把reactive 对象上的一个属性变成ref<br>什么意思呢，还是看上面的破坏了响应式的栗子<br>修复一下(即可把它一个属性抽出来做成响应式的ref，且它们还是互相关联的)</p>\n<p><xmp><srcript><br>  <div ref=\"test\"><br>    <br>    &lt;button @click=”age++”&gt;add</button><br>  </div><br></xmp></template><br><xmp><srcript><br>import {<br>  ref,<br>  reactive,<br>  computed,<br>  watch,<br>  provide,<br>  inject,<br>  readonly,<br>  toRef,<br>} from “vue”;<br>export default {<br>  props: {<br>    data: String,<br>  },<br>  setup(props, context) {<br>    const obj = reactive({<br>      name: “gxb”,<br>      age: 18,<br>    });<br>    const age=toRef(obj, “age”);<br>    watch(()=&gt;obj.age,(newAge,oldAge)=&gt;{<br>        console.log(newAge);<br>    })<br>    return { age };<br>  },<br>};<br></srcript><br></xmp></p>\n<p>toRefs则是把这个对象里面的所有属性均整成ref，这个修复则更简单了</p>\n<p><xmp><srcript><br>  <div ref=\"test\"><br>    <br>    &lt;button @click=”age++”&gt;add</button><br>  </div><br></xmp></template><br><xmp><srcript><br>import {<br>  ref,<br>  reactive,<br>  computed,<br>  watch,<br>  provide,<br>  inject,<br>  readonly,<br>  toRef,<br>  toRefs<br>} from “vue”;<br>export default {<br>  props: {<br>    data: String,<br>  },<br>  setup(props, context) {<br>    const obj = reactive({<br>      name: “gxb”,<br>      age: 18,<br>    });<br>    const obj02=toRefs(obj);</p>\n<pre><code>return &#123; ...obj02 &#125;;</code></pre>\n<p>  },<br>};<br></srcript></xmp></p>\n<h2>1.2. Teleport</h2>\n传送门，顾名思义\n场景：某一些组件中我们可能需要一个模态框的功能，然而虽然逻辑上来说这个模态框是属于该组件中的，但是实际操作一般需要把这个框子挂到body上。Teleport 组件就是帮我们处理这个问题的\n来看栗子\n假设组件中需要有一个模态框\n<xmp><srcript>\n    <div>\n        <model></model>\n    </div>\n</xmp></template>\n<xmp><srcript>\nimport Model from './model'\nexport default {\n    components:{Model}\n}\n</srcript>\n</xmp>\n模态框组件\n\n<p><xmp><srcript><br>  <div><br>    &lt;button @click=”flag=true”&gt;点击</button><br>    <teleport to=\"body\"><br>      <div v-if=\"flag\"><br>        <div>模态框</div><br>      </div><br>    </teleport><br>  </div><br></xmp></template><br><xmp><srcript><br>import { ref } from “vue”;<br>export default {<br>  setup() {<br>    const flag = ref(false);<br>    return { flag };<br>  },<br>};<br></srcript><br></xmp><br>即teleport组件的作用就是把teleport标签里面的元素传送到body上去</p>\n<p>再看层级</p>\n<h2>1.3. Fragments</h2>\n这个的理解就更简单了\n原来只能这样:即只允许存在一个最外层的父元素div\n\n<p><xmp><srcript><br>  <div><br>    …<br>  </div><br></xmp></template><br></xmp><br>现在可多个</p>\n<p><xmp><srcript><br>  <div><br>    …<br>  </div><br>  <div><br>    …<br>  </div><br>    …<br></xmp></template><br></xmp></p>\n<h2>1.4. Emits Component Option</h2>\n<h3>1.4.1 自定义事件派发</h3>\n这里的重点：即多了一个派发事件的选项emits\n也就我们以后再次使用emit派发一个事件的时候需要把这此派发的事件名放到选项里\n栗子:\n\n<p><xmp><srcript><br>  <div><br>    &lt;button @click=”$emit(‘test’)”&gt;点击</button><br>  </div><br></xmp></template><br><xmp><srcript><br>export default {<br>  emits: [“test”],<br>};<br></srcript><br></xmp><br>注意：这里如果你派发的是一个原生事件，且没有把此事件放进emits选项中，其父组件的监听会被触发两次</p>\n<p><xmp><srcript><br>  <div><br>    &lt;button @click=”$emit(‘click’)”&gt;点击</button><br>  </div><br></xmp></template><br><xmp><srcript><br>export default {<br>//   emits: [“click”],<br>};<br></srcript><br></xmp></p>\n<h3>1.4.2 v-model</h3>\nvue3中的v-model,所借助的属性是 modelValue  所借助的事件是 update:modelValue (且3中把sync移出掉了)\n栗子\n父组件\n\n<p><xmp><srcript><br>  <div id=\"nav\"><br>    <br>    <test05 v-model=\"data\"></test05><br>  </div><br></xmp></template><br><xmp><srcript><br>import { ref } from “vue”;<br>import Test05 from “./components/test05”;<br>export default {<br>  components: { Test05 },<br>  setup() {<br>    const data=ref(‘gxb’)<br>    return {data};<br>  },<br>};<br></srcript><br></xmp><br>子组件</p>\n<p><xmp><srcript><br>  <div><br>    &lt;input type=”text” :value=”modelValue” @input=”$emit(‘update:modelValue’,$event.target.value)” /&gt;<br>  </div><br></xmp></template><br><xmp><srcript><br>export default {<br>    props:{<br>        modelValue:String<br>    },<br>    emits:[‘update:modelValue’]<br>}<br></srcript></xmp></p>\n<p>自定义属性名，vue2.x中可通过 model选项  指定传过来的属性名和指定本次v-model要利用的事件。 vue3中也可自定属性<br>栗子<br>父组件(即在v-model后面指定绑定)<br><test05 v-model:foo=\"data\"></test05></p>\n<p>子组件<br><xmp><srcript><br>  <div><br>    &lt;input type=”text” :value=”foo” @input=”$emit(‘update:foo’,$event.target.value)” /&gt;<br>  </div><br></xmp></template><br><xmp><srcript><br>export default {<br>    props:{<br>        foo:String<br>    },<br>    emits:[‘update:foo’]<br>}<br></srcript></xmp></p>\n<p>一个组件中可写多个v-model指令<br>栗子：<br>父组件<br> <test01 v-model:foo=\"a\" v-model:bar=\"b\"></test01></p>\n<p>子组件<br><xmp><srcript><br>  <div><br>    &lt;input type=”text” :value=”foo” @input=”$emit(‘update:foo’,$event.target.value)” /&gt;<br>    &lt;input type=”text” :value=”bar” @input=”$emit(‘update:bar’,$event.target.value)” /&gt;<br>  </div><br></xmp></template><br><xmp><srcript><br>export default {<br>  props: {<br>    foo: String,<br>    bar: String,<br>  },<br>  emits: [“update:foo”, “update:bar”],<br>  setup(props) {<br>    return {};<br>  },<br>};<br></srcript></xmp></p>\n<h2>1.5. createRendererAPI</h2>\n自定义渲染器字如其名，它的主要功能是我们可以自定义 Virtual DOM 到DOM的方式，看了好3、4个大佬的栗子都是用canvas画了图。自己这里想不出什么栗子来先不写了\n二、其他\n2.1 Global API\n在vue2.x中没有应用的概念，vue2.x中的所谓的“app”也只不过是一个通过Vue构造出的实例。但是2.x中的一些全局API（像mixins、use、 component等 ）是直接在Vue构造函数中的\n也即如果下面还有使用new Vue的“应用”，这些全局API很容易造成污染\n下面来看一眼vue3的入口文件\nimport { createApp } from 'vue'\nimport App from './App.vue'\nimport router from './router'\nimport store from './store'\n\n<p>createApp(App).use(store).use(router).mount(‘#app’)</p>\n<p>现在有了一个createApp，这个方法就返回一个应用程序的实例<br>拿component写个栗子<br>import { createApp, h } from ‘vue’<br>import App from ‘./App.vue’<br>import router from ‘./router’<br>import store from ‘./store’</p>\n<p>createApp(App)<br>    .component(‘test06’, {<br>        render() {<br>            return h(‘div’, {}, ‘全局组件’)<br>        }<br>    })<br>    .use(store)<br>    .use(router)<br>    .mount(‘#app’)</p>\n<p>其他API相应改变，如官网</p>\n<p>Global API Treeshaking<br>官网是以 Vue.nextTick() ，这个全局API来举例的<br>这个摇树是什么玩意呢？</p>\n<p>通过这句话可以理解，即这些个API不分青红皂白就写死在vue的构造函数上，如果我们在应用中本就没有对这些个API进行使用。那么打包时把这些东西也打进去是不是浪费性能同时也增大了打包体积呢<br>故vue3中，nextTick的使用也是需要从vue中导入一下的<br>import { nextTick } from ‘vue’</p>\n<p>nextTick(() =&gt; {<br>  …<br>})</p>\n<p>其他受影响的API</p>\n<p>2.2 Template Directives<br>v-model<br>v-model上面已经写了，去掉了.sync，使用v-model进行了统一<br>v-if、v-for优先级问题<br>在2.x是v-for优先级高，在3.0中v-if的优先级高<br>2.3 Components<br>函数式组件<br>因为在vue3中函数式组件现在在性能上的提升可以忽略不计，还是推荐使用状态组件。<br>并且这里函数式组件只能通过纯函数进行声明，只能接受props和context（也是emit、slots、attrs）<br>简单搞个例子<br>这里偷个懒吧，把官网的栗子拿过来<br>vue2.x<br>// Vue 2 Functional Component Example<br>export default {<br>  functional: true,<br>  props: [‘level’],<br>  render(h, { props, data, children }) {<br>    return h(<code>h$&#123;props.level&#125;</code>, data, children)<br>  }<br>}</p>\n<p>vue3,区别除了下面所要说的h函数变化问题，还有上面提到的参数问题，再一个变化就是去掉了 functional: true,<br>import { h } from ‘vue’</p>\n<p>const DynamicHeading = (props, context) =&gt; {<br>  return h(<code>h$&#123;props.level&#125;</code>, context.attrs, context.slots)<br>}</p>\n<p>DynamicHeading.props = [‘level’]</p>\n<p>export default DynamicHeading</p>\n<p>单文件形式对比<br>2.x<br>// Vue 2 Functional Component Example with <xmp><srcript><br><template functional><br>  <component\n    :is=\"`h${props.level}`\"\n    v-bind=\"attrs\"\n    v-on=\"listeners\"\n  /><br></xmp></template></p>\n<p><xmp><srcript><br>export default {<br>  props: [‘level’]<br>}<br></srcript></xmp></p>\n<p>3.0,区别去掉了functional,监听器放进了$attrs且可删除<br><xmp><srcript><br>  <component\n    v-bind:is=\"`h${props.level}`\"\n    v-bind=\"$attrs\"\n  /><br></xmp></template></p>\n<p><xmp><srcript><br>export default {<br>  props: [‘level’]<br>}<br></srcript></xmp></p>\n<p>异步组件<br>原来异步组件咋整的呢<br>const asyncPage = () =&gt; import(‘./NextPage.vue’)</p>\n<p>或者带选项的<br>const asyncPage = {<br>  component: () =&gt; import(‘./NextPage.vue’),<br>  delay: 200,<br>  timeout: 3000,<br>  error: ErrorComponent,<br>  loading: LoadingComponent<br>}</p>\n<p>但是vue3中不一样了，这里有一个新的API defineAsyncComponent用来显示定义异步组件<br>也即<br>const asyncPage = defineAsyncComponent(() =&gt; import(‘./NextPage.vue’))</p>\n<p>或<br>const asyncPageWithOptions = defineAsyncComponent({<br>  loader: () =&gt; import(‘./NextPage.vue’),<br>  delay: 200,<br>  timeout: 3000,<br>  errorComponent: ErrorComponent,<br>  loadingComponent: LoadingComponent<br>})</p>\n<p>细心看也可看出component改成了loader<br>还有一点不同的是，2.x中函数参数中可接收resolve,reject,3.0则不可，但是必须要返回一个Promise</p>\n<h2>2.4 Render Function</h2>\n渲染函数的改变\n即原来的h函数是这样的\nexport default {\n  render(h) {\n    return h('div')\n  }\n}\n\n<p>而现在h函数则需要从vue的再导入进来<br>其实我上面有一个栗子已经用到了，再拿过来一次<br>import { createApp, h } from ‘vue’<br>import App from ‘./App.vue’<br>import router from ‘./router’<br>import store from ‘./store’</p>\n<p>createApp(App)<br>    .component(‘test06’, {<br>        render() {<br>            return h(‘div’, {}, ‘全局组件’)<br>        }<br>    })<br>    .use(store)<br>    .use(router)<br>    .mount(‘#app’)</p>\n<p>还有一个属性的变动，直接拿官网的栗子吧<br>2.x 中的节点属性格式<br>{<br>  class: [‘button’, ‘is-outlined’],<br>  style: { color: ‘#34495E’ },<br>  attrs: { id: ‘submit’ },<br>  domProps: { innerxmp: ‘’ },<br>  on: { click: submitForm },<br>  key: ‘submit-button’<br>}</p>\n<p>在3.0中，这些属性不再被嵌套，被展平了(这看起来更像DOM节点上的东西了吧)<br>{<br>  class: [‘button’, ‘is-outlined’],<br>  style: { color: ‘#34495E’ },<br>  id: ‘submit’,<br>  innerxmp: ‘’,<br>  onClick: submitForm,<br>  key: ‘submit-button’<br>}</p>\n<p>插槽方面<br>废掉了$scopedSlots，使用$slots<br>vue2.x中，一个组件使用渲染函数拿插槽是这样的</p>\n<p><xmp><srcript><br>export default {<br>    render(h) {<br>        return h(‘div’,{},this.$scopedSlots.default)<br>    },<br>}<br></srcript><br></xmp><br>vue3.x中则是这样的<br></xmp><br><xmp><srcript><br>import {h} from ‘vue’<br>export default {<br>    props:{<br>        data:String<br>    },<br>    render() {<br>        return h(‘div’,{},this.$slots.default())<br>    },<br>}<br></srcript><br></xmp></p>\n<h2>2.5 Custom Elements</h2>\n自定义元素白名单\n如一些特殊的组件，我们要特殊用处的希望vue的编译忽略\n栗子\n直接往组件中放一个为注册过的组件\n <test08></test08>\n\n\n<p>不希望出现这个错就把它放进白名单里<br>使用构建工具版本<br>rules: [<br>  {<br>    test: /.vue$/,<br>    use: ‘vue-loader’,<br>    options: {<br>      compilerOptions: {<br>        isCustomElement: tag =&gt; tag === ‘test08’<br>      }<br>    }<br>  }<br>  // …<br>]</p>\n<p> 运行时编译版本<br>const app = Vue.createApp({})<br>app.config.isCustomElement = tag =&gt; tag === ‘test08’<br>is只能用在<component>上<br>但是 <component :is=\"componentId\"></component> 除了这个玩意，我们别的地方可能也有需求需要用到is怎么办呢<br>故vue3中推出了v-is指令</p>\n"}],"PostAsset":[{"_id":"source/_posts/聊天室项目/聊天室数据库结构设计.png","post":"ckfe0pcih00020wurf5li8kx3","slug":"聊天室数据库结构设计.png","modified":1,"renderable":1}],"PostCategory":[],"PostTag":[{"post_id":"ckfe0pcie00010wurbeh2g4w5","tag_id":"ckfe0pcij00030wurhcet9551","_id":"ckfe0pcil00050wur21cndc2p"},{"post_id":"ckfe0pcih00020wurf5li8kx3","tag_id":"ckfe0pcik00040wuraqvo37c4","_id":"ckfe0pcil00060wur6rxk2l7a"},{"post_id":"ckfe0pcin00080wur0ubtgp5v","tag_id":"ckfe0pcik00040wuraqvo37c4","_id":"ckfe0pciq000b0wurfgef98wf"},{"post_id":"ckfe0pcip000a0wurc38ha9wu","tag_id":"ckfe0pcik00040wuraqvo37c4","_id":"ckfe0pcir000c0wurhh05ftid"},{"post_id":"ckfe0pcim00070wur892m4lfr","tag_id":"ckfe0pcip00090wurg6d350e4","_id":"ckfe0pcir000d0wurfac05qby"}],"Tag":[{"name":"useful","_id":"ckfe0pcij00030wurhcet9551"},{"name":"program","_id":"ckfe0pcik00040wuraqvo37c4"},{"name":"essay","_id":"ckfe0pcip00090wurg6d350e4"}]}}