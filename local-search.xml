<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>vue3傻瓜式入门</title>
    <link href="/2020/09/20/a/"/>
    <url>/2020/09/20/a/</url>
    
    <content type="html"><![CDATA[<p>可任选一种创建方式<br>我个人还是采用的脚手架<br>升级（即重装）<br>npm install -g @vue/cli # OR yarn global add @vue/cli<br>vue create hello-vue3<br>下面和原来不同的就是多了个选择版本的，选择vue3上手即可</p><h2>一、重点</h2>先以下面官网所列出的显著的为主（后三个先忽略）<h3>1.1. composition API</h3>别不管 Options API 与composition API 比较，我们先直接上手composition API composition API 入口点setup函数创建响应式数据 ref与reactiverefref函数接一个参数返回一个响应式的ref对象直接看栗子<p><br><textarea></br><srcript><br>  <div><br>      <br>  </div><br><br></textarea></br></template><br><br><textarea></br><srcript><br>import { ref } from “vue”;<br>export default {<br>  setup() {<br>    const num = ref(1);<br>    return { num };<br>  },<br>};<br></srcript><br><br></textarea></br><br>也即和vue2.x中的这种写法是一样的<br>data(){<br>    return {<br>        num:1<br>    }<br>}</p><p>值得注意的是：ref返回的是一个对象，需要通过它的value属性拿到它的值<br>也即num.value。不过在模板中使用时他会自动解。也就是上面栗子中模板直接使用num，还有一种可自动解的情况先看下面<br>另外现在就可以理解ref是用来把简单类型的数据进行响应式化的<br>reactive<br>ref负责简单数据数据，则reactive就是将引用类型的数据进行响应式化<br>直接看栗子</p><p><br><textarea></br><srcript><br>  <div></div><br><br></textarea></br></template><br><br><textarea></br><srcript><br>import { ref, reactive } from “vue”;<br>export default {<br>  setup() {<br>    const num = ref(1);<br>    const obj = reactive({<br>      name: “gxb”,<br>      age: 18,<br>    });<br>    return { num, obj };<br>  },<br>};<br></srcript><br><br></textarea></br></p><p>上面的ref对象自动解套的另一种情况也即在这里它作为reactive函数参数对象的一属性<br>即:<br> const num = ref(1);<br>const obj = reactive({<br>      name: “gxb”,<br>      age: 18,<br>      num<br>    });</p><p>值得注意的是：这里不要随意使用…语法或者解构，否则会丧失响应式性质，最后的工具函数那再写栗子介绍<br>readonly<br>这个函数，参数可以一个响应式或者普通的对象再或者是个ref。返回的是一个只读代理（深层的）<br>栗子<br>computed 与 watch<br>computed<br>computed是一个函数，它需要传一个getter函数。其返回值是一个不可手动修改的ref对象<br>栗子</p><p><br><textarea></br><srcript><br>  <div></div><br><br></textarea></br></template><br><br><textarea></br><srcript><br>import { ref, reactive, computed } from “vue”;<br>export default {<br>  setup() {<br>    const num = ref(1);<br>    const obj = reactive({<br>      name: “gxb”,<br>      age: 18,<br>      num,<br>    });<br>    const num2 = computed(() =&gt; num.value + 1);<br>    return { num, obj, num2 };<br>  },<br>};<br></srcript><br><br></textarea></br></p><p>注意不可修改<br>如<br> const num2=computed(()=&gt;num.value+1)<br>    num2.value++</p><p>想要一个可以进行修改的，就需传一个具有get和set函数的对象<br><br><textarea></br><srcript><br>  <div></div><br><br></textarea></br></template><br><br><textarea></br><srcript><br>import { ref, reactive, computed } from “vue”;<br>export default {<br>  setup() {<br>    const num = ref(1);<br>    const obj = reactive({<br>      name: “gxb”,<br>      age: 18,<br>      num,<br>    });<br>    const num2 = computed({<br>        get:()=&gt;num,<br>        set:value=&gt;num.value=value<br>    });</p><pre><code>num2.value=3return &#123; num, obj, num2 &#125;;</code></pre><p>  },<br>};<br><br></textarea></br></srcript></p><p>要注意的是，此时num2这个ref对象不会在自动解套了<br>watch<br>监听一个<br><br><textarea></br><srcript><br>  <div></div><br><br></textarea></br></template><br><br><textarea></br><srcript><br>import { ref, reactive, computed, watch } from “vue”;<br>export default {<br>  setup() {<br>    const obj = reactive({<br>      name: “gxb”,<br>      age: 18,<br>      num,<br>    });</p><pre><code>watch(  () =&gt; obj.name,  (name, preName) =&gt; &#123;    console.log(`new $&#123;name&#125;---old $&#123;preName&#125;`);  &#125;);setTimeout(() =&gt; &#123;  obj.name = &quot;zhangsan&quot;;&#125;, 1000);return &#123; obj &#125;;</code></pre><p>  },<br>};<br><br></textarea></br></srcript></p><p>第一参除了可以是上面那种有返回值的getter函数，也可以是一个ref对象<br>即<br><br><textarea></br><srcript><br>  <div></div><br><br></textarea></br></template><br><br><textarea></br><srcript><br>import { ref, reactive, computed, watch } from “vue”;<br>export default {<br>  setup() {<br>    const obj = reactive({<br>      name: “gxb”,<br>      age: 18,<br>      num,<br>    });<br>    const num = ref(0);<br>    watch(num, (name, preName) =&gt; {<br>      console.log(<code>new $&#123;name&#125;---old $&#123;preName&#125;</code>);<br>    });<br>    setTimeout(() =&gt; {<br>      num.value = 2;<br>    }, 1000);</p><pre><code>return &#123; obj &#125;;</code></pre><p>  },<br>};<br><br></textarea></br></srcript></p><p>监听多个<br>即如下只要num或obj.name有一个发生变动就触发监听器处理回调<br><br><textarea></br><srcript><br>  <div></div><br><br></textarea></br></template><br><br><textarea></br><srcript><br>import { ref, reactive, computed, watch } from “vue”;<br>export default {<br>  setup() {<br>    const obj = reactive({<br>      name: “gxb”,<br>      age: 18,<br>      num,<br>    });<br>    const num = ref(0);<br>    watch([num, ()=&gt;obj.name], ([newNum, newName], [oldNum, oldName]) =&gt; {<br>      console.log(<code>new $&#123;(newNum)&#125;,$&#123;(newName)&#125;---old $&#123;(oldNum)&#125;,$&#123;oldName&#125;</code>);<br>    });<br>    setTimeout(() =&gt; {<br>      num.value = 6;<br>    //   obj.name = “zhangsan”;<br>    }, 1000);</p><pre><code>return &#123; obj &#125;;</code></pre><p>  },<br>};<br><br></textarea></br></srcript></p><p>生命周期钩子<br>栗子<br>import { onMounted, onUpdated, onUnmounted } from ‘vue’</p><p>const MyComponent = {<br>  setup() {<br>    onMounted(() =&gt; {<br>      console.log(‘mounted!’)<br>    })<br>    onUpdated(() =&gt; {<br>      console.log(‘updated!’)<br>    })<br>    onUnmounted(() =&gt; {<br>      console.log(‘unmounted!’)<br>    })<br>  },<br>}</p><p>对应2.x钩子</p><p>props和this<br>props<br>setup这个入口函数接收的第一个参数就是props<br>栗子</p><p>这里需要注意，不要随便进行解构<br>即图省事<br>  props: {<br>    data: String,<br>  },<br>  setup({ data }) {<br>    console.log(data);<br>  }</p><p>解构会使其丧失响应式的<br>this<br>2.x中拿组件实例实例很好拿，一般就是直接this，但是setup则不同。<br>但是组件实例上有许多api我们还是要使用的<br>故setup的第二个参数是一个上下文对象<br>栗子:派发一个自定义事件</p><p>值得注意的是这个context只是选择性的暴露了一些属性，如上面的emit还有attrs、slots<br>依赖注入与Refs<br>依赖注入<br>和vue2.x的provide和inject基本一样<br>栗子</p><p>为图简单我用的一个组件举例</p><p>它们的响应式需要自己出来一下（如用ref）<br>Refs<br>如拿下面这个节点</p><p><br><textarea></br><srcript><br>  <div ref="test">test</div><br><br></textarea></br></template><br><br><textarea></br><srcript><br>import {<br>  ref,<br>  reactive,<br>  computed,<br>  watch,<br>  provide,<br>  inject,<br>  onMounted,<br>} from “vue”;<br>export default {<br>  setup() {<br>    const test = ref(null);<br>    onMounted(() =&gt; {<br>      console.log(test.value);<br>    });</p><pre><code>return &#123; test &#125;;</code></pre><p>  },<br>};<br><br></textarea></br></srcript></p><p>一些工具函数<br>先来写下破坏reactive生成的响应对象代理的栗子<br>首先正常写法<br><br><textarea></br><srcript><br>  <div ref="test"><br>    <br>    &lt;button @click=”obj.age++”&gt;add</button><br>  </div><br><br></textarea></br></template><br><br><textarea></br><srcript><br>import { ref, reactive, computed, watch, provide, inject, readonly } from “vue”;<br>export default {<br>  props: {<br>    data: String,<br>  },<br>  setup(props, context) {<br>    console.log(props.data);<br>    context.emit(“test”);<br>    const obj = reactive({<br>      name: “gxb”,<br>      age: 18,</p><pre><code>&#125;);return &#123; obj &#125;;</code></pre><p>  },<br>};<br><br></textarea></br></srcript></p><p>使用扩展语法<br><br><textarea></br><srcript><br>  <div ref="test"><br>    <br>    &lt;button @click=”age++”&gt;add</button><br>  </div><br><br></textarea></br></template><br><br><textarea></br><srcript><br>import { ref, reactive, computed, watch, provide, inject, readonly } from “vue”;<br>export default {<br>  props: {<br>    data: String,<br>  },<br>  setup(props, context) {<br>    console.log(props.data);<br>    context.emit(“test”);<br>    const obj = reactive({<br>      name: “gxb”,<br>      age: 18,</p><pre><code>&#125;);return &#123; ...obj &#125;;</code></pre><p>  },<br>};<br><br></textarea></br></srcript></p><p>解构出来的同样不行<br><br><textarea></br><srcript><br>  <div ref="test"><br>    <br>    &lt;button @click=”age++”&gt;add</button><br>  </div><br><br></textarea></br></template><br><br><textarea></br><srcript><br>import { ref, reactive, computed, watch, provide, inject, readonly } from “vue”;<br>export default {<br>  props: {<br>    data: String,<br>  },<br>  setup(props, context) {<br>    console.log(props.data);<br>    context.emit(“test”);<br>    const obj = reactive({<br>      name: “gxb”,<br>      age: 18,<br>    });<br>    const { age } = obj;<br>    return { age };<br>  },<br>};<br><br></textarea></br></srcript></p><p>这个的原理也很简单，reactive的内部原理是Proxy，它操作均在返回的代理实例上<br>下面开始介绍几个工具函数</p><p>unref，参数是一个ref则返回这个ref的value属性，否则返本身<br>toRef，给一个 reactive 对象的属性创建一个 ref<br>toRefs， 把一个响应式对象转换成普通对象，该普通对象的每个 property 都是一个 ref<br>isRef，判断一个值是否是ref<br>isProxy，判断一个对象是否是由 reactive 或者 readonly 方法创建的代理。<br>isReactive，判断一个对象是否是由 reactive 创建的响应式代理<br>isReadonly，判断一个对象是否是由 readonly 创建的只读代理。 </p><p>仅给2、3写个例子吧<br>toRef，即把reactive 对象上的一个属性变成ref<br>什么意思呢，还是看上面的破坏了响应式的栗子<br>修复一下(即可把它一个属性抽出来做成响应式的ref，且它们还是互相关联的)</p><p><br><textarea></br><srcript><br>  <div ref="test"><br>    <br>    &lt;button @click=”age++”&gt;add</button><br>  </div><br><br></textarea></br></template><br><br><textarea></br><srcript><br>import {<br>  ref,<br>  reactive,<br>  computed,<br>  watch,<br>  provide,<br>  inject,<br>  readonly,<br>  toRef,<br>} from “vue”;<br>export default {<br>  props: {<br>    data: String,<br>  },<br>  setup(props, context) {<br>    const obj = reactive({<br>      name: “gxb”,<br>      age: 18,<br>    });<br>    const age=toRef(obj, “age”);<br>    watch(()=&gt;obj.age,(newAge,oldAge)=&gt;{<br>        console.log(newAge);<br>    })<br>    return { age };<br>  },<br>};<br></srcript><br><br></textarea></br></p><p>toRefs则是把这个对象里面的所有属性均整成ref，这个修复则更简单了</p><p><br><textarea></br><srcript><br>  <div ref="test"><br>    <br>    &lt;button @click=”age++”&gt;add</button><br>  </div><br><br></textarea></br></template><br><br><textarea></br><srcript><br>import {<br>  ref,<br>  reactive,<br>  computed,<br>  watch,<br>  provide,<br>  inject,<br>  readonly,<br>  toRef,<br>  toRefs<br>} from “vue”;<br>export default {<br>  props: {<br>    data: String,<br>  },<br>  setup(props, context) {<br>    const obj = reactive({<br>      name: “gxb”,<br>      age: 18,<br>    });<br>    const obj02=toRefs(obj);</p><pre><code>return &#123; ...obj02 &#125;;</code></pre><p>  },<br>};<br><br></textarea></br></srcript></p><h2>1.2. Teleport</h2>传送门，顾名思义场景：某一些组件中我们可能需要一个模态框的功能，然而虽然逻辑上来说这个模态框是属于该组件中的，但是实际操作一般需要把这个框子挂到body上。Teleport 组件就是帮我们处理这个问题的来看栗子假设组件中需要有一个模态框<br><textarea></br><srcript>    <div>        <model></model>    </div><br></textarea></br></template><br><textarea></br><srcript>import Model from './model'export default {    components:{Model}}</srcript><br></textarea></br>模态框组件<p><br><textarea></br><srcript><br>  <div><br>    &lt;button @click=”flag=true”&gt;点击</button><br>    <teleport to="body"><br>      <div v-if="flag"><br>        <div>模态框</div><br>      </div><br>    </teleport><br>  </div><br><br></textarea></br></template><br><br><textarea></br><srcript><br>import { ref } from “vue”;<br>export default {<br>  setup() {<br>    const flag = ref(false);<br>    return { flag };<br>  },<br>};<br></srcript><br><br></textarea></br><br>即teleport组件的作用就是把teleport标签里面的元素传送到body上去</p><p>再看层级</p><h2>1.3. Fragments</h2>这个的理解就更简单了原来只能这样:即只允许存在一个最外层的父元素div<p><br><textarea></br><srcript><br>  <div><br>    …<br>  </div><br><br></textarea></br></template><br><br></textarea></br><br>现在可多个</p><p><br><textarea></br><srcript><br>  <div><br>    …<br>  </div><br>  <div><br>    …<br>  </div><br>    …<br><br></textarea></br></template><br><br></textarea></br></p><h2>1.4. Emits Component Option</h2><h3>1.4.1 自定义事件派发</h3>这里的重点：即多了一个派发事件的选项emits也就我们以后再次使用emit派发一个事件的时候需要把这此派发的事件名放到选项里栗子:<p><br><textarea></br><srcript><br>  <div><br>    &lt;button @click=”$emit(‘test’)”&gt;点击</button><br>  </div><br><br></textarea></br></template><br><br><textarea></br><srcript><br>export default {<br>  emits: [“test”],<br>};<br></srcript><br><br></textarea></br><br>注意：这里如果你派发的是一个原生事件，且没有把此事件放进emits选项中，其父组件的监听会被触发两次</p><p><br><textarea></br><srcript><br>  <div><br>    &lt;button @click=”$emit(‘click’)”&gt;点击</button><br>  </div><br><br></textarea></br></template><br><br><textarea></br><srcript><br>export default {<br>//   emits: [“click”],<br>};<br></srcript><br><br></textarea></br></p><h3>1.4.2 v-model</h3>vue3中的v-model,所借助的属性是 modelValue  所借助的事件是 update:modelValue (且3中把sync移出掉了)栗子父组件<p><br><textarea></br><srcript><br>  <div id="nav"><br>    <br>    <test05 v-model="data"></test05><br>  </div><br><br></textarea></br></template><br><br><textarea></br><srcript><br>import { ref } from “vue”;<br>import Test05 from “./components/test05”;<br>export default {<br>  components: { Test05 },<br>  setup() {<br>    const data=ref(‘gxb’)<br>    return {data};<br>  },<br>};<br></srcript><br><br></textarea></br><br>子组件</p><p><br><textarea></br><srcript><br>  <div><br>    &lt;input type=”text” :value=”modelValue” @input=”$emit(‘update:modelValue’,$event.target.value)” /&gt;<br>  </div><br><br></textarea></br></template><br><br><textarea></br><srcript><br>export default {<br>    props:{<br>        modelValue:String<br>    },<br>    emits:[‘update:modelValue’]<br>}<br><br></textarea></br></srcript></p><p>自定义属性名，vue2.x中可通过 model选项  指定传过来的属性名和指定本次v-model要利用的事件。 vue3中也可自定属性<br>栗子<br>父组件(即在v-model后面指定绑定)<br><test05 v-model:foo="data"></test05></p><p>子组件<br><br><textarea></br><srcript><br>  <div><br>    &lt;input type=”text” :value=”foo” @input=”$emit(‘update:foo’,$event.target.value)” /&gt;<br>  </div><br><br></textarea></br></template><br><br><textarea></br><srcript><br>export default {<br>    props:{<br>        foo:String<br>    },<br>    emits:[‘update:foo’]<br>}<br><br></textarea></br></srcript></p><p>一个组件中可写多个v-model指令<br>栗子：<br>父组件<br> <test01 v-model:foo="a" v-model:bar="b"></test01></p><p>子组件<br><br><textarea></br><srcript><br>  <div><br>    &lt;input type=”text” :value=”foo” @input=”$emit(‘update:foo’,$event.target.value)” /&gt;<br>    &lt;input type=”text” :value=”bar” @input=”$emit(‘update:bar’,$event.target.value)” /&gt;<br>  </div><br><br></textarea></br></template><br><br><textarea></br><srcript><br>export default {<br>  props: {<br>    foo: String,<br>    bar: String,<br>  },<br>  emits: [“update:foo”, “update:bar”],<br>  setup(props) {<br>    return {};<br>  },<br>};<br><br></textarea></br></srcript></p><h2>1.5. createRendererAPI</h2>自定义渲染器字如其名，它的主要功能是我们可以自定义 Virtual DOM 到DOM的方式，看了好3、4个大佬的栗子都是用canvas画了图。自己这里想不出什么栗子来先不写了二、其他2.1 Global API在vue2.x中没有应用的概念，vue2.x中的所谓的“app”也只不过是一个通过Vue构造出的实例。但是2.x中的一些全局API（像mixins、use、 component等 ）是直接在Vue构造函数中的也即如果下面还有使用new Vue的“应用”，这些全局API很容易造成污染下面来看一眼vue3的入口文件import { createApp } from 'vue'import App from './App.vue'import router from './router'import store from './store'<p>createApp(App).use(store).use(router).mount(‘#app’)</p><p>现在有了一个createApp，这个方法就返回一个应用程序的实例<br>拿component写个栗子<br>import { createApp, h } from ‘vue’<br>import App from ‘./App.vue’<br>import router from ‘./router’<br>import store from ‘./store’</p><p>createApp(App)<br>    .component(‘test06’, {<br>        render() {<br>            return h(‘div’, {}, ‘全局组件’)<br>        }<br>    })<br>    .use(store)<br>    .use(router)<br>    .mount(‘#app’)</p><p>其他API相应改变，如官网</p><p>Global API Treeshaking<br>官网是以 Vue.nextTick() ，这个全局API来举例的<br>这个摇树是什么玩意呢？</p><p>通过这句话可以理解，即这些个API不分青红皂白就写死在vue的构造函数上，如果我们在应用中本就没有对这些个API进行使用。那么打包时把这些东西也打进去是不是浪费性能同时也增大了打包体积呢<br>故vue3中，nextTick的使用也是需要从vue中导入一下的<br>import { nextTick } from ‘vue’</p><p>nextTick(() =&gt; {<br>  …<br>})</p><p>其他受影响的API</p><p>2.2 Template Directives<br>v-model<br>v-model上面已经写了，去掉了.sync，使用v-model进行了统一<br>v-if、v-for优先级问题<br>在2.x是v-for优先级高，在3.0中v-if的优先级高<br>2.3 Components<br>函数式组件<br>因为在vue3中函数式组件现在在性能上的提升可以忽略不计，还是推荐使用状态组件。<br>并且这里函数式组件只能通过纯函数进行声明，只能接受props和context（也是emit、slots、attrs）<br>简单搞个例子<br>这里偷个懒吧，把官网的栗子拿过来<br>vue2.x<br>// Vue 2 Functional Component Example<br>export default {<br>  functional: true,<br>  props: [‘level’],<br>  render(h, { props, data, children }) {<br>    return h(<code>h$&#123;props.level&#125;</code>, data, children)<br>  }<br>}</p><p>vue3,区别除了下面所要说的h函数变化问题，还有上面提到的参数问题，再一个变化就是去掉了 functional: true,<br>import { h } from ‘vue’</p><p>const DynamicHeading = (props, context) =&gt; {<br>  return h(<code>h$&#123;props.level&#125;</code>, context.attrs, context.slots)<br>}</p><p>DynamicHeading.props = [‘level’]</p><p>export default DynamicHeading</p><p>单文件形式对比<br>2.x<br>// Vue 2 Functional Component Example with <br><textarea></br><srcript><br><template functional><br>  <component    :is="`h${props.level}`"    v-bind="attrs"    v-on="listeners"  /><br><br></textarea></br></template></p><p><br><textarea></br><srcript><br>export default {<br>  props: [‘level’]<br>}<br><br></textarea></br></srcript></p><p>3.0,区别去掉了functional,监听器放进了$attrs且可删除<br><br><textarea></br><srcript><br>  <component    v-bind:is="`h${props.level}`"    v-bind="$attrs"  /><br><br></textarea></br></template></p><p><br><textarea></br><srcript><br>export default {<br>  props: [‘level’]<br>}<br><br></textarea></br></srcript></p><p>异步组件<br>原来异步组件咋整的呢<br>const asyncPage = () =&gt; import(‘./NextPage.vue’)</p><p>或者带选项的<br>const asyncPage = {<br>  component: () =&gt; import(‘./NextPage.vue’),<br>  delay: 200,<br>  timeout: 3000,<br>  error: ErrorComponent,<br>  loading: LoadingComponent<br>}</p><p>但是vue3中不一样了，这里有一个新的API defineAsyncComponent用来显示定义异步组件<br>也即<br>const asyncPage = defineAsyncComponent(() =&gt; import(‘./NextPage.vue’))</p><p>或<br>const asyncPageWithOptions = defineAsyncComponent({<br>  loader: () =&gt; import(‘./NextPage.vue’),<br>  delay: 200,<br>  timeout: 3000,<br>  errorComponent: ErrorComponent,<br>  loadingComponent: LoadingComponent<br>})</p><p>细心看也可看出component改成了loader<br>还有一点不同的是，2.x中函数参数中可接收resolve,reject,3.0则不可，但是必须要返回一个Promise</p><h2>2.4 Render Function</h2>渲染函数的改变即原来的h函数是这样的export default {  render(h) {    return h('div')  }}<p>而现在h函数则需要从vue的再导入进来<br>其实我上面有一个栗子已经用到了，再拿过来一次<br>import { createApp, h } from ‘vue’<br>import App from ‘./App.vue’<br>import router from ‘./router’<br>import store from ‘./store’</p><p>createApp(App)<br>    .component(‘test06’, {<br>        render() {<br>            return h(‘div’, {}, ‘全局组件’)<br>        }<br>    })<br>    .use(store)<br>    .use(router)<br>    .mount(‘#app’)</p><p>还有一个属性的变动，直接拿官网的栗子吧<br>2.x 中的节点属性格式<br>{<br>  class: [‘button’, ‘is-outlined’],<br>  style: { color: ‘#34495E’ },<br>  attrs: { id: ‘submit’ },<br>  domProps: { innertextarea: ‘’ },<br>  on: { click: submitForm },<br>  key: ‘submit-button’<br>}</p><p>在3.0中，这些属性不再被嵌套，被展平了(这看起来更像DOM节点上的东西了吧)<br>{<br>  class: [‘button’, ‘is-outlined’],<br>  style: { color: ‘#34495E’ },<br>  id: ‘submit’,<br>  innertextarea: ‘’,<br>  onClick: submitForm,<br>  key: ‘submit-button’<br>}</p><p>插槽方面<br>废掉了$scopedSlots，使用$slots<br>vue2.x中，一个组件使用渲染函数拿插槽是这样的</p><p><br><textarea></br><srcript><br>export default {<br>    render(h) {<br>        return h(‘div’,{},this.$scopedSlots.default)<br>    },<br>}<br></srcript><br><br></textarea></br><br>vue3.x中则是这样的<br><br></textarea></br><br><br><textarea></br><srcript><br>import {h} from ‘vue’<br>export default {<br>    props:{<br>        data:String<br>    },<br>    render() {<br>        return h(‘div’,{},this.$slots.default())<br>    },<br>}<br></srcript><br><br></textarea></br></p><h2>2.5 Custom Elements</h2>自定义元素白名单如一些特殊的组件，我们要特殊用处的希望vue的编译忽略栗子直接往组件中放一个为注册过的组件 <test08></test08><p>不希望出现这个错就把它放进白名单里<br>使用构建工具版本<br>rules: [<br>  {<br>    test: /.vue$/,<br>    use: ‘vue-loader’,<br>    options: {<br>      compilerOptions: {<br>        isCustomElement: tag =&gt; tag === ‘test08’<br>      }<br>    }<br>  }<br>  // …<br>]</p><p> 运行时编译版本<br>const app = Vue.createApp({})<br>app.config.isCustomElement = tag =&gt; tag === ‘test08’<br>is只能用在<component>上<br>但是 <component :is="componentId"></component> 除了这个玩意，我们别的地方可能也有需求需要用到is怎么办呢<br>故vue3中推出了v-is指令</p>]]></content>
    
    
    
    <tags>
      
      <tag>program</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>聊天室项目</title>
    <link href="/2020/09/19/%E8%81%8A%E5%A4%A9%E5%AE%A4%E9%A1%B9%E7%9B%AE/"/>
    <url>/2020/09/19/%E8%81%8A%E5%A4%A9%E5%AE%A4%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<p>github地址：<a href="https://github.com/genaller/genal-chat">https://github.com/genaller/genal-chat</a><br><img src="%E8%81%8A%E5%A4%A9%E5%AE%A4%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>program</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>first</title>
    <link href="/2020/09/18/first/"/>
    <url>/2020/09/18/first/</url>
    
    <content type="html"><![CDATA[<p>the first blog</p>]]></content>
    
    
    
    <tags>
      
      <tag>essay</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
